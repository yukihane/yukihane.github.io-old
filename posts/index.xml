<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 発火後忘失</title>
    <link>https://yukihane.github.io/posts/</link>
    <description>Recent content in Posts on 発火後忘失</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 26 Apr 2020 13:00:50 +0000</lastBuildDate>
    
	<atom:link href="https://yukihane.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes the hard way を最新版の1.18.2でやってみた</title>
      <link>https://yukihane.github.io/posts/202004/26/kubernetes-the-hard-way-v1.18.2/</link>
      <pubDate>Sun, 26 Apr 2020 13:00:50 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/26/kubernetes-the-hard-way-v1.18.2/</guid>
      <description>要約 kube-apiserver の起動引数を --runtime-config=api/all=true に修正すれば v1.18.2 でも記述どおりで動作する。 本文 現時点で本家 Kubernetes The Hard Way は1.15.3をターゲットにして構築を行っていますが、せ</description>
    </item>
    
    <item>
      <title>Kubernetes the hard wayを試すためのtmux基礎知識</title>
      <link>https://yukihane.github.io/posts/202004/25/tmux/</link>
      <pubDate>Sat, 25 Apr 2020 02:43:13 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/25/tmux/</guid>
      <description>Kubernetes the hard wayをやるのに`tmux`の操作を覚えておくのが良さそうだったので使いそうなものを記載しておくことにしました。 Ctrl キーと b キーの同時押</description>
    </item>
    
    <item>
      <title>Hello, Wasm with Rust</title>
      <link>https://yukihane.github.io/posts/202004/08/hello-wasm-with-rust/</link>
      <pubDate>Tue, 07 Apr 2020 22:39:49 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/08/hello-wasm-with-rust/</guid>
      <description>はじめに wasmに挑戦してみようとHello, worldをやってみようとしました。 公式っぽいドキュメントとしてはググると次のものが見つかりま</description>
    </item>
    
    <item>
      <title>TwitterをFirefoxで利用した際のセキュリティ問題</title>
      <link>https://yukihane.github.io/posts/202004/08/twitter-on-firefox-security-issue/</link>
      <pubDate>Tue, 07 Apr 2020 20:15:38 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/08/twitter-on-firefox-security-issue/</guid>
      <description>&amp;gt;Mozilla Firefoxに保存されているTwitterデータのキャッシュについて というリリースが先日出されましたが、具体的にどういう問題なのかが書か</description>
    </item>
    
    <item>
      <title>Hello, JSF</title>
      <link>https://yukihane.github.io/posts/202004/06/hello-jsf/</link>
      <pubDate>Mon, 06 Apr 2020 01:52:30 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/06/hello-jsf/</guid>
      <description>はじめに JSFを少し触ってみようと思ったのですが、もはやロストテクノロジーでどう始めるのかすらドキュメントを探すのが大変… 今回はかろうじてこ</description>
    </item>
    
    <item>
      <title>いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(2)</title>
      <link>https://yukihane.github.io/posts/202004/03/java-application-frameworks-cheat-sheet2/</link>
      <pubDate>Fri, 03 Apr 2020 02:44:22 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/03/java-application-frameworks-cheat-sheet2/</guid>
      <description>Table of Contents はじめに ポイント: xmlファイルを見逃さないようにする どんな(オレオレ)フレームワークを使っているか: web.xml 起動時処理(等): @PostConstgruct Servlet fileter, Servlet listener JSF</description>
    </item>
    
    <item>
      <title>いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(1)</title>
      <link>https://yukihane.github.io/posts/202004/02/java-application-frameworks-cheat-sheet/</link>
      <pubDate>Thu, 02 Apr 2020 06:15:28 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/02/java-application-frameworks-cheat-sheet/</guid>
      <description>Table of Contents 目的 アプリケーションをデプロイする Tomcat にデプロイする WildFly にデプロイする デバッガを接続しステップ実行できるようにする Tomcat へ Eclipse でデバッガをアタッ</description>
    </item>
    
    <item>
      <title>Maven Enforcer Pluginの実行をスキップする</title>
      <link>https://yukihane.github.io/posts/202003/30/skip-maven-enforcer-plugin/</link>
      <pubDate>Mon, 30 Mar 2020 05:37:45 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202003/30/skip-maven-enforcer-plugin/</guid>
      <description>とあるMavenプロジェクトを mvn clean install しようとしたところ、次のエラーになり正常終了しませんでした。 [WARNING] Rule 0: org.apache.maven.plugins.enforcer.BannedRepositories failed with message: Current maven session contains banned repository urls, please double check your pom or settings.xml: central</description>
    </item>
    
    <item>
      <title>MyBatisでストアドプロシージャを実行する</title>
      <link>https://yukihane.github.io/posts/202003/10/stored-procesure-with-mybatis/</link>
      <pubDate>Tue, 10 Mar 2020 05:44:01 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202003/10/stored-procesure-with-mybatis/</guid>
      <description>(もしかしたら以前どこかで書いたかも…) MyBatisでストアドプロシージャを実行する必要に迫られたことがありましたが、オフィシャルリファレ</description>
    </item>
    
    <item>
      <title>td-agentにプロキシを設定する</title>
      <link>https://yukihane.github.io/posts/202003/09/td-agent-with-proxy/</link>
      <pubDate>Mon, 09 Mar 2020 07:54:53 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202003/09/td-agent-with-proxy/</guid>
      <description>sudo systemctl edit td-agent で編集画面を開き、次を記述: [Service] Environment=&#34;HTTP_PROXY=http://myproxy.example.com:8080&#34;</description>
    </item>
    
    <item>
      <title>finalと実質finalの違い</title>
      <link>https://yukihane.github.io/posts/202002/21/effectively-final-difference/</link>
      <pubDate>Fri, 21 Feb 2020 06:53:19 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202002/21/effectively-final-difference/</guid>
      <description>https://ja.stackoverflow.com/a/63099/2808 を見ていて気づいたのですが、 実質final というのは脳内(コンパイラ)で final を補完してくれる、というような処理が行われるわけではないのですね</description>
    </item>
    
    <item>
      <title>Spring Bootでは `-parameters` オプションは有効化されている</title>
      <link>https://yukihane.github.io/posts/202002/20/spring-boot-compiler-parameters/</link>
      <pubDate>Thu, 20 Feb 2020 06:25:59 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202002/20/spring-boot-compiler-parameters/</guid>
      <description>MyBatisの設定項目として useActualParamName というものがあります。マニュアルの説明によると、 ステートメントの引数を参照する際、メソッドシグネチャで宣言さ</description>
    </item>
    
    <item>
      <title>Nodeのnative moduleをRustで書いてみる(Neon)</title>
      <link>https://yukihane.github.io/posts/202002/01/hello-rust-neon/</link>
      <pubDate>Sat, 01 Feb 2020 05:09:38 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202002/01/hello-rust-neon/</guid>
      <description>RustプログラムのGUIにElectronを使うことを考えています。 その前調査としてNodeのネイティブモジュールとしてRustプログラム</description>
    </item>
    
    <item>
      <title>`fluent-plugin-bigquery` のパラメータ `request_timeout_sec` 、未設定の場合はどうなるの？</title>
      <link>https://yukihane.github.io/posts/202001/30/fluentd-request_timeout_sec-default/</link>
      <pubDate>Thu, 30 Jan 2020 02:17:02 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202001/30/fluentd-request_timeout_sec-default/</guid>
      <description>要旨 fluent-plugin-bigquery の README を読んでいると、 request_timeout_sec のデフォルト値が nil になっている(その下の request_open_timeout_sec には 60 が設定されているのに)のが気になりました。 結論としては、 request_timeout_sec は最終</description>
    </item>
    
    <item>
      <title>Spring BootのRestTemplateで text/plain;Windows-31J なRESTレスポンスを処理する</title>
      <link>https://yukihane.github.io/posts/202001/26/resttemplate-with-illformed-json/</link>
      <pubDate>Sun, 26 Jan 2020 14:48:47 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202001/26/resttemplate-with-illformed-json/</guid>
      <description>要旨 JSONを返してくるのだけれどMIME typeが text/plain;charset=Windows-31J なレスポンスを、RestTemplateで扱いたい。 @GetMapping(produces = &#34;text/plain;charset=Windows-31J&#34;) public String response() { return &#34;{\&#34;text\&#34;: \&#34;こんにちは世</description>
    </item>
    
  </channel>
</rss>