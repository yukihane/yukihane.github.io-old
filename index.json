[{"content":"現在、新しいプロジェクトに参画してGitのブランチ戦略を考えています。\n 何回かブランチ戦略を考え、そして運用してきたのですが、思うところを書いてみます。\n まず、ブランチ戦略検討時、しばしば思うのが、\n   経験に差があるため、何が問題(となりやすい)なのかが共有できない\n   ということです。 Gitのブランチングは、比較的共通言語化(successful git branching model(git flow) だとか、 github flowだとか)しているにも関わらず、実際にこれらに従って開発したことがある人の割合が想像以上に低いです。\n   git flowは難しいだとか変な予備知識を仕入れてしまって、ブランチ戦略を考える人が余計なオリジナリティを出してしまう現場が多い\n  そももそもまともにブランチ戦略を考えないまま運用している\n   みたいなことなんだろうな…と考えます。\n 私が いつも Gitブランチを運用していて難しいと感じることは、git flowが複雑だとかそんな些細な問題ではなく、\n   長寿命になってしまうブランチの取り扱い\n   です。また、付随して、\n   git flowの図で言うところの develop ブランチを複数本用意しなければ行けない状況\n   が発生することです。\n 寿命が長くなるということは即ち本流にマージできるタイミングを調整しなければいけない事情が発生している、ということです。\n (そしてそういう事情が発生しないプロジェクトは今まで経験したことがないです。 (もしこんな問題がないのなら、それこそgithub flowで十分だと思います。))\n マージできるタイミングを伺う必要が出てくると、\n   いざマージしようとしたときにconflictが発生した\n  マージしようとしているfeatureブランチを切ったタイミングより前のタイミングに対してのdevelopブランチに対してマージする必要が出た\n  (当初想定していたバージョンより前のバージョンでリリースすることになった、というような場合に発生する)\n      みたいな問題が発生し、この解決に時間を取られてしまいます/作業時にミスが混入してしまいます。\n ブランチ戦略を考える上で解決すべき事項はこれらである、というのが全然理解されないなあ、というのが今日の困りごとでした。\n まとめると、ブランチ戦略を策定する上で重要なことは、\n   ブランチ戦略にオリジナリティを出そうとするな\n  オリジナリティを出して良いのは既に全員がメジャーなブランチ戦略について理解している場合に限る\n     git flow の develop ブランチが複数できる問題について考えろ\n  もちろん可能なら1本で運用できるのが望ましいのだが\n      です。\n ","description":"","id":0,"section":"blog","tags":["git"],"title":"いつもGitブランチ運用でこまること、考慮すべきポイントのまとめ","uri":"https://yukihane.github.io/blog/202007/21/why-git-branching-is-difficult/"},{"content":"  OAuth2ClientAutoConfiguration\n   上記のクラスが Import しているもの(など):\n   OAuth2ClientRegistrationRepositoryConfiguration\n  ClientRegistrationRepository bean 定義。\n  OAuth2ClientProperties(spring.security.oauth2.client)プロパティから定義を取得して生成するインメモリレジストリを生成。\n        OAuth2WebSecurityConfiguration\n  OAuth2AuthorizedClientService bean 定義。\n  OAuth2AuthorizedClientRepository bean 定義。\n  WebSecurityConfigurerAdapter デフォルト実装。\n  全てのリクエストに authenticated を要求する。 oauth2Login, oauth2Client 有効化。\n         リファレンスリンク:\n   ClientRegistrationRepository\n  OAuth2AuthorizedClientRepository / OAuth2AuthorizedClientService\n  全般として: 12.2. OAuth 2.0 Client\n   ","description":"","id":1,"section":"blog","tags":["spring-boot","spring-security"],"title":"Spring Security OAuth 2.0 Client の auto-configuration","uri":"https://yukihane.github.io/blog/202007/20/spring-security-oauth-2.0-client/"},{"content":"RestTemplateBuilder の Bean がsingleton-socpeかつちょっと変態的なインスタンス生成を行っていたので驚いた、というエントリを昔書きました:\n   RestTemplateBuilderに関する覚書\n   ところで、現時点で RestTemplate は既に maintenance mode なので、新規実装に用いるのは忍びないなあ、と思い、 WebClient を利用する前提で薦めることにしました。\n   利用するには spring-boot-starter-webflux を依存関係に追加する。(4.16.1. WebClient Runtime)\n  なお、Spring MVC と Spring WebFlux が同居する場合、デフォルトで Spring MVC が有効化されるhttps://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/htmlsingle/#boot-features-web-environment[4.1.8. Web Environment])。\n     RestTemplateBuildr と異なり WebClient.Builder クラスは Spring Boot所属のクラスではない\n  WebClientAutoConfiguration によってインジェクトされる Builder は prototype-scope。\n   RestTemplateBuilder は singlton-scopeで何か設定を与える度にインスタンスを生成し直して…みたいな歪な感じになっていたのに対し、こちらは素直なものになっているようです。\n ","description":"","id":2,"section":"blog","tags":["spring-boot"],"title":"`WebClient` の 覚書","uri":"https://yukihane.github.io/blog/202007/20/webclientbuilder/"},{"content":"次のQiitaのコメントを見て、そうなんだ、となりました:\n   Auth TokenをlocalStorageに入れようが、cookieに入れようがどっちもXSS危険性には無防備（同ドメイン内なら \u0026#8230;\u0026#8203;）\n   根拠を探してみたところ、同じくQiitaの記事\n   君はできるかな？Cookie ＆ Same Origin Policyセキュリティークイズ4問\n   の出典として RFC6265 HTTP State Management Mechanismが挙げられており、そちらのドキュメントの冒頭にバッチリ書いてありました:\n  (前略)Similarly, cookies for a given host are shared across all the ports on that host, even though the usual \"same-origin policy\" used by web browsers isolates content retrieved via different ports.\n  \u0026#8212; 1. Introduction    Cookies do not provide isolation by port. If a cookie is readable by a service running on one port, the cookie is also readable by a service running on another port of the same server. If a cookie is writable by a service on one port, the cookie is also writable by a service running on another port of the same server. For this reason, servers SHOULD NOT both run mutually distrusting services on different ports of the same host and use cookies to store security- sensitive information.\n  \u0026#8212; 8.5. Weak Confidentiality   ちなみに後続の文章ではスキーマ(http とか)が違っても送信されるよ、と書いてありまして、そういやその問題を抑制する方策のひとつとして secure があるのだな、と。\n 逆に言えば、 secure 属性みたいなのが必要ってことはcookiesはsame-origin-policyに従っているわけではないのだな、という推測が可能ですね。\n ","description":"","id":3,"section":"blog","tags":null,"title":"クッキーの挙動は Same Origin Policy に従う…わけではない","uri":"https://yukihane.github.io/blog/202007/19/cookies-and-same-origin-policy/"},{"content":"私は普段全く git pull は使わず、 git fetch で賄ってきたのですが、今日たまたま git pull を行ったところ、いつの頃からか次のようなメッセージが出るようになっていることに気づきました:\n  warning: Pulling without specifying how to reconcile divergent branches is discouraged. You can squelch this message by running one of the following commands sometime before your next pull:\n git config pull.rebase false # merge (the default strategy) git config pull.rebase true # rebase git config pull.ff only # fast-forward only   You can replace \"git config\" with \"git config --global\" to set a default preference for all repositories. You can also pass --rebase, --no-rebase, or --ff-only on the command line to override the configured default per invocation.\n   この中で推奨されている設定のうち、私のお薦めは\n git config --global pull.ff only   です。\n これは、 git pull を行ったとき fast-forward でマージできる状況でなければマージを行わず、 fetch だけに留める、というオプションです。ローカルブランチは何も変更されません。\n fast-forwardされなかった旨のメッセージが出るので、fetchしたリモートリポジトリをどう取り込むかは改めて考えることができます。\n デフォルトだと merge なり fast-forward なりが自動で走ってしい、意図しない変更を自動で加えられてしまうので、元に戻すのが大変でした。\n ","description":"","id":4,"section":"blog","tags":["git"],"title":"`git config pull.ff only` を設定しておこう","uri":"https://yukihane.github.io/blog/202007/19/use-git-pull-ff-only/"},{"content":" 世の中に認可サーバー製品がたくさんあるので、Spring Securityではサポートしないことを決定しました\n  \u0026#8212; Spring Security OAuth2はあと数年でサポート終了、その代替策 - Qiita   と書かれた記事がありますが、その後この計画は見直されています。\n   Announcing the Spring Authorization Server - Spring Blog\n   上記リンク先にある通り、experimentalとしてですが認可サーバのコードがリポジトリに上がっており、開発が進んでいます。\n   https://github.com/spring-projects-experimental/spring-authorization-server\n   ただ、現在時点では認可サーバをSpringを利用して構築できなくなった、というのはそのとおりで、何か別の代替策を講じる必要はあります。\n ","description":"","id":5,"section":"blog","tags":["spring-security","oauth"],"title":"Spring Security から認可サーバサポートが無くなる、というのは取り敢えず見直されています","uri":"https://yukihane.github.io/blog/202007/19/spring-security-authentication-server/"},{"content":"Kindle Unlimited でいくつかのSpring Framework/Spring Boot 本が読めることに気づきました。\n もし入門本として有用なものがあれば初心者の方に薦めていきたいなと考え、今回それらを呼んでみましたので感想を記録します。\n Spring Boot 2 入門: 基礎から実演まで Kindle版 / 原田 けいと, 竹田 甘地, Robert Segawa 購入する場合の価格は780円。\n   ○ 独自解釈(と捉えられそうな)の書き方は排除しようという意志が感じられる。ちゃんとオフィシャルの説明を根拠にして書こうとしている。\n  ☓ Hello, worldプログラムで`PostMapping`を使っている(そして正しくない使い方をしている)。 オフィシャル だとここは GetMapping 。\n  3.3.3節で GetMapping が登場するが、 RequestMapping との関係について特に言及がなく、唐突に感じる。( RequestMapping を使う必要が無かったのでは )\n  3.4.4節 で RequestMapping についてちゃんと説明しているので著者が分かっていないわけではなく、書き方(や説明順)の問題。\n     - MVCウェブフレームワークについての知識がゼロの人だと、唐突に説明なしで用語が登場して戸惑うかもしれない(例えば、人によっては「テンプレートエンジンって何？」「コントローラって何？」となるかもしれない)。ただそのレベルから本書で説明しろ、というのも酷だと思うので個人的には妥当だと思う。\n  - がっつりEclipse(STS)を前提としている。が、敢えてIntelliJとかVSCodeとか使ってる人なら読み替えるのは容易なはずだよね :) 個人的にもSTS前提とするのは妥当だと思う。\n  ☓ Springマジックをちゃんと説明するのは難しいので「こう書けばこうなります」的な説明になってしまうのは仕方がないのかな、と思う(例: コントローラのハンドラメソッドで return \"index\"; とすれば templates/index.html が呼ばれます)。ただ、なんでそうなるのか調べたい人に対して、オフィシャルへの導線があると良かった。\n  ○ オフィシャルリファレンスへのリンクが正しい。ちゃんと特定バージョン(今回の場合 2.3.0.RELEASE )へのリンクになっている。\n  ○ 最初からDevToolsについて言及している。この本がトップバッターなのでなんとも言えないんだけど、多分他の本はDevToolsには触れられていないんじゃないかな…？\n  ☓ 最初からThymeleafを使っているが、Thymeleafに対する説明が少し足りない感じを受ける。オフィシャルリファレンス( 3.0, Springインテグレーション)へのリンクくらいは有っても良いのでは。\n  ☓ 細かいですが、3.3.4節の記述「 @RequestParam(\"message\") は、正式には name=\"message\" を省略したものです。」は不正確。正しくは(これはJavaの仕様) 「 value=\"message\" を省略したもの」。(ただしここでは name も value も同じ役割なので結果は同じ。)\n  ○ 表紙で「2.3対応」と謳っているだけでなく、ちゃんと内容も2.3での変更点が反映されている。具体的には 4.2.3節で validation が別扱いになったこと、5.3節で h2databese データベース自動命名のランダム化、について触れられている。\n  ○ これは個人的に参考になった点なのですが、Webjars を使ったことがないので役割や使い方を知れたのはすごく為になりました！\n  ☓ 4.3.3節 6.メッセージコンフィグの作成 で @Configuration, @Bean アノテーションが登場しますが、初学者にとって理解難易度が高いと思うので、もう少し説明が欲しい。書かれている説明だけだと絶対理解できない。せめてオフィシャルリファレンスへのリンクとか。\n  ○ Spring Data JPAをちゃんと評価している。日本の記事だと、某氏の影響からか、使いもせずにJPAディス(\u0026amp; MyBatisアゲ)のものが多い…\n  ただ、Spring Data JDBC を誤解しているような気がします。JPAほど複雑さを持ち込まずSpring Data JPAっぽい自動クエリ生成ができるライブラリ、みたいな立ち位置ですよねこれ。(Spring Data JDBC の \"JDBC\" は \"非JPA\" みたいなニュアンスの命名。歴史的にも Spring Data JDBC の方が新しい、はず。)\n     ☓ 本書で解説し切ることはできないのは当然なので、JPAもしくはHibernateリファレンスへのリンクが欲しい。\n  ○ コンストラクタインジェクションを前提としている。また、個人的に @RequiredArgsConstructor について触れられているのもポイント高し。\n  - 個人的には UserDetailsService 否定派( 参考)なので 8.3.3節でそれを使っているのは残念…ですが、まあ、オフィシャルの説明に沿うなら妥当な判断ですよね…\n  ☓ 8.3.3節 @Service の説明は @Component との違いについて、ステレオタイプという概念を交えて説明して欲しかった。\n  ☓ テスティングについての言及がない\n     ","description":"","id":6,"section":"blog","tags":["book","spring-boot"],"title":"Spring Bootブックレビュー Spring Boot 2 入門: 基礎から実演まで","uri":"https://yukihane.github.io/blog/202007/15/spring-boot-books-review/"},{"content":"Qiita に昔(2019年中頃)書いていた資料を転記し忘れていたので構成を見直してアップロードし直します。\n 2020年現在の状況はまた更新されています。次のURLを参照してください。\n   https://spring.io/blog/2019/11/14/spring-security-oauth-2-0-roadmap-update\n  認可サーバのサポートが無くなることが決定した(が、後にこの決定を見直すことも示唆されており、不透明)\n  spring-security-oauth2 の EOL が発表された(2021/5 頃)\n      背景と概要 Spring Boot最新版(2.1.6.RELEASE)でOAuth 2.0 対応のリソースサーバ兼認可サーバを実装する必要に迫られましたが、Spring的にOAuth 2.0 対応が過渡期なようでドキュメントを探したりするのに手間取りました。\n 本エントリは、ドキュメントの所在のメモと、自分の理解度の確認として冒頭に紹介した @kazuki43zoo さんのコードを Spring Boot 2.1.6.RELEASE へマイグレーションしてみたのでそれについてもメモするためのものです。\n   元ネタ\n  Spring Security OAuthで認可コードグラントフローを体感しよう -第２回：とりあえずアプリを作る編 - Qiita\n  https://github.com/kazuki43zoo/spring-security-oauth-demo\n     今回作成したソース\n  https://github.com/yukihane/spring-security-oauth-demo\n  差異の詳細は後述\n        Spring Boot2.1.6における OAuth 2.0 対応 リファレンス 30.3.3 Authorization Server では\n  Currently, Spring Security does not provide support for implementing an OAuth 2.0 Authorization Server. However, this functionality is available from the Spring Security OAuth project, which will eventually be superseded by Spring Security completely.\n  \u0026#8212; Spring Boot 2.1.6.RELEASE リファレンス 30.3.3 Authorization Server   と若干引っかかる説明になっています。 これはどういうことかというと、この節のリンクの何クリックか先にあるドキュメント\n   OAuth 2.0 Features Matrix\n   を見ることで事情が理解できます。 (注: 現在は当時から改訂が入っています)\n   OAuth 2.0 は \"Spring Security\" で実現する方針で、Spring Boot 1.x の頃に利用していた \"Spring Security OAuth\"(spring-security-oauth*)はもはやメンテナンスモードである\n  とはいえ、Spring Securityにはまだ認可サーバサポートがない\n  (予定では \"the end of 2018 or early 2019\" に対応、だったようだが)\n      というわけで、現時点で認可サーバ実装を行おうとした場合には spring-security-oauth2 を利用することになります。\n リソースサーバやクライアントはSpring Securityのものが利用できるのかというと、不可能ではないが 何やら面倒そうな気配 がします。 何か問題が起きたときに解決できる気がしなかったので私は今回Spring Security版を採用するのはやめました。\n まとめると、Spring Bootでリソースサーバ兼認可サーバを作る場合、現時点ではSpring Boot 1.x の頃と同じ仕組みを利用するのが無難そう、という結論に至りました。\n   リファレンス   OAuth 2 Developers Guide - spring-security-oauth2\n  https://github.com/spring-projects/spring-security-oauth/tree/master/samples/oauth2\n  (Spring Bootだけでなく)Spring Frameworkのコードが理解できるのならこのサンプルコードは役に立ちそうな気がします。私は理解できません。\n  正常動作させるために プルリク#1674 をマージする必要がありました。\n        OAuth2 Autoconfig - spring-security-oauth2-boot の 2.1.6版\n  OAuth2 Boot - spring-security-oauth2-boot の current-SNAPSHOT版\n  Spring Boot and OAuth2 - 公式チュートリアル\n  https://github.com/spring-guides/tut-spring-boot-oauth2\n  ソーシャルログインしたいわけではないので自分にはあまり見どころが無かった\n      spring-security-oauth2-boot の 2.1.6版だけでなくcurrent-SNAPSHOT版も見ないと情報が出揃わない、というのが罠でした。\n   今回作成したコードについて   https://github.com/yukihane/spring-security-oauth-demo\n   冒頭で紹介した @kazuki43zoo さんのソースのforkです。 非互換性といくつか本質的でない変更を行っているのでそれについて記載しておきます。\n   クライアントにブラウザでアクセスした際の認証は OAuth 2.0 とは無関係かと考えたのでスキップするようにしています。 98db0dd\n  (追記)ワンショットのリクエストならそれで問題ないのですが、 refresh_token のフローを見てみたい場合などはクライアントがセッションを持っている必要がありました(ので後にもとに戻しています)。\n     grant_type: passwordが通りませんので「アクセストークンの取得」の動作確認ができません。\n  このへん やってないからかな、と思うのですがあまり興味がなかったのでちゃんとは見ていません。\n     元々 application.properties で設定されていたものがJava Configに移っています。リファレンスを真似たためです。 87ab08\n  Spring Data JDBCで実行時エラーになるのですが直し方がわからなかったので Spring Data JPA に移し替えました。 3faf6e\n  Javaバージョンを11に上げています。 c70a534\n     ","description":"","id":7,"section":"blog","tags":["spring-security","auth2.0","spring-boot"],"title":"Spring SecurityのOAuth2.0関連の歴史を調査し実装してみた","uri":"https://yukihane.github.io/blog/202007/15/history-of-spring-oauth2-libraries/"},{"content":"元々JBoss/WildFlyの流れで開発してきたのでずっとMavenを利用してきたのですが、今度のプロジェクトではGradleを使うことに決まったようで、新しい知識が必要となりました。\n 特にMavenで利用していたプラグインと同等のものがあるかどうかを調べる必要を感じたので調査しました。\n 結論としては、これまで利用してきた静的解析系のプラグインは同じようなものがあり、問題なさそう、という感触です。\n ただし、buildshipという、Eclipseに組み込まれている Gradle \u0026#8594; Eclipse プロジェクト変換ツール(Mavenでいうところのm2eみたいなもの)の機能が不十分で、Gradle + Eclipse という組み合わせでは使わない方が良さそうです。 (Gradleを使いたいのならIntelliJなどを利用し、Eclipseが使いたいのならMavenを利用する)\n プラグイン formatter Mavenでは formatter-maven-plugin を利用していました。\n これは、Eclipseに組み込まれているフォーマッタをMavenプラグインとして利用できるようにしたもので、設定ファイルもEclipseのものを読み込め、IDEと設定を共通化できるのが強みです。 (IDEと外部フォーマッタの挙動が少しでも違っているとかなりストレスを感じますよね)\n GradleでEclipseのフォーマッタ設定を流用できそうなものとしては spotless というものがあるようです。\n  checkstyle Gradleオフィシャルプラグンとして存在している？\n   https://docs.gradle.org/current/userguide/plugin_reference.html#code_analysis\n  https://docs.gradle.org/current/userguide/checkstyle_plugin.html\n    pmd 同じくオフィシャル。\n   https://docs.gradle.org/current/userguide/pmd_plugin.html\n    spotbugs spotbugsコミュニティが提供しているみたいです。\n https://github.com/spotbugs/spotbugs-gradle-plugin\n  その他プラグイン 今まで利用したことがないが、今回の調査中に見つけた、有用そうなプラグイン。\n Error Prone Google製Spotbugs(?)。 Gradleプラグインは第三者が開発しているものを利用するようです。\n https://github.com/tbroyer/gradle-errorprone-plugin\n     アノテーションプロセッシング 気になっているのは処理する順番を明示的に設定できるのかどうかという点。 MavenでMapStructとLombokを併用する場合も問題になったが、Gradleではどうなのか。\n 結論としては、 ここ にあるような書き方で行けそうなんじゃないかな、と。\n dependencies { annotationProcessor \"org.mapstruct:mapstruct-processor:${mapstructVersion}\", \"org.projectlombok:lombok:${lombokVersion}\" }   やってみたところ、コマンドラインからは上手く行っているように見えます。\n ただし、Eclipseで操作するとMapStructアノテーションプロセッシングが動作しません。おそらく以下のissueが関連しています。\n   Annotation Processor configuration from Gradle Eclipse Plugin #329 - eclipse/buildship\n   また、ビルド結果が build ディレクトリでなく bin ディレクトリに出力されたりと、統合具合が Maven(m2e)と比較して低い感じを受けました。\n lombok https://projectlombok.org/setup/gradle\n  MapStruct https://mapstruct.org/documentation/installation/#gradle\n    ","description":"","id":8,"section":"blog","tags":["java","gradle"],"title":"Gradleプラグイン/アノテーションプロセッシング調査","uri":"https://yukihane.github.io/blog/202007/15/research-gradle-plugins/"},{"content":"moment().isValid()での24時00分00秒の挙動について - スタック・オーバーフロー より。\n ISO 8601 の以前のspecでは、 0:00 も 24:00 も両方妥当な表記だったらしいです。 実際、\"ISO8601 24:00\" みたいなキーワードで検索するとそのように説明しているサイトも複数ヒットします。\n しかし、 Wikipedia の現在の記述によると、\n  Midnight is a special case and may be referred to as either \"00:00\" or \"24:00\", except in ISO 8601-1:2019 where \"24:00\" is no longer permitted.\n  \u0026#8212; ISO 8601 - Wikipedia   ということで、現在は 24:00 は駄目、ということだそうです。 ISO 8601-1:2019 という付番からして2019年に改訂されたのでしょうか。\n ","description":"","id":9,"section":"blog","tags":["programming","datetime"],"title":"ISO 8601では 24:00 は妥当だったが改訂によりNGになった","uri":"https://yukihane.github.io/blog/202007/14/iso-8601-2400-is-invalid/"},{"content":"…なんてことができたんですね。こんなコード:\n @RestController @Repository public interface VehicleInterface extends JpaRepository\u0026lt;vehicle, Long\u0026gt; { @Query(\"select u from vehicle u where u.year = :year\") @RequestMapping(value = \"/vehicles\", method = RequestMethod.GET) List\u0026lt;vehicle\u0026gt; findByYearEquals(@Param(\"year\") Integer year); }   http://localhost:8080/vehicles?year=2010 的なURLでアクセスします。\n   サンプルコード\n  ネタ元\n   ","description":"","id":10,"section":"blog","tags":["spring-boot"],"title":"Spring Boot で Controller と Repositoryを同じクラスで併用する","uri":"https://yukihane.github.io/blog/202007/11/same-class-controller-and-repository/"},{"content":"https://start.spring.io/ で depencencies に Spring Web を追加して生成します。\n 生成された pom.xml に次の依存関係を追加します:\n pom.xml \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat.embed\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tomcat-embed-jasper\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;!-- 必要に応じて --\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jstl\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;   appliction.properties にﾂｲ着を追加します:\n application.properties spring.mvc.view.prefix=/WEB-INF/view/ spring.mvc.view.suffix=.jsp   src/main/webapp/WEB-INF/view/ の下に JSP ファイルを作成します。\n コントローラではThymeleaf利用時などと同様、 return \"index\"; とすることで index.jsp を返すようになります。\n 参考:\n   Spring Boot version 1 のころのサンプル pom.xml\n   出典:\n   Can you use jsp for your front end while your backend routes are restful in Spring Boot? - Stack Overflow\n  サンプルコード\n      ","description":"","id":11,"section":"blog","tags":["spring-boot","jsp"],"title":"Spring-BootでJSPを使う","uri":"https://yukihane.github.io/blog/202007/11/jsp-on-springboot/"},{"content":"特に実用性とかは考えていない。何となくやってみたというだけ。\n動かしたいやつ 1 2 3 4 5 6 7 8 9  @RestController @RequestMapping(\u0026#34;/\u0026#34;) public class MyController { @GetMapping(\u0026#34;/\u0026#34;) public String index() { return \u0026#34;hello\u0026#34;; } }   設定 1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-webmvc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.tomcat.embed\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tomcat-embed-core\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14  @Configuration @EnableWebMvc public class WebConfig { @Bean ServletWebServerFactory servletWebServerFactory() { return new TomcatServletWebServerFactory(8080); } @Bean DispatcherServlet dispatcherServlet() { return new DispatcherServlet(); } }   1 2 3 4 5 6  @ComponentScan public class MyApplication { public static void main(final String[] args) { SpringApplication.run(MyApplication.class, args); } }   ","description":"","id":12,"section":"blog","tags":["spring-boot","spring-mvc"],"title":"Spring Boot でなるべく依存関係を小さくしてWebMVCを使ってみる","uri":"https://yukihane.github.io/blog/202007/02/minimal-webmvc-with-springboot/"},{"content":"  Spring Expression Language (SpEL) with @Value: dollar vs. hash ($ vs. #)\n   より。\n ${\u0026#8230;\u0026#8203;} は単なるプロパティのプレースホルダ。\n #{\u0026#8230;\u0026#8203;} は Spring Expression Language(SpEL) の構文。\n プレースホルダは置き換えるだけだけれども、SpELはもっと複雑なこともできる(Javaのメソッドを呼び出したりとか)。\n ","description":"","id":13,"section":"blog","tags":["spring-boot"],"title":"${...}と#{...}の違い","uri":"https://yukihane.github.io/blog/202007/02/difference-between-doller-and-hash/"},{"content":"正確には jackson-databind 2.11.0 で。\n jackson 2.11 リリースノート Change default textual serialization of java.util.Date/Calendar to include colon in timezone offset #2643  このへん見ると分かるけど、Spring Boot 2.2 系列は jackson-databind 2.10.x が採用されていて、 2.3.0 で 2.11.0 が採用されている。\nコード:\n1 2 3 4  @GetMapping(\u0026#34;/\u0026#34;) public Date date() { return new Date(); }   結果(2.2.8):\n\u0026quot;2020-06-30T13:46:24.265+0000\u0026quot; 結果(2.3.1):\n\u0026quot;2020-06-30T13:47:09.532+00:00\u0026quot; 2.2.x 書式に戻したいならプロパティで:\nspring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSZ 書式はSimpleDateFormatのリファレンス参照。\nところで上記リファレンスを見ると 2.2.x で 2.3.x の書式にしようとする場合XXXが利用できそうに思われるが+00:00のときZと表現されてしまって同等にはならない。\njackson-databind 的には StdDateFormat#withColonInTimeZone()で設定して欲しいところだと思うが、Spring Boot から簡単に設定変更するパスはなさそう。\nいかがでしたか？\n","description":"","id":14,"section":"blog","tags":["jackson","spring-boot"],"title":"Spring 2.3.0 で時刻オフセットの書式コロン付き+09:00みたいに変わっとるやん","uri":"https://yukihane.github.io/blog/202006/30/json-datetime-format-changed-on-springboot-2.3/"},{"content":"前はここに書いた通り固定で jdbc:h2:mem:testdb という名前だったのにこれでアクセスできんようになってしもた。\n起動ログに\no.s.b.a.h2.H2ConsoleAutoConfiguration : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:30591993-9fe2-4068-a5e2-05b263e3495b' みたいに出るのでここで確認しよう。\nというか、素直にプロパティで\nspring.datasource.generate-unique-name=false 設定したほうが良いわ自分の場合。\nissue:\n Default spring.datasource.generate-unique-name to true  ","description":"","id":15,"section":"blog","tags":null,"title":"Spring Boot 2.3.0 から H2Database の名前 jdbc:h2:mem:testdb じゃなくなっとるやん(デフォルトでは)","uri":"https://yukihane.github.io/blog/202006/28/h2database-name-random-on-springboot-2.3/"},{"content":"Spring Bootは[Spring Data Commons](https://docs.spring.io/spring-data/commons/docs/current/reference/html/)を利用して、Thymeleaf(など)からのリクエストからオブジェクトへ変換する際、Sprint Data JPAと連携して、IDからエンティティオブジェクトへマッピングする機能があります(3.2. Property population)。\n こんな機能があるなんて知りませんでした…。というのも、JPA Entityをそのままリクエストやレスポンスに使うことはなくて、いわゆるDTOへ変換したものを常に使っていたからでした。\n この機能、ソースを追いかけてみると ToEntityConverter が担っているようですが、Spring Boot 2.3.1, 2.2.8, 2.1.15(現時点での最新リリースバージョン)ではこのコンバータがコンテキストに登録されないというバグがあり、機能していません。\n 前述の通り、私自身はこの機能について存在自体を知らなかったので影響はないのですが、使っている人にとってはかなり影響が大きいのではないかと思います。\n 暫定対応としては、最新版のひとつ前のバージョン、つまり 2.3.0, 2.2.7, 2.1.5 を利用する、といったところでしょうか。\n 関連リンク:\n   Translation of URI segments and request parameters into aggregates broken (Spring Data Commons バグレポート)\n  HTML form submit not working with Spring Boot 2.3.1\n  Springboot JPAを使用しオブジェクト間の関連を設定。ブログにコメントが投稿できるようにしたい。\n   ","description":"","id":16,"section":"blog","tags":["spring-boot"],"title":"Spring MVCにはJPA EntityのIDからエンティティオブジェクトに変換する機能がある(が、2.3.1では機能しない)","uri":"https://yukihane.github.io/blog/202006/20/spring-boot-thymeleaf-converts-id-to-entity/"},{"content":"私も今回の質問(本文末参照)を見たとき少しの間勘違いしてしまったのですが、OAuth2.0のクライアントがどこで各リソースオーナーのトークンを管理しているかと言うと、アプリケーションコンテキストであって、ユーザのセッションコンテキストなわけが無いですよね…\n   OAuth2AuthorizedClientRepository / OAuth2AuthorizedClientService\n   クライアントからユーザがログアウトすると、たしかにそのセッションとOAuth2.0の認可情報のひも付きは解除されます。ただしそれはクライアントから認可情報が除去されることを意味しません。なぜなら、そもそもOAuth2.0は、ユーザがクライアントに対してログイン状態のときのみクライアントがリソースにアクセスできるようになる、というような性質のものではないからです。\n 関連リンク:\n   SpringBoot Oauth2でクライアント認証をする際、sessionが破棄と同時に認証サーバー側のトークンをrevokeする方法について\n   ","description":"","id":17,"section":"blog","tags":["spring-boot","spring-security","oauth2"],"title":"Spring Security OAuth 2.0 Client(OAuth 2.0 Login)でトークンの管理をしているのはOAuth2AuthorizedClientService","uri":"https://yukihane.github.io/blog/202006/17/oauth2authorizedclientservice/"},{"content":"gradle bootRun --debug-jvm   というように、--debug-jvm オプションを付与すれば良いようです。 これで、デバッガ接続の待受状態で起動します。\n BootRun は JavaExec を継承していますが、この --debug-jvm は後者のリファレンスで言及されています。\n なおMavenでの方法は こちら 。\n 関連リンク:\n   IDEなしでKotlinで書いたSpring Bootをデバッグしたい - スタック・オーバーフロー\n   ","description":"","id":18,"section":"blog","tags":["spring-boot","gradle"],"title":"Spring BootのGradleでのデバッグ実行方法","uri":"https://yukihane.github.io/blog/202006/15/spring-boot-debugging/"},{"content":"やっぱり一発目の Spring Security やってみたで UserDetailsService 使うのは止めようず。So many UserDetailsService samples considered harmful for beginners.\nはじめに ちょっと待って！その UserDetails、本当に必要ですか？で書いたことの繰り返しなんですけども。\nSpring Security で認証機能やってみた系のエントリは高確率でUserDetailsService, UserDetails使って実装してると思うんだけど、そんなん使って実装してみても重要なところなんも理解できなかったでしょ？\n(暗黙のデフォルト設定がゴイゴイ入っているので、そのデフォルト設定の仕組みを理解しないことには肝心の認証機能について入っていけないでしょ？)\n自分は10. Authentication章の冒頭で列挙されているような要素を理解することがまず優先すべきことだと思ってる。もうちょっと絞て具体的に言うと\n AuthenticationProvider(及びそれを取りまとめる AuthenticationManager): 具体的に認証処理を実装するところ Filter: リクエストをフックして認証処理を行うようにする WebSecurityConfig: 上記のフィルタやら認証プロバイダやらを使うようにする設定  の 3 点を理解するのが最初の一歩目だと信じてるんですねこれ。\nところが(すっとこ)どっこい(しょ)、UserDetailsService使うと実際に認証処理を行うところであるAuthenticationProviderからしてどこにいっちゃってるのかわかんなくなる。\nいやいやさすがにそこ外したらいかんでしょ、というのが私が懸念するところです。\nなのでここでUserDetailsServiceを使わない「やってみた」記事をぶちかまそうというのが主旨です。\nちなみに、タイトルでは「一発目に使うのは止めよう」と言っていますが、個人的には二発目以降も別に要らんと思ってます。\nただ公式ドキュメントでえらい推されてるんで若干弱気(…と思って最新版のドキュメント見たらこの辺の記述無くなって、やや推し力は弱まっている感じも受けたけど(それでもまだドキュメント内を\u0026quot;userdetails\u0026quot;で検索すると 248 箇所もヒットするんだけどね))。\nUserDetailsService使えばこんな便利なんだぜ！みたいなことがあるのなら教えて欲しいんだぜ。\n更にちなむと、公式ドキュメント中で最も簡潔にUserDetailsServiceについて説明されているのは\u0026rdquo;What is a UserDetailsService and do I need one?\u0026ldquo;節。そんな長くないので全文引っ張ってくると:\n UserDetailsService is a DAO interface for loading data that is specific to a user account. It has no other function other to load that data for use by other components within the framework. It is not responsible for authenticating the user. Authenticating a user with a username/password combination is most commonly performed by the DaoAuthenticationProvider, which is injected with a UserDetailsService to allow it to load the password (and other data) for a user in order to compare it with the submitted value. Note that if you are using LDAP, this approach may not work.\n  If you want to customize the authentication process then you should implement AuthenticationProvider yourself. See this blog article for an example integrating Spring Security authentication with Google App Engine.\n というわけで、前述のUserDetailsServiceに隠されてしまったAuthenticationProvider実装というのはDaoAuthenticationProviderのことなんですけれども、UserDetailsService使って「やってみた」人、その点理解できてました？\nそして本記事の主旨としては、このドキュメントの文章を借りれば、\u0026ldquo;implement AuthenticationProvider yourself\u0026quot;をちゃんと「やってみた」しとこうよ、ということになるんだわさ。\nコードへのリンク https://github.com/yukihane/hello-java/tree/master/spring/springboot-auth-example-202006\n以降の文章中では、そのタイミングでの実装コードのハッシュも記しています。\n「やってみた」してみよう！ ところで、そもそも何を作ろうとしているの？ 以下のの blog で実装している機能(の途中まで)をパクらせてもらいます。\n Implementing JWT Authentication on Spring Boot APIs - Aauth0 Blog  (以降、こちらの blog エントリのことを「参考元」と呼称します。)\n次のような機能を提供する Web API を実装します:\n ユーザ登録 登録したユーザの認証(ログイン) ログインしたユーザのみが取得できるリソース提供  あんま参考元タイトルに\u0026quot;JWT\u0026quot;という単語が入ってますがそこはあんま関係ないです。AuthenticationProvider自作するためのネタになっているだけです。\nあと、参考元あるんやったらそっち見た方が良いんじゃないの？という疑問については:\n 参考元は UserDetailsService 使っているのに対しこちらは使っていない、というのが最も大きな違いです 参考元は一気にコードがドバっと出てくるので、実際に作る順番がわかりづらいかな、と思いました(のでこちらでは順番考えて説明しています) あとは、勘違いしそうな型の使い回しをなるべくやめたり、誤解しそうな箇所だと思う点について細かな修正を行っています  ベースプロジェクトの作成と基本設定追加 それじゃ早速やっていきましょう。\nベースプロジェクト作成 https://start.spring.io/ でベースを作成しよう。ちなみに Jav11 の想定で、今回利用する SpringBoot のバージョンはリリースされたてほやほやの 2.3.1 だ！(このサンプル書いてる途中にリリースされたよ！)\n利用する dependencies は次の通り:\n 使う使わないに関わらず取り敢えずぶち込んどけ系: DevTools, Lombok, Spring Configuration Processor スタンダードなウェブアプリ作るので: Spring Web Spring Security をやってみたするので当然: Spring Security DB にユーザ登録してそのデータで認証処理するので: Spring Data JPA, H2 Database  ベースプロジェクトの作成が終わったら、ダウンロード\u0026amp;展開してSpring Tools 4 for Eclipseを起動してプロジェクトをインポートしよう。\n続いて色々基本的な設定を加えていくよ。\n依存ライブラリの追加 参考元に書いてある通り、今回のサンプルでは次のライブラリが追加で必要なのでpom.xmlのdependenciesに追加します:\n1 2 3 4 5 6 7 8 9  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.xml.bind\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jaxb-api\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.auth0\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;java-jwt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.10.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   SQL ログ出力 インメモリ DB 使うのでホンマに DB に入ってんの？とか気になると思うので SQL をログ出力するようにしときます。\nlogging.level.org.hibernate.SQL=DEBUG logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE UserDetailsService の auto-configuration を無効化 今回の目玉、UserDetailsServiceを使わない、を確実にするためにUserDetailsServiceAutoConfigurationを disable します。デフォルトだと良い感じに設定されちゃってるので、使ってないつもりで使ってた、みたいなことが(SpringBoot あるある)。\n1 2 3 4 5 6 7 8 9  package com.example.springbootauthexample202006; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration; @SpringBootApplication(exclude = UserDetailsServiceAutoConfiguration.class) public class SpringbootAuthExample202006Application { ...   websecurityconfg の auto-configuration を無効化 この件です。未設定の状態だと Boot 君がよしなに設定してくれちゃうんで取り敢えず次の設定をぶち込んでおきます:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  package com.example.springbootauthexample202006.security; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; @Configuration public class MyWebSecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { http.csrf().disable() .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS); } }   いや空設定ちゃうんかい！csrfとか何やねんそれ！というツッコミについては、今回のスコープから外れるのでパス。\n画面じゃない Web API なんでこれで良いんですぅ。\nここまでのコード: 31312e8c94530bb6f6272d0b9c6c9607a83939ec\nユーザエンティティの作成 さてベースを設定し終わったので実装に入りましょう。\n何から作るのが自然かと聞かれたときユーザのエンティティから作ると答えるのは別に変じゃなかろうもん。\nログイン ID とかパスワードを保持するところ、最初に欲しいよね？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  package com.example.springbootauthexample202006.user; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.Id; import javax.persistence.Version; import lombok.Data; import lombok.NoArgsConstructor; @Entity @Data @NoArgsConstructor public class ApplicationUser { @Id @GeneratedValue private Long id; @Version private int version; @Column(nullable = false, unique = true) private String username; @Column(nullable = false) private String password; public ApplicationUser(final String username, final String password) { this.username = username; this.password = password; } }   はい。特筆すべきところが無い普通の JPA Entity クラスです。もうちょっとそれっぽく email とかの項目有っても良いんじゃないかとも一瞬考えましたが面倒なのでやめました。\nところでいきなり余談に入るんだけれど(なので読み飛ばして OK)、UserDetailsServiceを使う場合、UserDetailsは上記のようなユーザエンティティに実装すべきでしょうか？\n自分は、\n 一般的にはユーザエンティティはUserDetailsを実装する必要はない(し、実装しちゃうと理解の妨げになるので、少なくともやってみたコードでは実装すべきではない)  (UserDetailsって Authentication#getPrincipal() で取得できるようになる情報っしょ？principal = ユーザ なわけなくなくなくなくなくなくない？)    派なんだけれども、巷にあふれるやってみたコードでは実装しちゃってるコードがどちゃくそ多い。\n…書いてて気になってきたのでちょっと Qiita 内の記事で見てみよう…というわけで根気が途切れるまで新着順で検索してみた:\n ユーザエンティティにUserDetailsを implements する 派  SpringSecurity(securityConfig)によるログイン機能実装 spring boot security + DB 認証を試した時のポイント SpringBoot(Kotlin)と Freemarker でログインするサンプル作った SpringBoot + Spring Security で認証を行う   ユーザエンティティにUserDetailsを implements しない 派  Visual Studio Code による Spring5 MVC Web アプリ開発　Spring Security 使用編 1/3【準備編】 Spring-Security の新規登録とログイン（JPA） Spring Security で DB 認証\u0026amp;BCrypt でハッシュ化 Spring Security と Spring Boot で最小機能のデモアプリケーションを作成する SpringSecurity で認証機能を実装 ③   その他: UserDetailsにユーザエンティティを所有させる派  Spring Security データベースの認証 Spring Security ログイン認証の DB アクセス処理を実装 Spring boot で、パスワードをハッシュ化して会員登録 \u0026amp; Spring security を使って、ログイン機能実装。 SpringSecurity で認証作ってみた　その１フォーム認証 Spring Security データベースの認証 Spring Security with Spring Boot 2.0 で簡単な Rest API を実装する SpringSecurity で DB ログイン認証処理を実装してみた(MyBatis 使用)    (あんま時間かけて見てないので分類間違い御免)\n…どちゃくそ多いという程ではなかった。でも第 3 の派閥を見つけてしまったよ…\nちなみに公式リファレンスではUserDetailsについての指針は特に無いし、公式ガイド(1,2)のサンプルコード含めてもインメモリでUserDetailsオブジェクト作ってる例ばっかりでそれを実際にはどこからどうやって取得すべきなのかが推測できないものばっかり。うーんこ 💩 の。\nサインアップ機能(ユーザ登録機能) さあさ続きましてはさっきのApplicationUserの永続化でございます。\nまだ Spring Security 関係ないのでサクッと行きましょう。\nコントローラと、コントローラがつこてるApplicationUserリポジトリを実装。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  package com.example.springbootauthexample202006.user; import java.util.List; import lombok.Data; import lombok.RequiredArgsConstructor; import lombok.extern.slf4j.Slf4j; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\u0026#34;/users\u0026#34;) @RequiredArgsConstructor @Slf4j public class UserController { @Data public static class UserForm { private String username; private String password; } private final ApplicationUserRepository applicationUserRepository; @PostMapping(\u0026#34;/sign-up\u0026#34;) public void signUp(@RequestBody final UserForm form) { final ApplicationUser user = new ApplicationUser( form.getUsername(), form.getPassword()); final ApplicationUser saved = applicationUserRepository.save(user); log.info(\u0026#34;User sign-upped: {}\u0026#34;, saved); } @GetMapping(\u0026#34;\u0026#34;) public List\u0026lt;ApplicationUser\u0026gt; users() { return applicationUserRepository.findAll(); } }   1 2 3 4 5 6 7 8  package com.example.springbootauthexample202006.user; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface ApplicationUserRepository extends JpaRepository\u0026lt;ApplicationUser, Long\u0026gt; { }   ここまでのコード: 916d7bed6d26787b73091725a662a39051130f04\nここまで実装できたら実際に動かしてみよう。curlを使って次を実行だ:\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;yamada\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   これでyamada君が登録された。ログにそれっぽい出力があるはずだ。あるいは、\n1  curl http://localhost:8080/users   で登録ユーザ一覧が見られる。\nパスワードのハッシュ化 (今回の流れで出すには少し細かい話なのかなと思ったのだけれど、)\n1  curl http://localhost:8080/users   を見て気づいたであろうか。そう！！誰も！！パスワードをハッシュ化していないのである！！\nというわけでハッシュ化しましょう。\n1 2 3 4 5 6 7 8 9 10 11 12 13  @PostMapping(\u0026#34;/sign-up\u0026#34;) public void signUp(@RequestBody final UserForm form) { final PasswordEncoder passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder(); final ApplicationUser user = new ApplicationUser( form.getUsername(), passwordEncoder.encode(form.getPassword())); final ApplicationUser saved = applicationUserRepository.save(user); log.info(\u0026#34;User sign-upped: {}\u0026#34;, saved); }   ここまでのコード: ec6b8045d0b007c1c6dd3eb58b31bd8b117ee362\nもう一度上に書いたcurlコマンドを実行してみよう。今度は生パスワードでなくハッシュ化されたパスワードが DB に保存されたはずだ。\nちなみにこのPasswordEncoder、巷のやってみた記事では次のように Bean 化しているものが多い。\n1 2 3 4 5 6 7  @Configuration public class MyConfig { @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } ...   だけどなァ、これをするとなァ、Spring Security のグローバルのデフォルト設定が置き換わっちまうんだよなァ。\nわかっててやってるなら良いんだけど、何の説明もなしにいきなり書くなら参考元のようにBCryptPasswordEncoderを Bean 化するのが無難じゃなかろかいな。\n1 2 3 4  @Bean public BCryptPasswordEncoder bCryptPasswordEncoder() { return new BCryptPasswordEncoder(); }   セキュリティ設定 ﾋｬﾊｯｰ!ついに Spring Security の時間だぜ！\n取り敢えず原則認証受けてないとアクセスできないように設定しよう。\nただし、上で実装したサインアップエンドポイントだけは例外だ。誰でもアクセスできなくちゃあならない。\n(さもなくば、服を買いに行くための服が無い状態だ。)\n1 2 3 4  http.authorizeRequests() .antMatchers(HttpMethod.POST, \u0026#34;/users/sign-up\u0026#34;) .permitAll() .anyRequest().authenticated();   ここもまあハマりポイントとかいろいろ有ったりすると思うんだけど涙をのんで今回は詳しい話をパス！\nここまでのコード: 2692a5c1fc141d412777d3e9126c6f4f99727d87\nさて上記セキュリティ設定が済んだらもう一度上のcurlコマンドを実行してみよう。\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;tanaka\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   ふむ、ユーザ登録は登録できているように見える。\n1  curl http://localhost:8080/users   ん？403に変わったぞ？となったら正解だ。自由にアクセスできないようにセキュリティ設定したんだからな！\n認証の実現 認証フィルタ さあそろそろヤマ場だ。\n認証フィルタは冒頭「はじめに」で書いた通りリクエストをフックして認証処理を行わせるところだ。\n今回、敢えて自作するサンプルを選んだわけだけれども、そういう場合でも 1 から作るみたいなことはあんまりないと思う。\n一番よくあるのは今回みたいに UsernamePasswordAuthenticationFilter を継承してカスタマイズする、みたいなものなんじゃなかろうか。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  package com.example.springbootauthexample202006.security; import static com.auth0.jwt.algorithms.Algorithm.HMAC512; import com.auth0.jwt.JWT; import com.fasterxml.jackson.databind.ObjectMapper; import java.io.IOException; import java.util.Date; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter { private static final String SECRET = \u0026#34;SecretKeyToGenJWTs\u0026#34;; private static final long EXPIRATION_TIME = 864_000_000; // 10 days  private static final String TOKEN_PREFIX = \u0026#34;Bearer \u0026#34;; private static final String HEADER_STRING = \u0026#34;Authorization\u0026#34;; private final ObjectMapper objectMpper = new ObjectMapper(); public JWTAuthenticationFilter(final AuthenticationManager authenticationManager) { super(); setAuthenticationManager(authenticationManager); } @Override public Authentication attemptAuthentication(final HttpServletRequest req, final HttpServletResponse res) throws AuthenticationException { try { final LoginForm form = objectMpper.readValue(req.getInputStream(), LoginForm.class); final UsernamePasswordAuthenticationToken creds = new UsernamePasswordAuthenticationToken( form.getUsername(), form.getPassword()); return getAuthenticationManager().authenticate(creds); } catch (final IOException e) { throw new RuntimeException(e); } } @Override protected void successfulAuthentication(final HttpServletRequest req, final HttpServletResponse res, final FilterChain chain, final Authentication auth) throws IOException, ServletException { final String token = JWT.create() .withSubject(auth .getName()) .withExpiresAt(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) .sign(HMAC512(SECRET.getBytes())); res.addHeader(HEADER_STRING, TOKEN_PREFIX + token); } }   ここまでのコード: 2d84598819a0574f188b57c930a06c23ff7c2db7\n長い割に重要なポイントは 2 つだけなんだけど、\n getAuthenticationManager().authenticate(creds); としてるのが認証プロバイダ(※次節で実装)に認証処理を委譲しているところ。フィルタがやってるのはその認証プロバイダが認証を行うのに必要な情報の抽出。 (このコード上には現れていなくて、親クラスがやっていることなんだけれど、)このフィルタが適用される、つまり認証処理が行われるのは /login に対する POST 。  というわけで、次は委譲先、認証プロバイダの実装だ。\n認証プロバイダ 入力されたユーザ名とパスワードが DB データと一致してるか確認する、これが！これこそが！みんなの思い描く認証だ！\nUserDetailsSevice使ったときのモヤモヤが晴れるだろう！この素直な実装！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  package com.example.springbootauthexample202006.security; import com.example.springbootauthexample202006.user.ApplicationUser; import com.example.springbootauthexample202006.user.ApplicationUserRepository; import java.util.Optional; import lombok.RequiredArgsConstructor; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.BadCredentialsException; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.crypto.password.PasswordEncoder; @RequiredArgsConstructor public class ApplicationUserAuthenticationProvider implements AuthenticationProvider { private final PasswordEncoder passwordEncoder; private final ApplicationUserRepository applicationUserRepository; @Override public Authentication authenticate(final Authentication authentication) throws AuthenticationException { final UsernamePasswordAuthenticationToken auth = (UsernamePasswordAuthenticationToken) authentication; final String username = (String) auth.getPrincipal(); final String password = (String) auth.getCredentials(); final Optional\u0026lt;ApplicationUser\u0026gt; user = applicationUserRepository.findByUsername(username); final Optional\u0026lt;ApplicationUserAuthentication\u0026gt; result = user.map(u -\u0026gt; { if (passwordEncoder.matches(password, u.getPassword())) { return new ApplicationUserAuthentication(username); } else { return null; } }); return result.orElseThrow(() -\u0026gt; new BadCredentialsException(\u0026#34;illegal username or password\u0026#34;)); } @Override public boolean supports(final Class\u0026lt;?\u0026gt; authentication) { return UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication); } }   ここまでのコード: a9478f869c84248cb7dcddff8d192878e0388810\n認証処理の利用設定 さあ、認証の実装は行ったので、後はこの実装を使うように設定変更するだけだ。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  @Configuration @RequiredArgsConstructor public class MyWebSecurityConfig extends WebSecurityConfigurerAdapter { private final ApplicationUserRepository applicationUserRepository; @Override protected void configure(final HttpSecurity http) throws Exception { ... final PasswordEncoder passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder(); final AuthenticationProvider provider = new ApplicationUserAuthenticationProvider(passwordEncoder, applicationUserRepository); final AuthenticationManager manager = new ProviderManager(Arrays.asList(provider)); http.addFilter(new JWTAuthenticationFilter(manager)); } }   ここまでのコード: 973f5f7a33b84ffbc2f9a069c0a9bd0b9393395c\nhttp.addFilter()で使用するフィルタを登録する、ってのがこのコードの本質。\nそしてフィルタが利用する認証プロバイダ(を管理する認証マネージャ)をコンストラクタで指定してるってわけ。イージーだね！\n当然だけどPasswordEncorderは sign-up でユーザ登録したときのものと同じものを使わないと検証できないよ！\nんで本題と関係ないけど Java わかってる感出すためにArrays.asList()じゃなくて Java9 で導入されたList.of()つこたろ、ってやったら流れるようにバグ踏んだ(#8689])ので皆もイキるときは気をつけよう。\nもいっこあんまり関係ない話をすると、Filter を Bean 化するとちょっと困ったことになったりもした。\n前述のPasswordEncoderもそうだけど、よくわからんけど他人のコードコピペして Bean 化しました！ってやると予期しない範囲まで波及してしまうという、これも Spring Boot あるあるだね！\n閑話休題。あとここで言っとくべきことは、フィルタの適用順って重要、ってことなんだけど、今回のサンプルではもう 1 個フィルタ追加するのでそんときに説明します。\nさあさあ！ついに認証処理を通るリクエストが投げられるようになりましたよ！サインアップしてログインしてみよう！\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;suzuki\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   1 2 3 4  curl -i -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;suzuki\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/login   そうするとログイン成功してこんな感じのヘッダが付いて返ってくるはず。Bearer トークンてやつだね！\n(今回説明した事の本質からは逸れてるのであんまり触れないけど、これは JWTAuthenticationFilterが認証が正常に終了した後にsuccessfulAuthenticationで生成してるので気になる人はそこを見てね！)\nAuthorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzdXp1a2kiLCJleHAiOjE1OTI4OTM3MDN9.ul4oibmjgOMZPoyqu6NqMENIRmoQ92Ht8WsDFr9UupsUo_FeJH4pCwzAa8RP3XNPojYxaJjjq6u91HKJuraz1g 次はこのトークンを使えば保護されたリソースへアクセスできる、ようにする実装だ。\n認可フィルタの実装と適用 認可フィルタ 上で登場した Bearer トークンの使い方を先に書いとくと、\ncurl -H \u0026quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzdXp1a2kiLCJleHAiOjE1OTI4OTM3MDN9.ul4oibmjgOMZPoyqu6NqMENIRmoQ92Ht8WsDFr9UupsUo_FeJH4pCwzAa8RP3XNPojYxaJjjq6u91HKJuraz1g\u0026quot; \\ http://localhost:8080/users みたいにヘッダにつけて保護されたリソースを要求すると、サーバは、「おうおう、あんたなら見せてやれるよ」って言ってくれるわけね。\nただ現時点ではそんな実装してないので上のリクエスト投げても敢え無く403になるわけなのよ。それを何とかするのが 2 つめのフィルタ。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  package com.example.springbootauthexample202006.security; import static com.example.springbootauthexample202006.security.SecurityConstants.HEADER_STRING; import static com.example.springbootauthexample202006.security.SecurityConstants.SECRET; import static com.example.springbootauthexample202006.security.SecurityConstants.TOKEN_PREFIX; import com.auth0.jwt.JWT; import com.auth0.jwt.algorithms.Algorithm; import java.io.IOException; import javax.servlet.FilterChain; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.web.filter.OncePerRequestFilter; public class JWTAuthorizationFilter extends OncePerRequestFilter { @Override protected void doFilterInternal(final HttpServletRequest req, final HttpServletResponse res, final FilterChain chain) throws IOException, ServletException { final String header = req.getHeader(HEADER_STRING); if (header == null || !header.startsWith(TOKEN_PREFIX)) { chain.doFilter(req, res); return; } final ApplicationUserAuthentication authentication = getAuthentication(req); SecurityContextHolder.getContext().setAuthentication(authentication); chain.doFilter(req, res); } private ApplicationUserAuthentication getAuthentication(final HttpServletRequest request) { final String token = request.getHeader(HEADER_STRING); if (token != null) { // parse the token.  final String username = JWT.require(Algorithm.HMAC512(SECRET.getBytes())) .build() .verify(token.replace(TOKEN_PREFIX, \u0026#34;\u0026#34;)) .getSubject(); if (username != null) { return new ApplicationUserAuthentication(username); } return null; } return null; } }   ここまでのコード: 90c26b3dcf6e3ba52651f1ad00e9c8c52b0fd35a\nヘッダに設定されている Bearer トークンをデコードして、その結果から得られる情報をもとに Authenticationを生成しSecurityContextHolder.getContext().setAuthentication()でセキュリティコンテキストへセットする、というのが日本語での簡単な説明。\nここでセットされたAuthentictionのisAuthenticated()がtrueなので、SpringBoot 君は保護されたリソースへのアクセスを許してくれる。\n認可フィルタの利用設定 フィルタの登録。基本は 1 つめのフィルタと同じだね。\n1 2 3 4 5 6 7 8 9 10  @Configuration @RequiredArgsConstructor public class MyWebSecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { ... http.addFilterAfter(new JWTAuthorizationFilter(), JWTAuthenticationFilter.class); } }   ここまでのコード: 881cf366e10ba61162470936e267cab6930a2e57\nんで前に触れたフィルタの適用順の話。\nフィルタが適用される順番はもちろん重要で、例えば今回のフィルタを例にとると、 http://localhost:8080/login にアクセスしたとき、JWTAuthorizationFilter(Bearer トークンのデコード)よりJWTAuthenticationFilter(Bearer トークンの生成)を優先してほしいわけですよ。\nだってログインしようとしてるんだから Bearer トークン持ってるはずないじゃん。\nなのに Bearer トークン要求されたらこれまた服を買いに行くための服以下略じゃないですか！\nで、そのフィルタの順番なんですが、基本これ。\n Table 2. Standard Filter Aliases and Ordering - 18.3.1. Adding in Your Own Filters  この票に登場するクラス、それを継承したクラスは、addFilter()この表の順序に割り当てられる。\n例えばJWTAuthenticationFilterはUsernamePasswordAuthenticationFilterを継承して作ってるので\nhttp.addFilter(new JWTAuthenticationFilter(manager)); とするとUsernamePasswordAuthenticationFilterのところに自動で割り当たる。\n一方で、 JWTAuthorizationFilterはこの表に登場しない OncePerRequestFilter を継承して作っているので(※参考元コードとは異なります)、順序を明示的に教えてあげる必要がある。\nなので、JWTAuthenticationFilterの後にしてくれ\nhttp.addFilterAfter(new JWTAuthorizationFilter(), JWTAuthenticationFilter.class); ってやってるわけ。\n完成 んじゃ実行してみましょうよ。\n1 2 3 4  curl -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;ito\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/users/sign-up   1 2 3 4  curl -i -H \u0026#34;Content-Type: application/json\u0026#34; -X POST -d \u0026#39;{ \u0026#34;username\u0026#34;: \u0026#34;ito\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;password\u0026#34; }\u0026#39; http://localhost:8080/login   1 2  curl -i -H \u0026#34;Authorization: Bearer \u0026lt;loginで取得したトークン文字列\u0026gt;\u0026#34; \\ http://localhost:8080/users   いかがでしたか？\n","description":"","id":19,"section":"blog","tags":["spring-boot","spring-security"],"title":"So many UserDetailsService samples considered harmful for beginners","uri":"https://yukihane.github.io/blog/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/"},{"content":"List(などのコレクション)が要素に null を含むかどうかの判定に、 contains(null) を利用すると NullPointerException が発生することがあります。\n リファレンスには次のようにあります:\n  NullPointerException - 指定された要素が null で、このリストが null 要素を許可しない場合(オプション)\n  \u0026#8212; https://docs.oracle.com/javase/jp/11/docs/api/java.base/java/util/List.html#contains(java.lang.Object)   オプション、とあるが、そういう型は実際に存在するのか、というと、Java9から導入された List.of() メソッドで生成される インスタンス(変更不能なリスト)がそれです。 簡単に試せます:\n List\u0026lt;String\u0026gt; list = List.of(\"hello\"); list.contains(null);   代わりに、例えば次のようなコードで実現できます:\n list.stream().anyMatch(Objects::isNull);   ただし、lambdaを使うとオーバヘッドがあるため、Spring Framework内部では利用しない方針のようで、Springプロジェクトでは CollectionUtils.contains() というユーティリティメソッドが用意されていました。これを使うと次のようになります:\n CollectionUtils.contains(list.iterator(), null);   関連リンク:\n   ProviderManager#checkState() throws NullPointerException #8689 - Spring Security issues\n   ","description":"","id":20,"section":"blog","tags":["java"],"title":"List#contains(null)は使わないほうが良い","uri":"https://yukihane.github.io/blog/202006/13/list-contains-null/"},{"content":"サンプルコード等だけを見ていると UserDetailsService を利用することがSpring Securityの唯一の認証処理実現方法だと誤解しがちですが、 UserDetailsService はむしろユーティリティライブラリくらいの立ち位置で、別に利用しなくても実現可能です。\n そして、役割も誤解されがちで、これは単に認証に必要な情報を\"名前をキーにして\"取得するDAOです。 認証を行うクラスではありませんし、そもそも名前をキーにしないようなシステムでは適合しません。 しかしSpring Boot上でデフォルト設定で使っていると認証するためのクラスが一切出てこないので誤解してしまう、というわけです。\n 公式リファレンスでは次のようにあります:\n  UserDetailsService is a DAO interface for loading data that is specific to a user account. It has no other function other to load that data for use by other components within the framework. It is not responsible for authenticating the user. Authenticating a user with a username/password combination is most commonly performed by the DaoAuthenticationProvider, which is injected with a UserDetailsService to allow it to load the password (and other data) for a user in order to compare it with the submitted value. Note that if you are using LDAP, this approach may not work.\n If you want to customize the authentication process then you should implement AuthenticationProvider yourself.\n  \u0026#8212; What is a UserDetailsService and do I need one?   その他、次のQ\u0026amp;Aも参照してみてください:\n   I need to login in with more information than just the username.\n  How do I access the user’s IP Address (or other web-request data) in a UserDetailsService?\n  How do I access the HttpSession from a UserDetailsService?\n  How do I access the user’s password in a UserDetailsService?\n   要約すると、それらは UserDetailsService の役割ではなくて、 認証フィルター だったり authentication-provider だったりが為すべきことである、というのが理解されていない、というような話です。\n このような誤解を避けるためにも、少なくともはじめはユーティリティクラスであるところの UserDetailsService を利用しない、シンプルなコードサンプルを参照して理解したほうが良いのではないか、と考えるに至りました。\n が、そういったサンプルがどこにあるか思い浮かばなかったので(オフィシャルのサンプルも常に UserDetailsService を使っている)、自分で作りました。\n   https://github.com/yukihane/hello-java/tree/master/spring/springboot-auth-example-202006\n   関連リンク:\n   UserDetailsServiceのloadUserByUsernameの存在意義がよくわからないです\n   ","description":"","id":21,"section":"blog","tags":["spring-boot","spring-security"],"title":"UserDetailsServiceは誤解されている","uri":"https://yukihane.github.io/blog/202006/12/userdetailsservice-conidered-harmful/"},{"content":"…と少し思い返していました。といっても思い出せたのは次の2つなのですが。\n   alpine Linuxへのawscliインストール\n  alpineでgitがcolorにならない\n   Alpine特有の問題については、「取り敢えずglibc/GNU版コマンドをインストールしてみろ」ってのが最初に採ってみる方策としてアリなのかも。\n ","description":"","id":22,"section":"blog","tags":["linux"],"title":"Alpine Linuxでglibcじゃないことに起因する問題ってちょくちょくあるよね","uri":"https://yukihane.github.io/blog/202006/10/alpine-and-glibc-problems/"},{"content":"CompletableFuture の一連の非同期処理 ほげAsync は、デフォルトでは ForkJoinPool.commonPool() という ExecutorService で実行されます。\n そしてこの ExecutorService のワーカスレッドはデーモンスレッドであるため、非デーモンスレッドが無くなると(≒ メインスレッドが終了すると)プール内の処理を完了させること無くプロセスが終了します。\n そのせいで、サンプルコードを走らせてみるとなぜか処理が想定通り行われていない、というような事象が発生することがあるようです。\n そういった場合は、 main メソッドの最後に Thread.sleep() を入れるなどして、少しの間メインスレッドが終了してしまうのを留まらせると期待した結果が得られるでしょう。\n 関連リンク:\n   非同期処理において結果が思ったように出ない理由を知りたい\n  CompletableFutureを使った非同期処理を理解したい\n   ","description":"","id":23,"section":"blog","tags":["java"],"title":"CompletableFuture覚え書き","uri":"https://yukihane.github.io/blog/202006/02/note-of-completablefuture/"},{"content":"https://twitter.com/hishidama/status/1266176675768745984\n  packageの宣言と実際のディレクトリが一致していなくてもmvn compile（やjavac）が成功するんですが、そういうもんでしたっけ？\n    classファイルのパッケージと実際のディレクトリーは対応させないといけないんですけど、ソースファイルについてはそういう制限は無いんですよね。でもけっこう勘違いされているような＾＾；\n   この辺の話が正当かどうか、という話です。\n javac のリファレンス、 Arrangement of Source Code セクションには次のように書かれています:\n  In the Java language, classes and interfaces can be organized into packages, and packages can be organized into modules. javac expects that the physical arrangement of source files in directories of the file system will mirror the organization of classes into packages, and packages into modules.\n   また、 The Java™ Tutorials \u0026gt; Managing Source and Class Files では、\n  Many implementations of the Java platform rely on hierarchical file systems to manage source and class files, although The Java Language Specification does not require this.\n   ちゃんと読んでないですが The Java® Language Specification だと 7.2. Host Support for Modules and Packages 辺りが該当するのでしょうか。\n そんなわけで、(ソースファイルだけでなく)クラスファイルもディレクトリ階層とパッケージを対応付けているのは仕様に拠るものではない、ただし各種実装はそのようにファイルが配置されていることを期待しているのでそれに従いましょう、ということですね。\n ソースファイルがどうでもよくてクラスファイルは従わなくてはならないのは「たまたま実装がそうなっているから」だ、ということのようです。\n ちなみに java コマンドの source-file mode については、ディレクトリ階層は関係ないぜ、ってのが例から読み取れますね。\n ","description":"","id":24,"section":"blog","tags":["java"],"title":"Javaのソースファイルはpackageに対応したディレクトリ階層に置かなくても良い？","uri":"https://yukihane.github.io/blog/202005/29/java-source-location/"},{"content":"kubernetesの試験を受けるに当たって、最小限の .vimrc を覚えておくためのメモ:\n set autoindent set expandtab set tabstop=2 set shiftwidth=2   ","description":"","id":25,"section":"blog","tags":["kubernetes"],"title":"ミニマル `.vimrc`","uri":"https://yukihane.github.io/blog/202005/27/minimal-vimrc/"},{"content":"CMD と command が対応しているわけではないのでまぎらわしい…\nKubernetes リファレンス:\n Container v1 core  参考として Dockerfile リファレンス:\n ENTRYPOINT CMD  ","description":"","id":26,"section":"blog","tags":["k8s"],"title":"DockerfileのENTRYPOINTに対応するのはcommand, CMDに対応するのがargs","uri":"https://yukihane.github.io/blog/202005/06/k8s-command-args/"},{"content":"Kubernetes入門の書籍やドキュメントの中には、Kubernetes環境が既に手元にある前提で書かれているものも多いです。\n そういう場合、どうやってKubernetes環境を調達して良いのかわからず、一つの手段として自前で環境を作る Kubernetes the hard way をやってみたのですが、一旦環境を作ってしまうとインスタンスを起動させ続けねばならず(作り直すの面倒だし)、財布に優しくないので断念しました。\n 代わりに、表題のKubernetesマネージド環境であるところのGKEを利用することにしました。初回の3万円無料枠で利用可能です。\n ドキュメントはここですね:\n   https://cloud.google.com/kubernetes-engine/docs/how-to?hl=ja\n   「単一ゾーンクラスタの作成」を読めば良いでしょう。\n katacodaのplaygroundは完全無料で試すことができます。レスポンスは少し遅いです。\n   https://www.katacoda.com/courses/kubernetes/playground\n   ","description":"","id":27,"section":"blog","tags":["kubernetes"],"title":"GKE(Goole Kubernetes Engine)の始め方","uri":"https://yukihane.github.io/blog/202004/26/gke-getting-started/"},{"content":"要約 kube-apiserver の起動引数を --runtime-config=api/all=true に修正すれば v1.18.2 でも記述どおりで動作する。\n   本文 現時点で本家 Kubernetes The Hard Way は1.15.3をターゲットにして構築を行っていますが、せっかくなので最新版である v1.18.2 でやってみることにしました。\n 結果、1点を除いて記述されているままで構築完了までもっていくことができました。\n 問題があった1点とは、 マスターコンポーネント のうちのひとつ、 kube-apiserver の起動オプションです。\n Bootstrapping the Kubernetes Control Plane 章の Configure the Kubernetes API Serverセクションで kube-apiserver.service ファイルを作成していますが、その中のコマンド引数 --runtime-config=api/all に問題がありました。\n このコマンドをそのまま実行すると、\n  Error: invalid value api/all=\n   というエラーが /var/log/syslog に出力され、プロセスが終了してしまいます。\n 現在のドキュメント では設定すべき値がわかりやすく書き直されていますが、正しくは --runtime-config=api/all=true です。\n これについては、既にIssuesに登録されていました:\n   This was required before the apiserver would come up with v1.17.0 #535\n   作業中の気づいた点などは直接ドキュメントに書き込んでいきました。 というわけで作業ログはこちらになります:\n   https://github.com/yukihane/kubernetes-the-hard-way/compare/5c462220b7f2c03b4b699e89680d0cc007a76f91..master\n     ","description":"","id":28,"section":"blog","tags":["kubernetes"],"title":"Kubernetes the hard way を最新版の1.18.2でやってみた","uri":"https://yukihane.github.io/blog/202004/26/kubernetes-the-hard-way-v1.18.2/"},{"content":"Kubernetes the hard wayをやるのに`tmux`の操作を覚えておくのが良さそうだったので使いそうなものを記載しておくことにしました。\n Ctrl キーと b キーの同時押しを ^b と表記しています。\n     機能 キー操作 補足・説明     起動\n tmux コマンド\n 当然ですが tmux のセッション外で実行します。\n   デタッチ\n ^b d\n 終了とは異なり状態が保存されます。\n   アタッチ\n tmux a コマンド\n -t \u0026lt;session名\u0026gt; でアタッチするセッションを選択可能。セッション一覧は tmux list-sessions コマンド。\n   上下分割\n ^b \"\n 分割されたエリアはpaneと呼ばれます。\n   上下分割したpaneの高さを均等にする\n ^b Alt+2\n    pane移動\n ^b 矢印キー\n マウスクリックでも。\n   全paneに同じ入力を行う/解除する\n ^b :setw synchronize-panes\n the hard wayの説明では setw でなく set を用いているが、 set はセッションに対して適用するコマンド(setw はウィンドウに対して適用)。\n    ","description":"","id":29,"section":"blog","tags":["tmux","kubernetes"],"title":"Kubernetes the hard wayを試すためのtmux基礎知識","uri":"https://yukihane.github.io/blog/202004/25/tmux/"},{"content":"https://github.com/zalmoxisus/redux-devtools-extension/blob/master/README.md#13-use-redux-devtools-extension-package-from-npm\nというわけで型付けされているので\nconst store = createStore(rootReducer, undefined, devToolsEnhancer({}));  で良い。\n何か Qiia の記事とかを見てるとこっちの方法でばっかり書いてあるが。\nElectron から使う場合はElectron 公式からもredux-devtools-extension 公式からもリンクされている electron-devtools-installer が利用できた。\n","description":"","id":30,"section":"blog","tags":["react","redux"],"title":"redux-devtools-extension をTypeScriptで使う","uri":"https://yukihane.github.io/blog/202004/24/redux-devtools-extension-with-typescript/"},{"content":" Electron で File の Open と Save - Qiita  を写経させてもらっていますが、、、動かない。\nリンク先では Electron v4.x を利用していますが現在の最新版は v8.2.3。このバージョン差異が原因のようでした。\n問題 1. Uncaught ReferenceError: require is not defined v8.2.3 でそのまま実行すると、表題のエラーが出ています。\nv5.0.0(#16235)より nodeIntegration 設定のデフォルト値が false に変わったためのようです。\nセキュリティ上の懸念がある場合はこのへんに書いてあることを行うのかなと思いますがよくわからない\u0026amp;今回はローカルアプリなので問題ないので単に nodeIntegration を true にしました(参考ドキュメント)。\nhttps://github.com/yukihane/hello-js/commit/18b7d2c01aef737792748ffe788a6cb67f68c897\n2. Open/Save ボタンを押してファイル選択しても想定通り機能しない Open ボタンを押してファイル選択ダイアログでファイルを選択すると、その内容をテキストエリアに表示する、というのが想定された動作のはずですが、何も起こりません。\ndialog.showOpenDialogメソッドの仕様が変わっており、 v5.x までは引数にコールバック関数を採っていたが、v6 より Promise を戻り値に採るようになったようです(#16973)。\nhttps://github.com/yukihane/hello-js/commit/93d429089a6782283ce9d4738c9e7f150abf757f\nしかしエラーも吐かずに単に動かなくなるって、JavaScript ってすげーな(褒めてない)。\n3. Save ボタンを押しても保存できない 上記対応を行うと Save ボタンを押した際にファイルは作成されるようになりましたが中身が空です。また 2 回目以降の Open ボタンも機能しているように見えません。\n HTMLTextAreaElement - Web API | MDN  を見ると textContent でなく value プロパティを用いるのが適切に思われます。\n(この辺 HTML 童貞なので何が正解かわからない…)\nhttps://github.com/yukihane/hello-js/commit/57c1996adc57a6f4dee9790d1825b65cbbe1835c\n解決 https://github.com/yukihane/hello-js/tree/master/electron/file-io-example\n全体差分: https://github.com/yukihane/hello-js/compare/77e72d9..57c1996\n","description":"","id":31,"section":"blog","tags":["js","electron"],"title":"Electronでfs(File IO)","uri":"https://yukihane.github.io/blog/202004/22/electron-fileio/"},{"content":"Redux 多分使わないけど理解のため写経。\n答え合わせに他の方が似たようなことやってないかググったけれども プラスアルファ要素(Redux Toolkit を使う、feature folders 流派でフォルダ分け、etc)が付いてたりして 1 対 1 で突き合わせて確認できるものが見つからなかった。ので自分が書いたものをリンクしておく:\n https://github.com/yukihane/hello-js/tree/master/redux.js.org/basic-tutorial-typescript  参考にしたのはBasic Tutorial章の各ページ(そしてそこからリンクされていたconnect())と Recipes 章の Usage With TypeScript。\n写経しているときの所感としては:\n こっちにも書いたけどこの tutorial でやってる folders by type 流儀は近い将来書き直されるみたいなので、上記のコードも寿命は長くない。 Dispatchとか DispatchProp とかたまたま見つけたけど本来はどうやってライブラリで定義している型を探し当てれば良いのかわからない。(未解決) Basic Tutorial章、最後のページ \u0026ldquo;Example: Todo List\u0026rdquo; は実際のコードと同期が取れているようだがそれ以外のページはコードサンプルが最新化されていない。そのため順に読みながら理解したところを写経していく、というスタイルを取ると整合性が取れなくなる。  コードでは修正済みのバグが残ってたり。    ","description":"","id":32,"section":"blog","tags":["react","redux"],"title":"ReduxのBasic TutorialにTypeScriptで型を付けただけ","uri":"https://yukihane.github.io/blog/202004/15/redux-basic-tutorial/"},{"content":"https://reacttraining.com/react-router/web/api/Route/route-render-methods\n The recommended method of rendering something with a  is to use children elements, as shown above. There are, however, a few other methods you can use to render something with a . These are provided mostly for supporting apps that were built with earlier versions of the router before hooks were introduced.\n \u0026lt;Route component\u0026gt; \u0026lt;Route render\u0026gt; \u0026lt;Route children\u0026gt; function   つまり、引用部の直前にあるこの書き方:\n \u0026lt;Route exact path=\u0026quot;/\u0026quot;\u0026gt; \u0026lt;Home /\u0026gt; \u0026lt;/Route\u0026gt; \u0026lt;Route path=\u0026quot;/news\u0026quot;\u0026gt; \u0026lt;NewsFeed /\u0026gt; \u0026lt;/Route\u0026gt;  ","description":"","id":33,"section":"blog","tags":["react"],"title":"React Router \u003cRoute\u003e で描画したいコンポーネントの指定方法が人によってまちまちなんだけどどれが正解なの？","uri":"https://yukihane.github.io/blog/202004/13/react-router/"},{"content":"目標 rust で wasm で hello, worldの次として、JavaScript で実装されたプロジェクトを Rust に書き直してみます。\n最近N 予備校のプログラミング入門 Web アプリコースを始めたのでそれを題材にします。\n https://www.nnn.ed.nico/courses/668/chapters/9514  このへんで作っているもので、完成版のコードは\n https://github.com/progedu/assessment-for-download  にあります。\nプロジェクト作成 前回の通り。\nnpm init rust-webpack assessment cd assessment  元ファイルコピー curl -L -o static/assessment.css https://raw.githubusercontent.com/progedu/assessment-for-download/master/assessment.css curl -L -o static/assessment.html https://raw.githubusercontent.com/progedu/assessment-for-download/master/assessment.html curl -L -o js/assessment.js https://raw.githubusercontent.com/progedu/assessment-for-download/master/assessment.js 実行してみる assessmment.html を開きたいので webpack.config.js に設定を追加します:\nmodule.exports = { //... devServer: { openPage: '/assessment.html' } }; 編集がおわったらコマンド実行:\nyarn start  \u0026ldquo;あなたのいいところ診断\u0026quot;ページが表示されれば OK。ただし devtools の console を見ると assessment.js が読み込めていません。\nasessment関数を Rust に移植 src/lib.rs:\nconst ANSWERS :[\u0026amp;str;16] = [ \u0026quot;{userName}のいいところは声です。{userName}の特徴的な声は皆を惹きつけ、心に残ります。\u0026quot;, \u0026quot;{userName}のいいところはまなざしです。{userName}に見つめられた人は、気になって仕方がないでしょう。\u0026quot;, \u0026quot;{userName}のいいところは情熱です。{userName}の情熱に周りの人は感化されます。\u0026quot;, \u0026quot;{userName}のいいところは厳しさです。{userName}の厳しさがものごとをいつも成功に導きます。\u0026quot;, \u0026quot;{userName}のいいところは知識です。博識な{userName}を多くの人が頼りにしています。\u0026quot;, \u0026quot;{userName}のいいところはユニークさです。{userName}だけのその特徴が皆を楽しくさせます。\u0026quot;, \u0026quot;{userName}のいいところは用心深さです。{userName}の洞察に、多くの人が助けられます。\u0026quot;, \u0026quot;{userName}のいいところは見た目です。内側から溢れ出る{userName}の良さに皆が気を惹かれます。\u0026quot;, \u0026quot;{userName}のいいところは決断力です。{userName}がする決断にいつも助けられる人がいます。\u0026quot;, \u0026quot;{userName}のいいところは思いやりです。{userName}に気をかけてもらった多くの人が感謝しています。\u0026quot;, \u0026quot;{userName}のいいところは感受性です。{userName}が感じたことに皆が共感し、わかりあうことができます。\u0026quot;, \u0026quot;{userName}のいいところは節度です。強引すぎない{userName}の考えに皆が感謝しています。\u0026quot;, \u0026quot;{userName}のいいところは好奇心です。新しいことに向かっていく{userName}の心構えが多くの人に魅力的に映ります。\u0026quot;, \u0026quot;{userName}のいいところは気配りです。{userName}の配慮が多くの人を救っています。\u0026quot;, \u0026quot;{userName}のいいところはその全てです。ありのままの{userName}自身がいいところなのです。\u0026quot;, \u0026quot;{userName}のいいところは自制心です。やばいと思ったときにしっかりと衝動を抑えられる{userName}が皆から評価されています。\u0026quot; ]; #[wasm_bindgen] pub fn assessment(user_name: \u0026amp;str) -\u0026gt; String { let sum: u32 = user_name.chars().map(|x| x as u32).sum(); let index = (sum % (ANSWERS.len() as u32)) as usize; ANSWERS[index].replace(\u0026quot;{userName}\u0026quot;, user_name) } js 実装 assessment.jsという名前をそのまま使う方法がわからなかったので仕方なく index.js の方で実装しました。\nassessment関数以外の部分をコピペして assessment.js は削除します。\nただし assessment関数は Rust 側で実装したものを呼び出すように変更します。\nimport(\u0026quot;../pkg/index.js\u0026quot;).then(module =\u0026gt; { ... const result = module.assessment(userName); そして assessment.html は assessment.js でなく index.js を読むようにします。\n\u0026lt;script src=\u0026quot;index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; index.html は不要なので削除します。\n実行 編集は以上です。実行してみます:\nyarn start  配布するまでにはまだひと手間かかりそうだけれども、取り敢えずここまで。\n実装コード  https://github.com/yukihane/hello-js/tree/master/nnn.ed.nico/webapp-primer-2020-rust/assessment  ","description":"","id":34,"section":"blog","tags":["rust","wasm"],"title":"rustでwasmでhello, world(2020-04-08版) の次","uri":"https://yukihane.github.io/blog/202004/09/hello-wasm-next/"},{"content":"はじめに wasmに挑戦してみようとHello, worldをやってみようとしました。\n 公式っぽいドキュメントとしてはググると次のものが見つかりました:\n   The Rust and WebAssembly Book (GitHub repo)\n  Rust から WebAssembly にコンパイルする - WebAssembly | MDN\n   最初は1つめのドキュメントを見ながらやり始めたのですが、どうも記述が古いっぽい気がしてリポジトリを見てみると最終コミットが5ヶ月前で、ちょっとどうかと思ったので2つめを見てみたのですが、こちらはこちらで本当にHello, world部分しか説明されておらず先に進めそうもありませんでした。\n それ以外のものを探したところ、 https://rustwasm.github.io/ から辿れる次のドキュメントを見つけました:\n   The wasm-pack Book\n  The wasm-bindgen Guide\n   …がこちらも少し現状に即していないように見えました。\n 以下、上記のドキュメントを継ぎ接ぎしてHello, worldを作成してみた記録です。\n   プロジェクト作成の前に ツールの種類と概要 似た名前のツール/コマンドが登場するので最初に一覧を見ておくと良いかと考えます。The Rust Wasm Bookに説明があります。\n   5.1. Crates You Should Know\n  5.2. Tools You Should Know\n  5.3. Project Templates\n    プロジェクトテンプレート 前述リンク 5.3. Project Templates 先には3種類のプロジェクトテンプレートが紹介されています。\n いろいろなチュートリアルを見ていると、このテンプレートが事前説明無く使われている(あるいはテンプレート無しで進めていく)のでどのチュートリアルを参考にすれば良いのか混乱しました。\n ですのでここで簡単に触れておきます。\n  wasm-pack-template  RustのコードをWasmプロジェクトにパッケージングするためのテンプレート。JavaScriptの世界とは無関係です(ので package.json などが含まれない)。\n create-wasm-app  Rustから生成したWasmのNPMパッケージを利用するようなJavaScriptプロジェクトのテンプレート。Rustの世界とは無関係です(ので Cargo.toml などが含まれない)。\n rust-webpack-template  JavaScriptプロジェクトですが、一部をRustで実装し、Wasmに変換して利用するようなプロジェクト。\n   \"Hello, worldをWasmでやってみよう！\"という場合、おそらく利用することになるのは rust-webpack-template ではないでしょうか。\n    プロジェクト作成 The wasm-pack Book の 5.1. Hybrid applications with Webpack が rust-webpack-template を利用したプロジェクト作成チュートリアルになっているのでこれをなぞります。\n npm init rust-webpack wasm-app   ( wasm-pack のチュートリアルで用いられているのは wasm-pack-template でなく rust-webpack-template \u0026#8230;\u0026#8203;これだけで混乱するには十分です\u0026#8230;\u0026#8203;)\n ちなみに yarn create rust-webpack は何故か失敗します(こちら と同じ原因でしょうか)。 ですので、 yarn を利用する場合もここだけ npm コマンドで実行する必要がありそうです。\n   Hello, world 加筆 上で参考にしたチュートリアルの続きを進めたいのですが、 Your Rust Crate に書かれているコード\n src/lib.rs // Your code goes here! let p: web_sys::Node = document.create_element(\"p\")?.into(); p.set_text_content(Some(\"Hello from Rust, WebAssembly, and Webpack!\"));   を追加してもコンパイルが通りません。\n これを解決するには The wasm-bindgen Guide の 1.9. web-sys: DOM hello world に書かれている通り、 web-sys の features 設定を行う必要があります。\n また、そもそもコード自体も間違っており features 追加した後コード修正も必要になります。これも上記ページが参考になります。\n Cargo.toml [dependencies.web-sys] version = \"0.3.22\" features = [\"console\", 'Document', 'Element', 'HtmlElement', 'Node', 'Window']   src/lib.rs // Your code goes here! let window = web_sys::window().expect(\"no global `window` exists\"); let document = window.document().expect(\"should have a document on window\"); let body = document.body().expect(\"document should have a body\"); let val = document.create_element(\"p\")?; val.set_text_content(Some(\"Hello from Rust, WebAssembly, and Webpack!\")); body.append_child(\u0026amp;val)?;     サンプル実装リンク   https://github.com/yukihane/hello-rust/tree/master/wasm-app\n     ","description":"","id":35,"section":"blog","tags":["rust","wasm"],"title":"Hello, Wasm with Rust","uri":"https://yukihane.github.io/blog/202004/08/hello-wasm-with-rust/"},{"content":"  \u0026gt;Mozilla Firefoxに保存されているTwitterデータのキャッシュについて\n   というリリースが先日出されましたが、具体的にどういう問題なのかが書かれていないので調べてみました。\n The Mozilla Blog から詳細を辿れました。\n   What you need to know about Twitter on Firefox - The Mozilla Blog\n  Twitter Direct Message Caching and Firefox - Mozilla Hacks - the Web developer blog\n      発生している(た)事象:\n   ダイレクトメッセージがローカルキャッシュに保存されたままになるため、他者が(Twitterにログインしなくとも)ダイレクトメッセージを読み取れてしまう状況になる\n   原因:\n   キャッシュしないようにする指示が不適切だった(Web標準に則っておらず、一部ブラウザでのみ効果のある設定( Pragma: no-cache )を行っていた)。\n  今回のような場合は Cache-Control: no-store を指定しなければならない。\n      Cache-Control の\"キャッシュ可能性\"の節に説明がありますが、\n   no-cache  キャッシュコピーをリリースする前に、検証のために元のサーバーへリクエストを送ることをキャッシュに強制します。\n no-store  クライアントのリクエストであるかサーバーのレスポンスであるかにかかわらず、キャッシュを格納してはいけません。\n     no-cache は リクエストのみ をキャッシュしない指示に対し(ただしレスポンスもキャッシュしなくなるブラウザも存在する)、 no-store は リクエストもレスポンスも キャッシュしない指示なので後者を用いるべきだ、ということのようです。\n ","description":"","id":36,"section":"blog","tags":["security"],"title":"TwitterをFirefoxで利用した際のセキュリティ問題","uri":"https://yukihane.github.io/blog/202004/08/twitter-on-firefox-security-issue/"},{"content":"はじめに JSFを少し触ってみようと思ったのですが、もはやロストテクノロジーでどう始めるのかすらドキュメントを探すのが大変…\n 今回はかろうじてこちらを探し当てられました:\n   https://eclipse-ee4j.github.io/mojarra/\n   MojarraというのはWildFlyに組み込まれているJSF実装ですね。 今回はこちらを参考にしています。\n また、上記ドキュメントからリンクされていたページにも説明がありました:\n   The Web Tier - Java Platform, Enterprise Edition: The Java EE Tutorial\n   その他参考:\n   Maven Webapp Archetype\n  web.xmlのバージョン別DTD・XSDの宣言方法 | KATSUMI KOKUZAWA\u0026#39;S BLOG\n     雛形作成 mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4   でMavenプロジェクト作成。\n デフォルトだとJava1.7を用いる設定になっているので11に変更:\n pom.xml ... \u0026lt;properties\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;maven.compiler.source\u0026gt;11\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;11\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; ...   src/main/webapp/WEB-INF/web.xml で指定されているServletのバージョンが2.3と古いので4.0に更新します。また、前述参考ページにある通り .xhtml 拡張子を FacesServlet で処理するようにします:\n src/main/webapp/WEB-INF/web.xml \u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt; \u0026lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\"\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;facesServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;javax.faces.webapp.FacesServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;facesServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;*.xhtml\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt; \u0026lt;/web-app\u0026gt;     View, Model 実装 特に何も変わること無く 参考ページ にある通り src/main/java/com/example/Hello.java, src/main/webapp/hello.xhtml を作成。\n   ビルド\u0026amp;デプロイ 特に他のwarと変わりありません。\n 今回作成したソースをWildFlyにデプロイした場合、デフォルトだと次のURLへアクセスすれば参照できます: http://localhost:8080/jsf-sample/hello.xhtml\n   サンプル実装 https://github.com/yukihane/hello-java/tree/master/javaee/jsf-sample\n   ","description":"","id":37,"section":"blog","tags":["java","javaee","jsf"],"title":"Hello, JSF","uri":"https://yukihane.github.io/blog/202004/06/hello-jsf/"},{"content":"Table of Contents はじめに ポイント: xmlファイルを見逃さないようにする どんな(オレオレ)フレームワークを使っているか: web.xml 起動時処理(等): @PostConstgruct Servlet fileter, Servlet listener JSF phase listener インターセプタ   はじめに 前回はアプリケーションサーバにデバッガをアタッチする方法までを説明しました。\n 今回は、ソースコードを眺めているだけでは通ることを見つけにくい(のでbreakポイントを仕掛け忘れがちな)クラス/メソッドについてリストにしていきます。\n   ポイント: xmlファイルを見逃さないようにする 私自身もそうなのですが、 .java ファイルにはよく注意を向けていても、 .xml ファイルを見忘れていることがよくあります。\n しかし、Javaアプリケーションフレームワークのコア設定は .xml ファイルのみで行えることも多いです。現代はなまじアノテーションでも同様の設定ができるようになったため、余計に見落としがちになったようにも思われます。\n アプリケーションサーバ特有の .xml ファイルなんかもあり私は全て網羅することができませんが、とにかくどういう .xml ファイルがバージョン管理されているかは一度は全数確認してみた方が良いでしょう。\n 重要な .xml ファイルの典型的な一例:\n   アプリケーションサーバ特有の設定ファイル(例えばWiildFlyなら jobss-web.xml)\n  ejb-jar.xml (ejb)\n  web.xml (ほぼ全て)\n  faces-config.xml (JSF)\n  beans.xml (CDI)\n  applicationContext.xml (Spring Framework)\n   体系的でなく思いつくままになりますが、書いていきたいと思います。\n   どんな(オレオレ)フレームワークを使っているか: web.xml Javaにおいて、いわゆるオレオレフレームワークはServletコンテナを用いた Fornt Controller Pattern で実現されることが一般的です。\n そういったフレームワークとServletコンテナとの接続ポイントが、 web.xml で設定されます。ですので、 web.xml にかかれているクラス名を見れば利用されているフレームワークの種類がわかります。\n   Spring Framework(Spring MVC)\n  JSF(Mojarraの例)\n  CDI(Weldの例)\n   ちなみに、Java EEアプリケーションサーバ(例えばWildFLy)上で動作させる前提の場合、標準で組み込まれているJSFやCDIについては上記の設定が不要です。\n   起動時処理(等): @PostConstgruct javax.annotation.PostConstruct アノテーションは EJB, CDI, Spring Bean 等様々な箇所で有効です。\n Application-scoped や Singleton-scoped なBeanに付与することでアプリケーション起動時に1回処理するための実装として用いられていることがあります。\n 起動時に何かやっているはずだけどどこで実装されているんだろう…？と思ったときはソースコードを \"@PostConsturct\" で検索してみると何かわかるかもしれません。\n   Servlet fileter, Servlet listener 前述の通り、大半のJavaアプリケーションサーバはServletコンテナ上で実現されています。\n クライントからのイベントに対して何か共通処理を施したい場合、最も一般的なものが Filter(、同様にアプリケーションからのイベントを処理するのが Listener) になります。\n それぞれ、 web.xml の fileter, listener セクションで設定する他、アノテーション @WebFilter, @WebListener で設定することもできます。\n クライアントからのリクエストを処理しているメソッドで、何か前処理が挟まっているような挙動を示しているがどこで実装されているかわからない…というような場合はこれを検索してみると良いかもしれません。\n 常に有効化したい場合はアノテーションで、development/prodcutionといった環境で使い分けたい場合は web.xml で、というような設定が行われているようなアプリケーションも見たことがありますので、片方だけ見ても全数が把握できていない可能性がありますので気をつけてください。\n   JSF phase listener 自分ではJSF開発したことがなく、JSFを使っているアプリケーションをデバッグしたことがあるだけなので詳細を説明することができませんが、前述Servlet listnerのJSF版のようなものです。特定のタイミングでlistnerがイベントを受けることができるので、そこで実行したい処理を実装します。\n これは faces-config.xml で設定しますのでこのファイルを見ればクラスが判明します。\n   インターセプタ インターセプタは特定のメソッドを実行する前後に、事前に設定しておいた処理を挟める機構です。\n これはフレームワークごとに様々なバリエーションがあるので、そのフレームワークについて知っていないと見つけるのが難しい部類になります。クラスの命名は慣例的に\"Interceptor\"を接尾に付与することが多いので、これが手がかりになるかもしれません。\n   ","description":"","id":38,"section":"blog","tags":["java","spring","javaee"],"title":"いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(2)","uri":"https://yukihane.github.io/blog/202004/03/java-application-frameworks-cheat-sheet2/"},{"content":"Table of Contents 目的 アプリケーションをデプロイする Tomcat にデプロイする WildFly にデプロイする   デバッガを接続しステップ実行できるようにする Tomcat へ Eclipse でデバッガをアタッチする WildFly へ Eclipse でデバッガをアタッチする Spring Boot アプリケーションへ Eclipse をアタッチする その他のアプリケーションサーバ、IDEを利用する     目的 Javaを用いた開発にある程度慣れている場合でも、初めてアプリケーションフレームワーク上で開発するとなると戸惑うことがあります。\n ここでは、ある程度Javaに対する知識が、Java EE/Spring Bootアプリケーションの保守を担当になって、ローカルで実行する、そしてデバッグを行おうとした際に引っかかりそうなポイントをまとめていきたいと考えています。\n 説明に用いているコードは次になります:\n   https://github.com/yukihane/java-application-frameworks-cheat-sheet\n     アプリケーションをデプロイする ローカル実行環境でアプリケーションを実行する場合、アプリケーションサーバにアプリケーションをデプロイする必要があります。\n デプロイの方法はアプリケーションサーバのツールセットとしてMavenプラグインとして提供されていたり、IDEの機能として提供されていたり様々あります。\n ところでデプロイというのは何をやっているかというと、アプリケーションファイル( .war だったり .jar だったりします)をアプリケーションサーバの所定のディレクトリにコピーしているだけです。\n ですので、専用ツールやコマンドラインを使わずとも、デプロイすることは可能です。\n なお、Spring BootやWildFly Thorntailは jar の中にアプリケーションサーバー機能を組み込んでいるので、デプロイ操作が不要でそのまま jar ファイルを実行できるようになっています。\n mvn clean package -pl servlet-sample   コマンドを実行すると、アプリケーション servlet-sample/target/servlet-sample.war がビルドできますので、これをデプロイして起動してみましょう。\n Tomcat にデプロイする Tomcatのデプロイディレクトリは webapps なのでこの下に servlet-sample.war をコピーし、 bin/startup.sh コマンドを実行します。そして http://localhost:8080/servlet-sample/ にアクセスしてみます。 終了するには bin/shutdown.sh コマンドを実行します。\n  WildFly にデプロイする WildFlyのデプロイディレクトリは standalone/deployments なのでこの下に servlet-sample.war をコピーし、 /bin/standalone.sh コマンドを実行します。して http://localhost:8080/servlet-sample/ にアクセスしてみます。終了するには Ctrl + C です。\n    デバッガを接続しステップ実行できるようにする アプリケーションサーバをデバッガ接続可能状態にするオプションをつけて起動した上で、IDEからデバッガをアタッチする、というのが基本的なデバッガ利用法になります。いわゆる「リモートデバッグ」という形態になります。\n これもまた、IDE組み込み機能でアプリケーションを起動させたりする方法もあったり、現場で実際にどう行っているかは様々だと思います。\n アプリケーション起動手順はアプリケーションサーバごとに違うのでリファレンスなど記載箇所を検索してください(あるいは、起動スクリプト内の記述がヒントになります(ex. Tomcat, WildFly))。\n デバッガのアタッチ方法も IDE ごとに異なるのでこちらも検索が必要です。\n Tomcat へ Eclipse でデバッガをアタッチする Tomcatでリモートデバッグできるようにする設定は次に記載があります:\n   https://cwiki.apache.org/confluence/display/TOMCAT/Developing#Developing-Q1\n   まず、servlet-sample.war をデプロイし、Tomcatに上記に記載されているJVMオプションをつけて起動します:\n JAVA_OPTS='-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n' bin/startup.sh   あるいは、これもリンク先に書いていますが、 catalina コマンドにデバッグ可能オプションをつけて起動するのが短くて良いかもしれません。\n bin/catalina.sh jdpa start   これで 8000番ポートでデバッガ接続できる状態で起動しました。\n 続いてEclipseからアタッチします。\n Eclipseで servlet-sample プロジェクトをインポートし、Package Explorer で右クリック、 Debug As \u0026gt; Debug Configurations\u0026#8230;\u0026#8203; を選択します。\n    表示されたダイアログで \"Remote Java Application\" を右クリックし \"New Configuration\" を選択します。\n 新しくデバッグのconfigurationが\"servlet-sample\"という名前で作成されますのでこれを編集していきます…が、今回はこのままの設定で動きますので何も触りません。\n ダイアログ右下の\"Debug\"ボタンを押してアタッチします。\n 以上でデバッグ環境が整いました。 ServletByAnnotationクラスにbreakポイントを設定して http://localhost:8080/servlet-sample/annotation へアクセスすることで実行が一時停止することを確認してみましょう。\n デバッガをデタッチする場合はDebugパースペクティブに表示されている \"Disconnect\" ボタンを押します。\n     WildFly へ Eclipse でデバッガをアタッチする WildFlyのリモートデバッグ方法の記述は次にあります [1]:\n   https://docs.wildfly.org/19/Getting_Started_Developing_Applications_Guide.html#debugging-project-with-intellij-and-as7\n   servlet-sample.war をデプロイした後、次のコマンドでWildFlyを起動します:\n bin/standalone.sh --debug   (Tomcatとは異なり)デフォルトでは8787番ポートでデバッガがアタッチできるような状態で起動します。\n 続いてEclipseからアタッチします。手順の詳細は前述Tomcatの節を参照してください。ただし1点気をつけるべきは、デフォルト設定では8000番ポートへ接続しようとするので、 \"Connect\" タブの \"Connection Properties\" 設定の \"Port\" 値を 8787 に変更してください。\n 実行確認、デタッチ方法はTomcat節に記載した手順と同じです。\n  Spring Boot アプリケーションへ Eclipse をアタッチする Spring Boot アプリケーションは前述の通りデプロイを必要とせず単独で実行できます。通常の実行コマンドにデバッグオプションを付与すれば良いです。\n spring-boot-sample プロジェクトをビルドします:\n mvn clean package -pl spring-boot-sample   作成された spring-boot-sample-0.0.1-SNAPSHOT.jar をデバッガアタッチ可能な状態で起動します:\n java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000 \\ -jar spring-boot-sample/target/spring-boot-sample-0.0.1-SNAPSHOT.jar   Eclipseからアタッチする方法は前述Tomcat節と同じです。\n また、Spring Bootアプリケーションにははじめから Spring Boot Maven Pluginが組み込まれているため、こちらから起動することになるかもしれません。その場合はリンク先を参照してください。\n  その他のアプリケーションサーバ、IDEを利用する ここまで書いてきて、次のサイトでも同じことについて言及しているの気づきました。WebLogic, Glassfish, Jetty, IntelliJなどについての言及もあるようでしたので参照してください:\n   https://www.baeldung.com/spring-debugging\n       1. 久しぶりにWildFlyのリファレンス見ましたが、以前にも増して混沌としていますね…   ","description":"","id":39,"section":"blog","tags":["Java","javaee","spring"],"title":"いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(1)","uri":"https://yukihane.github.io/blog/202004/02/java-application-frameworks-cheat-sheet/"},{"content":"とあるMavenプロジェクトを mvn clean install しようとしたところ、次のエラーになり正常終了しませんでした。\n [WARNING] Rule 0: org.apache.maven.plugins.enforcer.BannedRepositories failed with message: Current maven session contains banned repository urls, please double check your pom or settings.xml: central - http://my.internal.repo/xxx snapshots - http://my.internal.repo/yyy   原因は mvn help:effective-pom 実行結果を見て理解したのですが、どうも http:// だとエラーになるようで、 https:// を使え、ということのようです。 公式リファレンスで該当するのはこれでしょうか:\n   https://maven.apache.org/enforcer/enforcer-rules/bannedRepositories.html\n   そしてスキップするための説明はこちら:\n   https://maven.apache.org/enforcer/maven-enforcer-plugin/enforce-mojo.html#skip\n   enforcer.skip プロパティを true にすれば良いようです。\n mvn clean install -Denforcer.skip=true   ","description":"","id":40,"section":"blog","tags":["java","maven"],"title":"Maven Enforcer Pluginの実行をスキップする","uri":"https://yukihane.github.io/blog/202003/30/skip-maven-enforcer-plugin/"},{"content":"(もしかしたら以前どこかで書いたかも…)\n MyBatisでストアドプロシージャを実行する必要に迫られたことがありましたが、オフィシャルリファレンスを見てもどこにもストアドプロシージャについて記述がないので困った記憶をふと思い出しました。\n 実際には、MyBatisのテストケースにストアドプロシージャは登場します。\n src/test/java/org/apache/ibatis/submitted/sptests/SPMapper.xml  \u0026lt;!-- Important things for stored procedures: 1. Must set the statement type to CALLABLE 2. Must use the JDBC standard escape sequence for stored procedures: {call xxx (parm1, parm2)} 3. Must set the MODE of all parameters (IN, OUT, INOUT) 4. All IN, OUT, and INOUT parameters must be a part of the parameterType or parameterMap (discouraged). The only exception is if you are using a Map as a parameter object. In that case you do not need to add OUT parameters to the map before calling, MyBatis will add them for you automatically. 5. resultType or resultMap (more typically) is only used if the procedure returns a result set. IMPORTANT: Oracle ref cursors are usually returned as parameters, NOT directly from the stored proc. So with ref cursors, resultMap and/or resultType is usually not used. --\u0026gt; \u0026lt;select id=\"adderAsSelect\" parameterType=\"org.apache.ibatis.submitted.sptests.Parameter\" statementType=\"CALLABLE\"\u0026gt; {call sptest.adder( #{addend1,jdbcType=INTEGER,mode=IN}, #{addend2,jdbcType=INTEGER,mode=IN}, #{sum,jdbcType=INTEGER,mode=OUT} )} \u0026lt;/select\u0026gt; \u0008(後略)   ","description":"","id":41,"section":"blog","tags":["mybatis"],"title":"MyBatisでストアドプロシージャを実行する","uri":"https://yukihane.github.io/blog/202003/10/stored-procesure-with-mybatis/"},{"content":"sudo systemctl edit td-agent   で編集画面を開き、次を記述:\n [Service] Environment=\"HTTP_PROXY=http://myproxy.example.com:8080\"   ","description":"","id":42,"section":"blog","tags":["fluentd"],"title":"td-agentにプロキシを設定する","uri":"https://yukihane.github.io/blog/202003/09/td-agent-with-proxy/"},{"content":"https://ja.stackoverflow.com/a/63099/2808 を見ていて気づいたのですが、 実質final というのは脳内(コンパイラ)で final を補完してくれる、というような処理が行われるわけではないのですね。\n 下記コード中の(2) と (3) の違いは、連結前の String 変数を final 付きで宣言しているか否かだけですが、結果がお互い異なっています。\n String literal_neko = \"ネコ\"; String literal_ne_ko = \"ネ\" + \"コ\"; // (1) https://docs.oracle.com/javase/specs/jls/se13/html/jls-3.html#jls-3.10.5 System.out.println(\"literal_neko == literal_ne_and_ko: \" + (literal_neko == literal_ne_ko)); // true // (2) finalなStringの連結: true final String final_ne = \"ネ\"; final String final_ko = \"コ\"; String final_ne_and_final_ko = final_ne + final_ko; System.out.println(\"literal_neko == final_ne_final_ko: \" + (literal_neko == final_ne_and_final_ko)); // true // (3) 非final(だが実質final)なStringの連結: false String ne = \"ネ\"; String ko = \"コ\"; String ne_and_ko = ne + ko; System.out.println(\"literal_neko == ne_and_ko: \" + (literal_neko == ne_and_ko)); // false   ","description":"","id":43,"section":"blog","tags":["java"],"title":"finalと実質finalの違い","uri":"https://yukihane.github.io/blog/202002/21/effectively-final-difference/"},{"content":"MyBatisの設定項目として useActualParamName というものがあります。マニュアルの説明によると、\n  ステートメントの引数を参照する際、メソッドシグネチャで宣言されている名前で参照できるようにします。 このオプションを有効にする場合、プロジェクトを Java 8 （コンパイラオプション -parameters 付き）でコンパイルする必要があります。 (導入されたバージョン: 3.4.1)\n  \u0026#8212; 設定 \u0026gt; settings   もう少し具体的には、\n  3.4.3 以降では、引数名を指定することによって arg 要素を順不同で記述できるようになりました。引数を名前で指定するためには、各引数に @Param アノテーションを追加するか、プロジェクトを '-parameters' オプション付きでコンパイルし、useActualParamName に true （デフォルト値です）を設定します。\n  \u0026#8212; Mapper XML ファイル \u0026gt; constructor   とあります。説明されているセクションが期待するものと違うのでわかりにくい…\n ちなみに @Param の意味を調べようと検索すると、説明には次のように書かれており、 useActualParamName という機能があることに気づかないので不親切に感じます。\n  Mapper メソッドが複数の引数を取る場合、このアノテーションを付加することで各引数を名前で参照できるようになります。アノテーションがない場合、各引数は位置を表す数字で #{param1}, #{param2} のように参照します（RowBounds 引数はカウントしません）。 引数に @Param(\"person\") というアノテーションを付加すると、この引数は #{person} として参照できるようになります。\n  \u0026#8212; Java API \u0026gt; Mapper アノテーション   閑話休題。 この useActualParamName は引用部にある通りデフォルトで true ですが、実際に使うには -parameters オプション付きでコンパイルする必要があります。 この -parameters オプションはどうやって付ければ良いのでしょうか？\n …というのを調べようとしたのですが、Spring Boot の場合、 spring-boot-starter-parent で -parameters オプションが有効になるような設定が為されている ので、明示的に設定しなくても利用できます。\n ","description":"","id":44,"section":"blog","tags":["sprig-boot","mybatis"],"title":"Spring Bootでは `-parameters` オプションは有効化されている","uri":"https://yukihane.github.io/blog/202002/20/spring-boot-compiler-parameters/"},{"content":"はじめに 今個人的にすごく知りたいのはこちらです。ご回答よろしくお願いします！！！！\n 動的確保したメモリー領域の解放戦略 - スタック・オーバーフロー  (質問読んでもらえれば(というかタイトル見てもらえれば)わかると思うんですけど、別に Java がわからん、とか Rust がわからん、という質問では無いです。念の為。もちろん Java も Rust もわからない(多分コード正しくない)ですけどそれは別の話。)\n目的 プログラミング言語 Rust を勉強したいと考えているのですが、自転車本を頭からスルッと読んだは良いものの全然身についていなくて、取り敢えず何か応用アプリ作ってみるか！と思い立ちました。\n…思い立ったものの、Rust で GUI 作るのはハードル高そう(だし、やりたいことの本質から逸れていく)なので GUI 部分は既にある知識でなんとかしようと考えました。\nここで、今どきの Web フロントエンダーの皆様であれば Electron(powered by Node.js)なんかを選択肢に入れるところかと思いますが、自分はそっち方面知らないので Java の Swing でやってみました。\nせっかくなんで Project Panama(プロパナ)を使ってみました。\n全体コード https://github.com/yukihane/stackoverflow-qa/tree/master/so62868\nにあります。\nRust(1.41.0)と Java(14-panama)を使っています。\nビルド方法は build.sh 参照のこと。\n実装 ハローワールド案件です。Java で処理を要求\u0026amp;結果を受け取る、Rust では要求された処理を行って結果を返します。\nまず Rust 側。nameを受け取って文字列連結してmessageとして返します。\n1 2 3 4 5 6 7 8 9  #[no_mangle]pubunsafeextern\u0026#34;C\u0026#34;fn greet(name: *constc_char,message: *mutc_char,count: size_t){letname=CStr::from_ptr(name);letname=name.to_str().unwrap();lettext=format!(\u0026#34;こんにちは、{}！\u0026#34;,name);lettext=CString::new(text).unwrap();message.copy_from(text.as_ptr(),count);}  上の関数に対応する C ヘッダファイルを生成します。\ncbindgenというツールで自動生成できました。\ncbindgen -l c -o bridges/greeter.h librust  自動生成したそのままでも使えると思うのですが、冗長だと思ったので、今回は不要部分を削って commit してしまっています。\n続いてヘッダファイルと cdylib からjextractを用いてプロパナ の glue 部分を自動生成します。\n1 2 3 4 5  jextract \\ -L librust/target/release/ \\ -l greeter \\ -o bridges/greeter.jar \\ ./bridges/greeter.h   上記で生成された jar を利用して Rust 呼び出し部分を Java で実装します。\n1 2 3 4 5 6 7 8 9 10 11 12 13  final JButton greetButton = new JButton(\u0026#34;greet\u0026#34;); greetButton.addActionListener((e) -\u0026gt; { final Scope scope = Scope.globalScope(); final Pointer\u0026lt;Byte\u0026gt; name = scope.allocateCString(nameField.getText()); final long size = 256; final Pointer\u0026lt;Byte\u0026gt; message = scope.allocateArray(NativeTypes.UINT8, size).elementPointer(); greeter_lib.greet(name, message, size); final String retval = Pointer.toString(message); outputField.setText(retval); });   以上。\n","description":"","id":45,"section":"blog","tags":["java"],"title":"Hello Project Panama","uri":"https://yukihane.github.io/blog/202002/11/hello-project-panama/"},{"content":"RustプログラムのGUIにElectronを使うことを考えています。\n その前調査としてNodeのネイティブモジュールとしてRustプログラムを利用できるようにする Neon というツールを使ってHello, worldしてみることにしました。\n インストール 前提環境 今回、先立ってインストールしていた関連プロダクトは次のとおりです。\n   Ubuntu 18.04\n  Node 12.14.1 (nvm でインストール)\n  Yarn 1.21.1 (apt でインストール)\n  Rust 1.41.0 (rustup でインストール)\n   その他、意識していませんが、Python2.7(not 3.x)、GCCなども必要なようです。詳しくは Getting Started参照。\n  Neon インストール yarn global add neon-cli      \"Hello World!\" の作成と実行 オフィシャルドキュメント の通り進めていきます。\n プロジェクトを生成して実行してみる neon new thread-count cd thread-count neon build --release   これでテンプレートのビルドができました。\n 実行するには、これまたリファレンスの通りですが、\n node   コマンドを実行して起動するREPLで\n require('.')   と入力します。あるいは、 neon new thread-count コマンドを打ったときに出ていたメッセージの通り、 node コマンドに -e オプションで実行文を渡す、つまり\n node -e 'require(\".\")'   でもOKです。\n さてここで require('.') は何をやっているんだ、ということなんですが、これはNodeのリファレンス Modules \u0026gt; All Together\u0026#8230;\u0026#8203;の \"LOAD_AS_DIRECTORY(X)\"セクションに書いてあることのようです。\n 具体的には、引数に指定したパスを所定のルールで解釈していって、今回の場合はカレントディレクトリにある package.json の main フィールドに指定されているファイル lib/index.js を実行しているようです。そこで、このファイルを見てみます。\n lib/index.js var addon = require('../native'); console.log(addon.hello());   ここでも require が出てきました。今度は ../native が指定されています。 ここでは先程のリファレンスの、 \"LOAD_INDEX(X)\" の3番、 native/index.node がバイナリアドオンとしてロードされる、ということのようです。\n Neonのリファレンスに戻ると、次のように説明があります:\n    native/index.node: the native module itself, which is loaded by lib/index.js.\n      Rustでロジックを実装する native ディレクトリをRustプロジェクトルートディレクトリとみなして作業すれば良さそうです。\n 1点注意があるとすれば、自動生成された Cargo.toml に edition の指定が無かったため、自分の見慣れない exrern が現れたりして？？？となってしまいました。 edition = \"2018\" は即追加しておきましょう。\n    ","description":"","id":46,"section":"blog","tags":["rust","neon"],"title":"Nodeのnative moduleをRustで書いてみる(Neon)","uri":"https://yukihane.github.io/blog/202002/01/hello-rust-neon/"},{"content":"要旨 fluent-plugin-bigquery の README を読んでいると、 request_timeout_sec のデフォルト値が nil になっている(その下の request_open_timeout_sec には 60 が設定されているのに)のが気になりました。\n 結論としては、 request_timeout_sec は最終的に httpclient の send_timeout 及び receive_timeout パラメータとして利用され、未設定の場合は そこで指定されているデフォルト値である send_timeout = 120, receive_timeout = 60 が採用されるようです。\n   調査作業ログ request_timeout_sec のデフォルト値が nil なので未設定だと無期限に待ち続けるのかと危惧し、実装を見てみることにしました。(ちなみに私はRuby経験は0ですので、これが妥当な調査手順かはわかりません。)\n とりあえずGitHub上で検索してみると out_bigquery_base.rbで Fluent::BigQuery::Writer.new の引数として渡されていることがわかりました。\n Fluent::BigQuery::Writer というのはおそらく bigquery/writer.rbで定義されている Writer クラスのことだと当たりをつけました。また、Rubyの new は initialize メソッドを呼び出すように入門ページに書かれていたので initialize の処理を見てみると Google::Apis::BigqueryV2::BigqueryService を利用しているようなコードがありました。 read_timeout_sec 及び send_timeout_sec フィールドに設定されているようです。\n この文字列でGoogle検索してみると google-api-ruby-clientがヒットしました。 client_options の \"client\" とは、どうも HTTPClientのことっぽい、 require で 階層なし になっているということはRubyの標準モジュールなのか？と検索してみると StackOverflowの回答から ここに行き当たりました。\n   ","description":"","id":47,"section":"blog","tags":["fluentd"],"title":"`fluent-plugin-bigquery` のパラメータ `request_timeout_sec` 、未設定の場合はどうなるの？","uri":"https://yukihane.github.io/blog/202001/30/fluentd-request_timeout_sec-default/"},{"content":"要旨 JSONを返してくるのだけれどMIME typeが text/plain;charset=Windows-31J なレスポンスを、RestTemplateで扱いたい。\n @GetMapping(produces = \"text/plain;charset=Windows-31J\") public String response() { return \"{\\\"text\\\": \\\"こんにちは世界\\\" }\"; }   対応としては、 JSonFactory#createParser(InputStream) をオーバライドして InputStreamReader 用のパーサが利用されるようにすれば良い。\n @RequiredArgsConstructor public class NonUtf8JsonFactory extends JsonFactory { private static final long serialVersionUID = 6370213897913075391L; @NonNull private final Charset charset; @Override public JsonParser createParser(final InputStream in) throws IOException, JsonParseException { return createParser(new InputStreamReader(in, charset)); } }   上記のオブジェクトを ObjectMapper のコンストラクタで渡す:\n final Charset win31j = Charset.forName(\"Windows-31J\"); final ObjectMapper mapper = new ObjectMapper(new NonUtf8JsonFactory(win31j)); final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(mapper); converter .setSupportedMediaTypes(Arrays.asList(new MediaType(MediaType.TEXT_PLAIN, win31j))); final RestTemplate rt = restTemplateBuilder .additionalMessageConverters(Arrays.asList(converter)) .build();     問題再現 JsonSjisExampleApplication.java (hash: b0e5ae3)\n このコードを実行する\n mvn spring-boot:run   と、次のようなエラーになります:\n java.lang.IllegalStateException: Failed to execute ApplicationRunner ... Caused by: org.springframework.web.client.HttpClientErrorException$NotAcceptable: 406 : [{\"timestamp\":\"2020-01-27T13:56:35.979+0000\",\"status\":406,\"error\":\"Not Acceptable\",\"message\":\"Could not find acceptable representation\",\"trace\":\"org.springframework.web.HttpMediaTypeNotAcceptableExcept... (4837 bytes)] at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:121) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:170) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:112) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:785) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:743) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:677) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:318) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE] at com.example.jsonsjisexample.JsonSjisExampleApplication.run(JsonSjisExampleApplication.java:44) ~[classes/:na] at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:775) ~[spring-boot-2.2.4.RELEASE.jar:2.2.4.RELEASE] ... 10 common frames omitted   この 406 エラーは、コンバータのメソッド setSupportedMediaTypes で text/plain;Windows-31J を設定することで対応できます。 コード差分(hash: 31c21):\n final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(); converter.setSupportedMediaTypes(Arrays.asList(new MediaType(MediaType.TEXT_PLAIN, Charset.forName(\"Windows-31J\")))); final RestTemplate rt = restTemplateBuilder .additionalMessageConverters(Arrays.asList(converter)) .build();   この対応を入れたコードを実行してみます。すると別のエラーが出るようになります。\n Caused by: com.fasterxml.jackson.core.JsonParseException: Invalid UTF-8 start byte 0x82 at [Source: (PushbackInputStream); line: 1, column: 12] at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:712) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(UTF8StreamJsonParser.java:3569) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(UTF8StreamJsonParser.java:3565) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2511) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2437) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:293) ~[jackson-core-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:35) ~[jackson-databind-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:10) ~[jackson-databind-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129) ~[jackson-databind-2.10.2.jar:2.10.2] at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:369) ~[jackson-databind-2.10.2.jar:2.10.2] ... 21 common frames omitted   これが今回の問題の核です。\n   問題解説 RFC7159 - 8.1.Character Encodingでは、JSONの文字エンコーディングは UTF-8, UTF-16, UTF-32 のいずれかであることが求められており、Jackson実装はこれに基づいて行われているようです [1]。\n   Charset autodetection fail #222\n   具体的には、 InputStream を上記3エンコーディングのうちいずれかであるとみなしてパースするため、それ以外のエンコーディングだった場合、期待通りパースできません。それが上記のエラーです。\n この問題を回避するためには、 InputStream を引数に取るパーサを利用せず、代わりに Reader を引数に取るパーサを利用するようにします。これが冒頭の回避策です。\n public JsonParser createParser(final InputStream in) { return createParser(new InputStreamReader(in, charset)); }   問題に対応した最終的なコード(hash: ce596e)\n    1. ちなみにより新しい RFC8259 では、UTF-8でなければならない、と更に制限されています。   ","description":"","id":48,"section":"blog","tags":["spring-boot","jackson"],"title":"Spring BootのRestTemplateで text/plain;Windows-31J なRESTレスポンスを処理する","uri":"https://yukihane.github.io/blog/202001/26/resttemplate-with-illformed-json/"},{"content":"はじめに 年の瀬にスクレイピングしたくなって Rust 勉強し始めたけれど、直前に reqwest ライブラリに更新が入ったみたいでコピペコーディングが阻まれた。\n知っとかないといけなかったこと  今回の更新 reqwest 0.10.0 で async/await がデフォルトになった(ので従来のサンプルコードは動かなくなった)。 Cargo には feature flag(feature toggle) 機能があって、reqwest やら(オフィシャルサンプルで利用している)tokio やらもこれを利用している。  (async/await を使わない、従来の)blocking 版をどうやって使うのか全然わからなかったけれど、features で明示的に指定する必要があった。 オフィシャルサンプルを動かすにしてもこれを知っておかないといけなかった。   tokioを用いる必要があった。  自分が見ていた(古い)サンプルではfuturesのfutures::executor::block_onを利用していたので当初それをコピペったのだが次のエラーが出た: \u0026lsquo;not currently running on the Tokio runtime.', async/await 構文が標準に取り込まれた、ということは非同期ランタイムを別のものにすげ替えることが可能、みたいなイメージを持っていたのだが、そうではなさそう。 おそらく自転車本の補遺が言うところの「非同期エコシステム」が関係する話題。    サンプルを動かすには https://github.com/seanmonstar/reqwest\nuse std::collections::HashMap; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let resp: HashMap\u0026lt;String, String\u0026gt; = reqwest::get(\u0026quot;https://httpbin.org/ip\u0026quot;) .await? .json() .await?; println!(\u0026quot;{:#?}\u0026quot;, resp); Ok(()) } を動かすためには、 Cargo.toml の [dependencies] セクションに次のように書く必要があった。\n[dependencies] reqwest = {version = \u0026quot;0.10.0\u0026quot;, features=[\u0026quot;json\u0026quot;]} tokio = {version = \u0026quot;0.2.6\u0026quot;, features = [\u0026quot;macros\u0026quot;]} また、blocking 版\nuse std::collections::HashMap; fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let resp: HashMap\u0026lt;String, String\u0026gt; = reqwest::blocking::get(\u0026quot;https://httpbin.org/ip\u0026quot;)? .json()?; println!(\u0026quot;{:#?}\u0026quot;, resp); Ok(()) } は、\n[dependencies] reqwest = {version = \u0026quot;0.10.0\u0026quot;, features=[\u0026quot;json\u0026quot;,\u0026quot;blocking\u0026quot;]} であった。\nちなみに reqwest の feature flag 一覧は\n https://docs.rs/reqwest/0.10.0/reqwest/#optional-features  にある。\n","description":"","id":49,"section":"blog","tags":["rust"],"title":"reqwest使おうとしたけどよくわからん","uri":"https://yukihane.github.io/blog/202001/01/rust-reqwest/"},{"content":"RestTemplateBuilder  RestTemplate は Spring Framework(spring-web)だけれども RestTemplateBuilder は Spring Boot。 Java の世界の なんちゃらBuilder (StringBuilderとか Lombok のBuilderアノテーションとか、ざっくり総称で Effective Java 版 Builder とでも呼ぶべきか)の使い方は、「まず builder のインスタンスを生成します」から始まるので RestTempalteBuilder もそれだと思っていた。  つまり、このクラスインスタンスは Spring Boot のデフォルト状態でインジェクション可能だけれども、このインジェクションされたRestTempalteBuilderインスタンスのスコープは(Spring のデフォルトであるところの)singleton-scope ではない と思っていた。  だってbuilderインスタンスが singleton-scope なら、あるbeanで builderに設定したものが他所のbeanにも波及しちゃうじゃない。     けどResttemplateAutoConfigurationの Bean 定義部分どう見ても singleton-scope にしか見えない。何か自分の知らない記法(あるいは暗黙的解釈)がなにかまだあるのか？ また 何か Spring マジックが発動しているのか…？  と思ってたけど、RestTemplateBuilderの状態設定メソッド(このへん)見て気づいた、 設定メソッドの中で new RestTemplateBuilder() やっとるんかーい！\nインジェクションのタイミングじゃなくて builder にビルド設定を渡すタイミングで新しいインスタンスに成り代わってたのね…\n関連リンク  14. Calling REST Services with RestTemplate - Spring Boot Features  余談 Effective Java 版 Builder だとbuilderに情報を設定する際に、builderインスタンスを使い回すもよし\nvar builder = new StringBuilder(); builder.append(\u0026quot;Hello, \u0026quot;); builder.append(\u0026quot;world!\u0026quot;); builder.toString(); 戻り値を使ってメソッドチェーンしてもよし\nnew StringBuilder().append(\u0026quot;Hello, \u0026quot;).appned(\u0026quot;world!\u0026quot;).toString(); だけれども、 RestTemplateBuilder は前者を許してはくれないということか。\n","description":"","id":50,"section":"blog","tags":["spring-boot"],"title":"RestTemplateBuilderに関する覚書","uri":"https://yukihane.github.io/blog/201912/10/resttemplatebuilder/"},{"content":"はじめに: 試した環境 Windows10 の現時点での最新安定版 Google Chrome および Firefox を用いました。\n Google Chrome 78.0.3904.108 Firefox 70.0.1  また実行に際しては、キャッシュ等の影響を避けるため、Chrome ではゲストモード、Firefox では今回新規作成したプロファイルで確認しました。\nやってみよう Google Chrome の URL バー(Omnibar)に https://hatena.ne.jp/ と入力してエンターを押してみよう！\nトップページが表示されましたか？\nあちゃー！😣 表示されちゃいましたか！😵 それでは次に Firefox で同じことをやってみます。\nあれ ❔Chrome と Firefox で表示されてるものが違うんですけど ❔❔🤔🤔 どっちが正しいの ❔❔❔😟😟😟 あっあれだ。Google が URL を殺すって言ってたやつだ。Omnibar に殺された URL を掘り返してみれば何かわかるかも！！！(Omnibar のクリックを繰り返しつつ)\nはい出たーやっぱりねー https://www. 隠れてたーそら Firefox と違う URL なんだから違う内容表示されるわー\nってなんで入力した URL と違うページ表示してんねん いやいやおつちけそれこそよくある302でリダイレクトさせてるやつやろあれでもじゃあ Firefox がリダイレクトされてないのはなんでなんだ\nそうだ DevTools、行こう はい 302 が出て…\nなーい！なんや \u0026ldquo;(failed)\u0026rdquo; て！ (余白)\n解決編 いやまあ、DevTools の console を見ればわかることなんですけれども。\n Redirecting navigation hatena.ne.jp -\u0026gt; www.hatena.ne.jp because the server presented a certificate valid for www.hatena.ne.jp but not for hatena.ne.jp. To disable such redirects launch Chrome with the following flag: \u0026ndash;disable-features=SSLCommonNameMismatchHandling\n 関連する issue は多分これ:\n Issue 507454: Implement Redirect for the WWW Subdomain Mismatch case  証明書見てサブドメイン違うかったら勝手に証明書に書いてある方にリダイレクトするよ、という挙動みたいです。\n--disable-features=SSLCommonNameMismatchHandling 付けて起動すると Firefox と同じ挙動になります。\nまとめ Google Chrome は、\n Omnibar がサブドメインを隠す サブドメイン間違ってたら勝手リダイレクトする  という仕様のコンボで、思ってた URL と違うものを表示していることがあります。\n","description":"","id":51,"section":"blog","tags":["web","chrome"],"title":"https://hatena.ne.jp/ にアクセスできてるとお思いで？","uri":"https://yukihane.github.io/blog/201912/03/auto-redirecting-chrome/"},{"content":"Relaxed Binding 2.0 という仕組みにより\nspring.jpa.database-platform=mysql spring.jpa.databasePlatform=mysql spring.JPA.database_platform=mysql いずれの形式でも正しくバインドできる。\nが、公式ドキュメントからは一番上の database-platform が推奨されているように読み取れる。\nRelaxed binding - Spring Boot Configuration Binding:\n Spring Boot uses a canonical format that is lower case and use hyphen to separate words.\n Properties Files - Relaxed Binding 2.0:\n We recommend that properties are stored in lowercase kabab format. i.e. my.property-name=foo.\n ","description":"","id":52,"section":"blog","tags":["spring-boot"],"title":"Spring Boot のプロパティではkebab-formatが推奨されている","uri":"https://yukihane.github.io/blog/201911/28/kebab-format-recommended-on-spring-boot-properties/"},{"content":"悪い意味で。\nなお試した時点での GraalVM 最新リリースバージョンは 19.2.1でした。\nGraalVM インストール \u0026amp; 実行 GraalVM のインストール方法はいくつかあるのでお好みで。例えば:\n GitHubから実行バイナリをダウンロード SDKMAN! Scoop  (なお、SDKMAN!は今回試していないのでちゃんと動くかは知らない)\nさて、 PATH が通せたらおもむろに native-image コマンドを実行してみよう。結果:\nError: Unable to compile C-ABI query code. Make sure GCC toolchain is installed on your system. Error: Use -H:+ReportExceptionStackTraces to print stacktrace of underlying exception Error: Image build request failed with exit status 1 トラップ 0: Microsoft Windows SDK for Windows 7 のインストールが必要 上のメッセージでは GCC ツールチェーン入れれ、と出てるけど Windows で必要なのは Windows SDK ね。Windows 7 向けの。\nダウンロードはこちらから:\n Microsoft Windows SDK for Windows 7 and .NET Framework 4 (ISO)  オーケー。これくらいなら想定範囲だ。\nトラップ 1: Download ボタン押したら 3 種類選ばされるけどどれが何だよ？ 上で示したダウンロードサイトから焦ってダウンロードしようとするとこの罠にはまる。\n3 種類の ISO ファイルからダウンロードするものの選択を迫られるがファイル名から何が違うの変わらない。\n正解の行動は、説明をちゃんと読んでから Download ボタンを押すこと。\n最初の画面の \u0026ldquo;Install Instructions\u0026rdquo; を押せば説明が出てくる。\n要するにこういうことだ:\n GRMSDK_EN_DVD.iso - x86 用 GRMSDKX_EN_DVD.iso - x64 用 GRMSDKIAI_EN_DVD.iso - Itanium 用  今回ダウンロードすべきは 2 番目の GRMSDKX_EN_DVD.iso だ。\nトラップ 2: 既にインストールされている Microsoft Visual C++ 2010 Redistributable を先にアンインストールしておく必要がある 実際にはインストール手順をググっているときに知ったので自分はこの罠にはまっていないのだが、どうも Microsoft Visual C++ 2010 Redistributable が先にインストールされていると今回のインストーラが起動時にエラーメッセージを出してインストールを進めさせてくれないらしい。\nx64 版と x86 版の 2 種類 インストールされていると思うのでアンインストールしておこう。\nちなみに、自分の環境では 2008, 2012, 2013, 2017 もインストールされていたが、これはこのままで良い(アンインストールする必要はない)。\nトラップ 3: 実行するインストーラは setup.exe ではない 今回 G: ドライブとして ISO をマウントしたがこの場合 G:\\setup.exe がすぐ見えるのでこれを起動したくなるがこれを実行してインストールを進めると肝心の Visual C++ Compilers がグレーアウトしてインストールできない。なんだそれ！\n実行すべきは G:\\Setup\\SDKSetup.exe だ。\nインストール対象は、多分、Windows Native Code Development \u0026gt; Visual C++ Compilers と Redistributable Packages \u0026gt; Microsoft Visual C++ 2010 の 2 つがあれば良いのかな、とも思ったが、今回はデフォルト指定のままにした。\nトラップ 4: Windows SDK 7.1 Command Prompt で実行しよう これはトラップというか注意点だが、 native-image コマンドは\nスタートメニュー \u0026gt; Microsoft Windows SDK v7.1 \u0026gt; Windows SDK 7.1 Command Prompt\nから起動できるコマンドプロンプトで実行しよう。\nさもなくば必要な環境変数などが反映されず、最初のエラーを再び見る羽目になる。\nトラップ 5: native-image が Swing に対応していない こんだけやって native-image 実行してみたのに、敢え無くエラー。\nError: Unsupported features in 3 methods Detailed message: Error: Detected a started Thread in the image heap. Threads running in the image generator are no longer running at image run time. To see how this object got instantiated use -H:+TraceClassInitialization. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image run time by using the option --initialize-at-build-time=\u0026lt;class-name\u0026gt;. Or you can write your own initialization methods and call them explicitly from your main entry point. Trace: object sun.awt.AWTAutoShutdown method sun.awt.AWTAutoShutdown.getInstance() Call path from entry point to sun.awt.AWTAutoShutdown.getInstance(): at sun.awt.AWTAutoShutdown.getInstance(AWTAutoShutdown.java:133) at java.awt.EventQueue.detachDispatchThread(EventQueue.java:1137) at java.awt.EventDispatchThread.run(EventDispatchThread.java:88) at com.oracle.svm.core.thread.JavaThreads.threadStartRoutine(JavaThreads.java:460) at com.oracle.svm.core.windows.WindowsJavaThreads.osThreadStartRoutine(WindowsJavaThreads.java:137) at com.oracle.svm.core.code.IsolateEnterStub.WindowsJavaThreads_osThreadStartRoutine_4bc03aa26f8cdfc97ebd54050e8ae4bce1023851(generated:0) Error: Detected a started Thread in the image heap. Threads running in the image generator are no longer running at image run time. To see how this object got instantiated use -H:+TraceClassInitialization. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image run time by using the option --initialize-at-build-time=\u0026lt;class-name\u0026gt;. Or you can write your own initialization methods and call them explicitly from your main entry point. Trace: field sun.java2d.d3d.D3DRenderQueue.rqThread Error: Detected a started Thread in the image heap. Threads running in the image generator are no longer running at image run time. To see how this object got instantiated use -H:+TraceClassInitialization. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image run time by using the option --initialize-at-build-time=\u0026lt;class-name\u0026gt;. Or you can write your own initialization methods and call them explicitly from your main entry point. Trace: object sun.java2d.opengl.OGLRenderQueue field sun.java2d.opengl.OGLRenderQueue.theInstance Error: Use -H:+ReportExceptionStackTraces to print stacktrace of underlying exception Error: Image build request failed with exit status 1 多分これ。\n [native-image] Windows with a swing application #1327  以上。\n","description":"","id":53,"section":"blog","tags":["java","graalvm"],"title":"native-imageコマンドを実行するために行ったWindows10 への GraalVM インストールがエキサイティングな件","uri":"https://yukihane.github.io/blog/201911/09/graalvm-install-to-windows10/"},{"content":"OAuth2.0 の redirect_uri をゴニョった実装をテストしたいときにハマった。\nmockMvc.perform(get(new URI(\u0026quot;/line/oauth/authorize?redirece_uri=https%3A%2F%2Fexample.com\u0026quot;)  ってやらないと二重にエンコードされてしまう。\n参考  MockMvc needs to accept prepared URI with encoded URI path variables [SPR-11441] #16067 EncodedUriTests.java  ","description":"","id":54,"section":"blog","tags":["spring-boot"],"title":"MockMvc でURLエンコード済みのpathを渡したいときは new URI(...) を引数にする","uri":"https://yukihane.github.io/blog/201910/29/encoded-url-passing-to-mockmvc/"},{"content":"要約 78.10 Add a Servlet, Filter, or Listener to an Application曰く。\n any Servlet or Filter beans are registered with the servlet container automatically.\n Spring Security 使った自前の認証フィルタを @Component 付けて作ったりなんかした際に意図しない URL path にも認証がかかってしまう。\nんゴ。\n困ってる実例集  Add an annotation to exclude Filter @Beans from registration #16500 - spring-projects/spring-boot Spring Boot with Spring Security の Filter 設定とハマりポイント - Qiita サンプルコード: https://github.com/yukihane/hello-java/tree/master/spring/filter-auto-registration-example  手順 4.のコミット時点のコードで既にフィルタが有効化されてしまっている    対策 どちらかで対策できる。\n フィルタを Bean として作成しない Disable Registration of a Servlet or Filterの説明に従う: FilterRegistrationBean#setEnabled(false)  前述のコードで例示    ","description":"","id":55,"section":"blog","tags":["java"],"title":"Spring Bootは、セキュリティフィルタBeanを作っている分だけ、無料で認証できちまうんだ","uri":"https://yukihane.github.io/blog/201907/18/spring-boot-filter-bean/"},{"content":"概要 spring-boot-starter-security を導入しても http://localhost:8080/h2-console にアクセスしたかった。\n作業結果: https://github.com/yukihane/hello-java/tree/master/spring/h2-console-spring-security-example\n手順 h2-console が使える依存関係を追加してプロジェクトセットアップ 8113d7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.h2database\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;h2\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt;   h2-console を表示してみる 1b16dc spring.h2.console.enabled=true spring.datasource.generate-unique-name=false 1 2 3  create table greeting_table ( message varchar(256) not null );   (注: spring.datasource.generate-unique-name 設定は Spring Boot 2.3.0 からデフォルト値が変わったため必要になったもので、リンク先 Git リポジトリには含まれていません(参考))\nの設定を行った上で http://localhost:8080/h2-console/ へアクセス。\n   項目名 設定値     Driver Class org.h2.Driver   JDBC URL jdbc:h2:mem:testdb   User Name sa   Password (空)    spring-boot-starter-security を追加してアクセスしてみる 61357fe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-security\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.h2database\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;h2\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt;   http://localhost:8080/h2-console/\nはいはいこれね。 15e7b26\n@Configuration public class MyWebSecConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { } } h2-console ログイン画面が表示されるので上で書いたものと同じ入力を行い Connect。\n Whitelabel Error Page\nThis application has no explicit mapping for /error, so you are seeing this as a fallback.\nFri Jul 12 11:30:17 JST 2019\nThere was an unexpected error (type=Forbidden, status=403).\nForbidden\n なぜなのか。\n対処 d4b449b @Configuration public class MyWebSecConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { http.csrf().disable(); http.headers().frameOptions().disable(); } } ","description":"","id":56,"section":"blog","tags":["spring-boot"],"title":"h2-consoleとspring-boot-starter-securityと私","uri":"https://yukihane.github.io/blog/201907/12/h2-console-on-spring-boot/"},{"content":"WebSecurityConfigurerAdapter#configure(HttpSecurity) で form 認証を有効化しているのでこれをディスる。\nWebSecurityConfigurerAdapterを継承した Spring コンポーネントをスキャン対象に含めれば良い。\n@Configuration public class MyWebSecConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(final HttpSecurity http) throws Exception { // 空実装でオーバライド } } 別解 SecurityAutoConfigurationをディスる。(form 認証だけでなく他のセキュリティ自動設定も無効化される)\n@SpringBootApplication(exclude = { SecurityAutoConfiguration.class }) public class MyApplication { public static void main(final String[] args) { SpringApplication.run(MyApplication.class, args); } } ","description":"","id":57,"section":"blog","tags":["spring-boot","spring-security"],"title":"spring-boot-starter-security を入れたら認証画面が！","uri":"https://yukihane.github.io/blog/201907/04/spring-boot-and-spring-security/"},{"content":"概要 Spring Boot の認証を実装してみた系のサンプルでよく UserDetails や UserDetailsService が用いられているが、必然性が不明なものがほとんどである。\n(おそらく当の実装者も理解していない1。)\nここでは UserDetails を使わない、よりシンプルな認証を実装してみた。\n参考リンク  Spring Security Architecture の Authentication and Access Control  TERASOLUNA のリファレンスなら日本語で読める！   6.8.4 Overriding or Replacing Boot Auto Configuration - Spring Security Reference  実装サンプル  tags/simple-authentication-example タグ  user テーブルを select して id/password を検証するバージョンはtags/simple-authentication-db-example タグ    解説 参考リンク先にある通り、自分で認証処理を作りたい場合、 AuthenticationProvider を実装してそれを用いるように設定すれば良い。\nサンプルコードでは、 MyAuthenticationProviderが該当の認証プロバイダで、これを用いるように設定しているのが MyWebSecurityConfigurerAdapterである。\n(終わり)\n実行して確認 http://localhost:8080/hello へアクセスすると Basic 認証のダイアログが出るので、 tags/simple-authentication-example であれば username に mynameを(パスワードは何でも良い)、tags/simple-authentication-db-exampleタグのものであれば username に user1, password にpassword1を入力すれば認証が通る。\n追記: んで結局 UserDetails ってなんなのさ https://docs.spring.io/spring-security/site/docs/5.1.5.RELEASE/reference/htmlsingle/#tech-userdetailsservice\n Think of UserDetails as the adapter between your own user database and what Spring Security needs inside the SecurityContextHolder.\n だって。そんな汎用的に使えるもんかあ？余計なメソッド多すぎじゃね…？\nspring-security-oauth2 を使ったとき principal を完全に独自の型にしていたらフレームワーク内の getName()呼び出しでtoString()されて困ったので、UserDetailsは実装しなくともAuthenticatedPrincipalは実装しといたほうが良さげ。\n もちろん私もそんなコードを理解できません。 \u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":58,"section":"blog","tags":null,"title":"ちょっと待って！そのUserDetails、本当に必要ですか？","uri":"https://yukihane.github.io/blog/201907/03/you-dont-need-userdetails/"},{"content":"色んなところでそういうサンプルコードが見つかる、と聞いて嘘やん思いながら検索してみたところ、日本語英語を問わず確かに多い。\n例えば Qiita では(順不同):\n SpringMVC と JasperReports で帳票を印刷してみた 番外編（画像編） jsp(servlet)の画像アップロードについて JSP/サーブレット ファイルアップロードの実装 画像の保存と紐付けの同時アップロード 画像アップロードのパスの設定について  なんでつこたらアカンの？ リンク先に長文書いてもたんでそっち見て。\nどこの馬の骨が書いたかわからん説明信じられるか？はい、そんな人のために upvoted 数の多い Stack Overflow の記事をご用意しました:\n Recommended way to save uploaded files in a servlet application  いかがでしたか？\n何も考えずに今までファイルアップロードをコピペ実装したことがある人、先生怒らないから手を挙げなさい てかなんでこんな実装インターネット上に氾濫してんのやろ？\nオフィシャルがそうやってるからやろか…と思てThe Java EE Tutorial見てみたらクライアントが path 指定するようになってた。\nなお悪いわ！！\n(おわり)\n","description":"","id":59,"section":"blog","tags":["java","servlet"],"title":"ファイル出力先にServletContext#getRealPathを使うな","uri":"https://yukihane.github.io/blog/201906/20/dont-use-getrealpath/"},{"content":"問題 JapaneseDate.of(や LocalDate.of)を使うと厳密(strict)に検証されてしまう。\n結果、例外が出る。\n// 平成31年6月12日 final JapaneseDate today = JapaneseDate.of(JapaneseEra.HEISEI, 31, 6, 12); System.out.println(today); Exception in thread \u0026quot;main\u0026quot; java.time.DateTimeException: year, month, and day not valid for Era at java.base/java.time.chrono.JapaneseDate.of(JapaneseDate.java:231) at com.github.yukihane.datetime.App.main(App.java:21) 解決策 JapaneseChronology#resolveDate(や IsoChronology#resolveDate)を使えばゆるふわ(lenient)な検証でゆるしてくれたりも。\nfinal Map\u0026lt;TemporalField, Long\u0026gt; fieldValues = new HashMap\u0026lt;\u0026gt;(); fieldValues.put(ChronoField.ERA, (long) JapaneseEra.HEISEI.getValue()); fieldValues.put(ChronoField.YEAR_OF_ERA, 31L); fieldValues.put(ChronoField.MONTH_OF_YEAR, 6L); fieldValues.put(ChronoField.DAY_OF_MONTH, 12L); final JapaneseDate today = JapaneseChronology.INSTANCE.resolveDate(fieldValues, ResolverStyle.LENIENT); System.out.println(today); Japanese Reiwa 1-06-12 しかしよく考えるとデフォルト(的)挙動が strict モードって和暦扱うところでは怖いよな。\nお隠れになると(※もはや改元はお隠れになられた場合だけではなくなったが)今までちゃんと動いていたところが例外出るようになるんだぜ…\n参考  AbstractChronology#resolveDate - Java API doc    YEAR_OF_ERA と ERA - 両方とも存在する場合、それらが組み合わされて YEAR を形成します。 lenient モードでは YEAR_OF_ERA の範囲は検証されず、smart および strict モードでは検証されます。   smartは平成 31 年 6 月は許してくれるけど平成 32 年 6 月は許してくれない。賢いか…？\n(※ 検証するのは\u0026quot;YEAR_OF_ERA の範囲\u0026quot;だけだから言ってることとやってることは合ってる)\n","description":"","id":60,"section":"blog","tags":["java"],"title":"元号が令和に変わったことを知らない人のための日付処理方法","uri":"https://yukihane.github.io/blog/201906/12/java-datetime/"},{"content":"結果 1.8 H 11 平成 環境 1.8 java version \u0026quot;1.8.0_201\u0026quot; Java(TM) SE Runtime Environment (build 1.8.0_201-b09) Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode) 11 openjdk version \u0026quot;11.0.2\u0026quot; 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode) コード import java.text.SimpleDateFormat; import java.time.LocalDate; import java.util.Date; import java.util.Locale; public class Main { public static void main(final String[] args) { final Date date = date(2010, 3, 4); final SimpleDateFormat format = new SimpleDateFormat(\u0026quot;G\u0026quot;, new Locale(\u0026quot;ja\u0026quot;, \u0026quot;JP\u0026quot;, \u0026quot;JP\u0026quot;)); System.out.println(format.format(date)); } private static Date date(final int year, final int month, final int dayOfMonth) { final long time = LocalDate.of(year, month, dayOfMonth) .atStartOfDay(ZoneOffset.ofHours(9)).toEpochSecond() * 1000; return new Date(time); } } 関連(しない)  DateTimeFormatter とかこれもうわかんねぇな  関連(する)  JDK-8216204 Wrong SimpleDateFormat behavior with Japanese Imperial Calendar   From JDK 9 onwards, the default locale data is the data derived from the Unicode Consortium's Common Locale Data Repository (CLDR). Please refer https://www.unicode.org/cldr/charts/33/by_type/date_\u0026amp;_time.japanese.html\nThe short display format for Heisei is 平成 in the ja locale in CLDR data. Hence the difference in the result.\n  To use the JRE locale with JDK 9 set java.locale.providers to a value with COMPAT ahead of CLDR. :\n-Djava.locale.providers=COMPAT, CLDR\n  Use CLDR locale data by default - JDK 9 Release Notes   -Djava.locale.providers=COMPAT,SPI\n いやどっちやねん。\n","description":"","id":61,"section":"blog","tags":["java"],"title":"SimpleDateFormat もこれもうわかんねぇな","uri":"https://yukihane.github.io/blog/201906/11/simpledateformat/"},{"content":"こたえ 文字列 null が出力される。\nコード  final String text = null; System.out.printf(\u0026quot;%s\u0026quot;, text);  参考  java.util.Formatter   For category General, Character, Numberic, Integral and Date/Time conversion, unless otherwise specified, if the argument arg is null, then the result is \u0026ldquo;null\u0026rdquo;.\n リンク先の表にある通り、 s はカテゴリ\u0026quot;general\u0026quot;に属す。ちなみに日本語ではこうなっている(わかりにくい):\n カテゴリ「一般」、Character、「数」、「積分」および Date/Time 変換では、特に指定しない限り、引数 arg が null の場合、結果は\u0026quot;null\u0026quot;です。\n ","description":"","id":62,"section":"blog","tags":["java"],"title":"%s に null を渡したらどうなるんだっけ","uri":"https://yukihane.github.io/blog/201906/11/format-pass-to-null/"},{"content":"コード import java.time.LocalDate; import java.time.format.DateTimeFormatter; import java.util.Locale; public class App { private static String format(final LocalDate date, final String pattern) { return date.format(DateTimeFormatter.ofPattern(pattern, Locale.JAPAN)); } public static void main(final String[] args) { final LocalDate today = LocalDate.of(2019, 6, 4); System.out.println(format(today, \u0026quot;M\u0026quot;)); System.out.println(format(today, \u0026quot;MM\u0026quot;)); System.out.println(format(today, \u0026quot;MMM\u0026quot;)); System.out.println(format(today, \u0026quot;MMMM\u0026quot;)); System.out.println(format(today, \u0026quot;MMMMM\u0026quot;)); System.out.println(format(today, \u0026quot;MMMMMM\u0026quot;)); } } 結果    パターン 結果     M 6   MM 06   MMM 6 月   MMMM 6 月   MMMMM 6   MMMMMM IllegalArgumentException: Too many pattern letters: M    $ java -version openjdk version \u0026quot;11.0.2\u0026quot; 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode) 参考(にならなかった)リンク  java.time.format.DateTimeFormatter  参考(にややなった)リンク  java.time.format.DateTimeFormatterBuilder#appendPattern  関連(しない)  SimpleDateFormat もこれもうわかんねぇな  ","description":"","id":63,"section":"blog","tags":["java"],"title":"DateTimeFormatter とかこれもうわかんねぇな","uri":"https://yukihane.github.io/blog/201906/04/datetimeformatter/"},{"content":"動機 CDI で言うところの CDI.current().getBeans(...) とか CDI.current().select(...)とかそんな感じのことをやりたかった。\n参考リファレンス ドキュメントでは、やりたいことが書いてあるように見えたのはこのセクション\n 5.10.1. Using AspectJ to Dependency Inject Domain Objects with Spring - Spring Framework Core リファレンス  だったので、この記述に従って実装してみることにした。\n環境  Spring Boot 2.1.5 Java11 Lombok 使用  ゴール 次のようなコードを動かしたい。最終的なインジェクションのやり方はともかく、 new MyPojo() で生成したインスタンス(つまり非 Spring コンポーネント)で、Spring コンポーネントである MyComponent を使いたい。\nd7436a7cd8f4d2ef49707c21b488bdadd9e5fac1:\n@SpringBootApplication public class AspectjApplication implements CommandLineRunner { public static void main(final String[] args) { SpringApplication.run(AspectjApplication.class, args); } @Override public void run(final String... args) throws Exception { System.out.println(new MyPojo().getText()); } public static class MyPojo { @Autowired private MyComponent myComponent; @Getter @Setter private String greetingText = \u0026quot;Hello, \u0026quot;; public String getText() { return getGreetingText() + myComponent.getName(); } } @Component public static class MyComponent { public String getName() { return this.getClass().getSimpleName(); } } }  なお、このまま実行すると、 MyPojoクラスのmyComponentは null のままなので、NPE が発生する。\n作業ログ 結果のソース:\n https://github.com/yukihane/hello-java/tree/master/spring/aspectj  @EnableSpringConfigured @Configurable 付与 前述 Spring Framework リファレンスに記載されている通り、アノテーションを付与した。\n494691a12b1ae303f3d51caa08b83ccb85923b9e:\n+@EnableSpringConfigured @SpringBootApplication public class AspectjApplication implements CommandLineRunner { @@ -20,6 +23,7 @@ public class AspectjApplication implements CommandLineRunner { System.out.println(new MyPojo().getText()); } + @Configurable public static class MyPojo { @Autowired private MyComponent myComponent; 依存関係追加 同じくリファレンスに記載されている通り pom.xml へ spring-aspects を依存関係に追加した。\na0b2455bb5b4e5d0937899de20180a482475a023:\n+ \u0026lt;dependency\u0026gt; + \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;spring-aspects\u0026lt;/artifactId\u0026gt; + \u0026lt;/dependency\u0026gt; AspectJ アノテーションプロセッシング おそらく上で追加したアノテーションをコンパイル時に何かするのだろう、と探したところ aspectj-maven-pluginというものがあったので usage の通り pom.xml へ追記した。\nfc552678d14a5c01f7ea33b6df09453823456510:\n \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; + \u0026lt;plugin\u0026gt; + \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;aspectj-maven-plugin\u0026lt;/artifactId\u0026gt; + \u0026lt;version\u0026gt;1.11\u0026lt;/version\u0026gt; + \u0026lt;executions\u0026gt; + \u0026lt;execution\u0026gt; + \u0026lt;goals\u0026gt; + \u0026lt;goal\u0026gt;compile\u0026lt;/goal\u0026gt; \u0026lt;!-- use this goal to weave all your main classes --\u0026gt; + \u0026lt;goal\u0026gt;test-compile\u0026lt;/goal\u0026gt; \u0026lt;!-- use this goal to weave all your test classes --\u0026gt; + \u0026lt;/goals\u0026gt; + \u0026lt;/execution\u0026gt; + \u0026lt;/executions\u0026gt; + \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; この状態でコンパイルを実行すると次のエラーが発生した:\n[ERROR] Failed to execute goal org.codehaus.mojo:aspectj-maven-plugin:1.11:compile (default) on project aspectj: Execution default of goal org.codehaus.mojo:aspectj-maven-plugin:1.11:compile failed: Plugin org.codehaus.mojo:aspectj-maven-plugin:1.11 or one of its dependencies could not be resolved: Could not find artifact com.sun🛠jar:11.0.2 at specified path /home/yuki/.sdkman/candidates/java/11.0.2-open/../lib/tools.jar  aspectj-maven-plugin の Java11 対応 当 plugin の GitHub Issues/PR のページを見てみると、Java11 に対して未対応のようだった。\n対応した fork version を作成されている方がいたのでこれを用いることとした。\n Adding support for JDK 11 and fixing integration test #45  また、AJC(AspectJ Compiler の略か？)にターゲット Java バージョンを明示する必要があったので(デフォルトだと 1.4 だと解釈するようだ)、その対応も行った。\n21a76a79d9..3f0abe043:\n \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; - \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; + \u0026lt;groupId\u0026gt;com.nickwongdev\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;aspectj-maven-plugin\u0026lt;/artifactId\u0026gt; - \u0026lt;version\u0026gt;1.11\u0026lt;/version\u0026gt; + \u0026lt;version\u0026gt;1.12.1\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; @@ -61,6 +61,11 @@ \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; + \u0026lt;configuration\u0026gt; + \u0026lt;source\u0026gt;${java.version}\u0026lt;/source\u0026gt; + \u0026lt;target\u0026gt;${java.version}\u0026lt;/target\u0026gt; + \u0026lt;complianceLevel\u0026gt;${java.version}\u0026lt;/complianceLevel\u0026gt; + \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; Lombok との組み合わせ対応: .java に対する AspectJ 適用スキップ ここまでの状態でコンパイルを実行すると次のエラーとなる:\n[ERROR] Failed to execute goal com.nickwongdev:aspectj-maven-plugin:1.12.1:compile (default) on project aspectj: AJC compiler errors: [ERROR] error at return getGreetingText() + myComponent.getName(); [ERROR] ^^ [ERROR] /home/yuki/Documents/repos/java/hello-java/spring/aspectj/src/main/java/com/github/yukihane/spring/aspectj/AspectjApplication.java:36:0::0 The method getGreetingText() is undefined for the type AspectjApplication.MyPojo ここで指摘されている getGreetingText() メソッドは、Lombok の @Getter アノテーションによって生成されるはずのメソッドだ。 AJC compiler はこれが見えないと言っている。\n当然だ。.java上には存在しない。\nググると対策が提示されていた。\n Lombok and AspectJ - Stack Overflow  ただしなぜこれで上手く行くのか説明は無いので自分なりの解釈をここに書いておく。\nAspectJ が weaving を行い得るタイミングは 3 つあるらしい。このうち今回関係しているのは、コンパイル時の話なので、最初の 2 つだ。\nChapter 5. Load-Time Weaving - The AspectJ Development Environment Guide:\n   Compile-time weaving is the simplest approach. When you have the source code for an application, ajc will compile from source and produce woven class files as output. The invocation of the weaver is integral to the ajc compilation process. The aspects themselves may be in source or binary form. If the aspects are required for the affected classes to compile, then you must weave at compile-time. Aspects are required, e.g., when they add members to a class and other classes being compiled reference the added members. Post-compile weaving (also sometimes called binary weaving) is used to weave existing class files and JAR files. As with compile-time weaving, the aspects used for weaving may be in source or binary form, and may themselves be woven by aspects. Load-time weaving (LTW) is simply binary weaving defered until the point that a class loader loads a class file and defines the class to the JVM. To support this, one or more \u0026ldquo;weaving class loaders\u0026rdquo;, either provided explicitly by the run-time environment or enabled through a \u0026ldquo;weaving agent\u0026rdquo; are required.  リンク先 Stack Overflow の回答で行っているのは、compile-time weaving をスキップすることで Lombok が getter を生成する前の.javaファイルを AJC が見ることを回避し、ただしスキップしたが.classに対する post-compile weaving は強制している、ということなのだろう。\n差分は長い割に回答リンク先と変わらないので記載省略。\nリンク: 4ca1f64cc4174bb3c41932f6a08b3997779a782a。\nweaving 時の問題対処 さて、AspectJ 適用をコンパイル後に先送りしてしまったのでここからはmvn clean compileでなくmvn clean process-classesを実行する必要がある。\n早速実行してみると新しいエラーが出る。\n[ERROR] Failed to execute goal com.nickwongdev:aspectj-maven-plugin:1.12.1:compile (default-compile) on project aspectj: AJC compiler errors: [ERROR] error can't determine superclass of missing type org.springframework.transaction.interceptor.TransactionAspectSupport [ERROR] when batch building BuildConfig[null] #Files=0 AopXmls=#0 [ERROR] [Xlint:cantFindType] これもググったら回答があった:\n IDEA 10.5.2 Aspectj compiler - can't determine superclass of missing type org.springframework.transaction.interceptor.TransactionAspectSupport\nAsk Question - Stack Overflow  ただし最も upvoted されている回答は何を言っているのかさっぱり理解できない。\n何にせよ今回トランザクションに関わることは行っていないし、所詮は lint のメッセージなのでXlint オプションでエラーレベルを下げて放置することにした。\n62ff366f3755cfd882b15bf6b2b8a4b49807b065:\n \u0026lt;weaveDirectories\u0026gt; \u0026lt;weaveDirectory\u0026gt;${project.build.directory}/classes\u0026lt;/weaveDirectory\u0026gt; \u0026lt;/weaveDirectories\u0026gt; + \u0026lt;Xlint\u0026gt;warning\u0026lt;/Xlint\u0026gt; \u0026lt;/configuration\u0026gt; 警告メッセージ対応 ここまでで mvn clean process-classes は正常終了するようになった。ただし、いくつかの warning が残っているのでそれらを対処した。\ncouldn't find aspectjrt.jar on classpath aspectjrtを依存関係に追加した。\n5311573ab6b8dd45cf921e9d234e9e4fdd51e3a7:\n \u0026lt;groupId\u0026gt;org.springframework\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-aspects\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; + \u0026lt;dependency\u0026gt; + \u0026lt;groupId\u0026gt;org.aspectj\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;aspectjrt\u0026lt;/artifactId\u0026gt; + \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; bad version number found in /home/yuki/.m2/repository/org/aspectj/aspectjrt/1.9.4/aspectjrt-1.9.4.jar expected 1.9.2 found 1.9.4 aspectj-maven-plugin が利用すべきバージョンを明示した。\ne63eb7ce811d4081eded526d1310bcea33532c09:\n \u0026lt;/aspectLibrary\u0026gt; \u0026lt;/aspectLibraries\u0026gt; \u0026lt;/configuration\u0026gt; + \u0026lt;dependencies\u0026gt; + \u0026lt;dependency\u0026gt; + \u0026lt;groupId\u0026gt;org.aspectj\u0026lt;/groupId\u0026gt; + \u0026lt;artifactId\u0026gt;aspectjtools\u0026lt;/artifactId\u0026gt; + \u0026lt;version\u0026gt;1.9.4\u0026lt;/version\u0026gt; + \u0026lt;/dependency\u0026gt; + \u0026lt;/dependencies\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; 実行 mvn clean spring-boot:run  で所望の結果が得られた:\nHello, MyComponent  結果的に、ソースコードは当初の想定通りで、@Autowiredにコンポーネントがインジェクションされるような形で扱えた。\nおまけ Eclipse IDE の対応 pom.xml に aspectj-maven-plugin(fork でなくオリジナルの方)を設定すると m2e プラグインだったり AJDT だったり？をインストールしてくれようとするのだが、AJDT のリンクが死んでいるようでインストール全体が失敗する。\nAspectJ プロジェクトページからの AJDT リンクも死んでいる。\n結果、Eclipse IDE が実行するコンパイルでは weaving されない(ので別途mvn process-classesを実行する必要がある)。\n顧客が本当に欲しかったもの  @Component public class ApplicationContextProvider implements ApplicationContextAware { @NoArgsConstructor(access = AccessLevel.PRIVATE) private static class Holder { private static final Holder SINGLETON = new Holder(); private ApplicationContext applicationContext; } @Override public void setApplicationContext(final ApplicationContext applicationContext) throws BeansException { Holder.SINGLETON.applicationContext = applicationContext; } public static ApplicationContext getApplicationContext() { return Holder.SINGLETON.applicationContext; } } Spring get current ApplicationContext - Stack Overflow の回答コードを参考にしたんだけど、原文がインナークラス 2 つも使っている意味がわからない。\n","description":"","id":64,"section":"blog","tags":["spring-boot"],"title":"Spring Bootで コンポーネント外からコンポーネントを取得したかった","uri":"https://yukihane.github.io/blog/201906/01/spring-boot-component-out-of-container/"},{"content":"動機 ユニットテスト実行時に java.time.Clock を挿げ替えてストップ・ザ・ワールド(GC的な意味でなくジョジョ的な意味で)したかった。\n考え方/方針 @Configuration で @Bean を定義して Clock をインジェクションできるようにし、実装ではそれを用いる。\nテストコードでは @TestConfiguration で上で定義した @Bean をオーバライドしてストップ・ザ・ワールド用Clockを供給する。\n少し迷う点としては、現時点(バージョン 2.1.5)のリファレンスには @TestConfiguration をテストクラスの static inner クラスとして作っておけば優先的に有効化されるように書かれているが、実際はエラーになる。\n2.1.0 よりデフォルトでは bean オーバーライドが許可されなくなったためだろう。\n対応としては、\n プロパティspring.main.allow-bean-definition-overridingをtrueに設定することでオーバライドを許可する テストの bean 供給メソッドに@Primaryを付与し優先的に用いるようにする  この際メソッド名は production の供給メソッドと被らないようにしなければならないようだった    が考えられたが、今回は後者を採用した。\nサンプルコード src/main/java/../ClockConfig.java:\n@Configuration public class ClockConfig { @Bean public Clock clock() { return Clock.systemDefaultZone(); } }  src/test/java/../ClockTest.java:\n@SpringBootTest(webEnvironment = WebEnvironment.NONE) public class ClockTest { private static final ZoneId TOKYO = ZoneId.of(\u0026quot;Asia/Tokyo\u0026quot;); @TestConfiguration static class TestDateTimeConfig { @Bean @Primary public Clock clockMock() { final LocalDate date = LocalDate.of(2010, 8, 15); final Instant fixedInstant = date.atStartOfDay(TOKYO).toInstant(); final Clock clock = Clock.fixed(fixedInstant, TOKYO); return clock; } } @Autowired private Clock clock; @Test public void stopTheWorld(){ final ZonedDateTime now = Instant.now(clock).atZone(TOKYO); assertThat(now.getYear()).isEqualTo(2010); } }  参考リンク  46.3.2 Detecting Test Configuration - Spring Boot リファレンス Add Annotation for bean overriding [SPR-17519] #22051  ","description":"","id":65,"section":"blog","tags":["spring-boot"],"title":"Spring Boot 2.1 でテスト時 @Bean を挿げ替えたかった","uri":"https://yukihane.github.io/blog/201905/31/spring-boot-bean-on-testing/"},{"content":" RestTemplate でレスポンスの Content-Type を変更する。  の別解。\n@Autowired private RestTemplateBuilder builder; ... final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(); converter.setSupportedMediaTypes(Arrays.asList(MediaType.TEXT_PLAIN)); final RestTemplate restTemplate = builder.additionalMessageConverters(converter).build();  ちなみに上記のようにコンバータを明示的に設定しない場合だと次のような例外になる \u0008:\norg.springframework.web.client.HttpClientErrorException$NotAcceptable: 406 Not Acceptable at org.springframework.web.client.HttpClientErrorException.create(HttpClientErrorException.java:89) at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:122) at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:102) at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63) at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:778) at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:736) at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:710) at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:463)  ","description":"","id":66,"section":"blog","tags":["spring-boot"],"title":"text/plain で JSON を投げつけてくるヤツに対処する","uri":"https://yukihane.github.io/blog/201905/21/spring-boog-json-convert/"},{"content":"解答 正しくない。\n Java9(JEP226)で変わったのはリソースバンドルの取り扱い(PropertyResourceBundle) であって プロパティファイル .properties 全般の話ではない。 プロパティファイル.propertiesの文字エンコーディングについての取り決めはない。それを取り扱うプログラム次第でありUTF-8を正しく認識してくれるとは限らない。  標準 API で UTF-8として(読もうと思えば)読めるようになったのは 1.6 からであって 9 からではない。ちなみに 1.5 以前は ISO 8859-1 前提。    背景 私はうろ覚えで何となく、現在の Java では .properties ファイルを UTF-8 で書ける、ascii2nativeは過去の遺物になった、のだと思いこんでいました。\nところが Spring Boot の application.properties に UTF-8 で日本語を書いたところ文字化けしてしまい、あれ、もしかして自分の理解が間違っているのかと思い調べ直したのがこの記事です。\n Read application.properties using ISO 8859-1 #10565  (このプルリクのコメントでも、まさに私と同じ勘違いをされてる方がいらっしゃいます)    この勘違いはおそらく自分だけではないと考えています。\n例えば \u0026ldquo;JEP226\u0026rdquo; で検索すると日本語非日本語ともに \u0026ldquo;JEP 226: UTF-8 Property Files\u0026rdquo; と紹介されている記事がヒットしますし(ちなみに少なくとも現在のオフィシャルなタイトルは \u0026ldquo;JEP 226: UTF-8 Property Resource Bundles\u0026ldquo;だと思うんだけど、これだけみんな Property Files Property Files 書いてるってことは途中で変わったの？)、 .properties ファイルを読み込む API は ResourceBundle.getBundleだ、的な説明が検索結果で上位に出たり、ということから想像できます。\n説明 リソースバンドルを取得する際に用いるメソッドResourceBundle#getBundle では InputStream を引数に取る PropertyBundle コンストラクタが用いられますが、このときの InputStream の charset が UTF-8 であるとみなすように バージョン 9 から変更されています。\n他方、 プロパティをInputStreamからロードするメソッド Properties#load(InputStream) の InputStream の charset は従来と変わらず ISO 8859-1 が前提です。\nなおどちらにも InputStream型でなくReader型を引数に取るものが バージョン 1.6 から用意されており、そちらを用いれば JDK に指定されているエンコーディング以外のリソースも読めます。\n","description":"","id":67,"section":"blog","tags":["java"],"title":"Java9以降.propertiesファイルをUTF-8で書けるようになった、は正しい？","uri":"https://yukihane.github.io/blog/201904/27/java-properties-is-not-utf8/"},{"content":"概要 (追記: ここで試したのは2.1.4.RELEASE時点のもの。2.2.0.M3以降では #14736の通り JUnit5 がデフォルトになっている模様。)\nspring-boot-starter-test の JUnit5 対応はこちらの issue:\n Investigate JUnit 5 starter upgrade #14736  現時点でいわゆる out-of-the-box では使えない。手を入れる必要がある。\nそこで試しにTesting the Web Layer のサンプルコードを JUnit4 から JUnit Jupiter に変更してみた(Maven 用の pom.xml のみ)。\n https://github.com/yukihane/gs-testing-web/tree/feature/junit-jupiter/complete  参考  Testing the Web Layer - Spring project's guides SpringExtension for JUnit Jupiter - Spring Famework Testing  Testing Spring Boot Applications - Spring Boot reference   Provide dedicated Spring Boot starter for JUnit 5 #14716 - Spring Boot Issues Configuring Test Engines - JUnit 5 official guide  変更手順 詳しくは冒頭に記載した Git リポジトリ参照のこと。\n spring-boot-starter-test が junit(JUnit4)に依存しているので除外する。 (差分リンク) JUnit5 関連の依存関係を追加設定する。 junit-jupiter-engine, junit-jupiter-api (差分リンク) テストクラスに付与されているアノテーション @RunWith(SpringRunner.class) を @ExtendWith(SpringExtension.class) に置換する。 (差分リンク) @RunWith(SpringRunner.class) を単に削除する。  @ExtendWith(SpringExtension.class) は @SpringBootTest や @WebMvcTest に含まれるため明示的な設定は不要。   JUnit4 の import を JUnit Jupiter のものに置換する。(差分は上のものに含まれる)  備考 Hamcrest vs AssertJ  Spring Boot Starter adds both AssertJ and Hamcrest assertion libraries #15789  からは、 Spring Boot では AssertJ を使うことが推奨されているように感じる。ただし、\n Support AssertJ variant in MockMvc [SPR-16637] #21178  Consider AssertJ variant of MockMvc #5729    にあるとおり、 現時点では MockMvc が Hamcrest に依存しているので完全には Hamcrest を除外できない。\n@ExtendWith(SpringExtension.class) Spring Boot + JUnit5 + Kotlin でテストを書く - Qiita などでは本アノテーションを付与する旨記載されているが、Spring Boot のテストに用いるアノテーションには既に設定されているため、自分(テストコード記述者)が明示的に設定する必要は(もはや)ない。\n46.3 Testing Spring Boot Applications - Spring Boot リファレンス:\n If you are using JUnit 5, there’s no need to add the equivalent @ExtendWith(SpringExtension.class) as @SpringBootTest and the other @…Test annotations are already annotated with it.\n 及び関連する issue:\n Annotate @…Test annotations with @ExtendWith(SpringExtension.class) #13739  コンポーネントスキャン SpringBoot と JUnit5 で MockMvc を使うには - Qiita では\n ③ テストコンフィグファイルの作成\nこれが重要でした。個々のテストクラスで、コンポーネントスキャンしてクラスを参照できるようにしてあげます。\n と書かれているが、今回無くても動作した。\n","description":"","id":68,"section":"blog","tags":["spring-boot"],"title":"Testing the Web Layer のコードを JUnit Jupiter にマイグレーションしてみる","uri":"https://yukihane.github.io/blog/201904/16/migration-to-junit5/"},{"content":"やりたかったこと  BeanValidation のプロパティファイル ValidationMessages.properties でなく、 Spring のメッセージプロパティに統合したい。  Spring のメッセージプロパティとは？   Accept-Languageベースでメッセージを国際化したい。  調べた Spring のメッセージプロパティファイルはどこ？ これはキーワード \u0026ldquo;site:spring.io i18n message\u0026rdquo; でググるとすぐ見つかった。\n 27. Internationalization  messages.properties だ。\nまた、メッセージに関するプロパティは、このページで説明されている通り MessageSourceProperties で確認できる。\n例えば cacheDuration というフィールドがあるので application.properties ファイルには\nspring.messages.cache-duration  という名前で該当値を設定できる(フィールド名は camelCase だが、これに bind するプロパティ名は いわゆるkebab-case が推奨されている)。\nExternalized Configurationという仕組みだと思うが、 どうやって実現しているのかは分からん 。 MessageSourceProperties に ConfigurationProperties アノテーションが付いているわけでもなし。\nデフォルト設定値を調べる デバッガで追いかけた。 これ本当ならどうやってリファレンス探せば見つかるんだ？\nValidationAutoConfiguration#defaultValidator() メソッドだ。\nプロジェクト名(ディレクトリ名)から想像がつく通り、 Auto-configurationという仕組みだ。\n明示的な設定を行っていない場合、フレームワーク側でよしなに設定を行ってくれる。\n…が、その設定が気に入らない、というのが今回の問題のひとつの側面だ。\nここで登場するメソッド MessageInterpolatorFactory#getObject()で、お節介にも BeanValidation 側の MessageInterpolator を取ってきている。\nこのため冒頭で記載したとおりデフォルトで ValidationMessages.properties が使われるようだ。\nマジかよ？ なんでそんなとこで日和ってんねん！\nなおした 今回こうやった まずはじめに、今回の問題の本質とは無関係だが、fallback 先ロケール設定を変更しておく。デフォルトだとシステムロケール、つまり日本語環境なら messages.properties でなく messages_ja.properties にフォールバックしてしまうので直感に反する。\nそこで application.properties ファイルに次を設定。\nspring.messages.fallback-to-system-locale=false  Spring Tools 4 for Eclipse なら補完も効くし説明もポップアップ表示される。嬉しい。なお、もしかしたら他の IDE でも同様の機能はあるのかもしらんが、使ったこと無いのでわからない。\nさて本題。\n上記で登場した auto-configuration であるところの ValidationAutoConfiguration#defaultValidator() を上書きして自分好みにしてしまえばいい。\n@ConditionalOnMissingBean(Validator.class) が付与されているので、自前で Validator を提供するメソッドを作ってしまえば良いということだ。\nというわけでこんなクラスを作るぞ。\nimport javax.validation.Validator; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.MessageSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean; @Configuration public class MyConfig { @Autowired private MessageSource messageSource; @Bean public Validator localValidatorFactoryBean() { final LocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean(); factoryBean.setValidationMessageSource(messageSource); return factoryBean; } }  LocalValidatorFactoryBean は javax.validation.Validator も org.springframework.validation.Validator も実装しているが、戻り値の型として使うべきは(@ConditionalOnMissingBeanで指定している型である)前者だ。間違えて後者を使うと想定どおり動作しないやっかいなバグになるぞ。\nちなみに戻り値の型指定、 javax.validation.Validator の代わりに LocalValidatorFactoryBean でも動作した。\ninstanceofで評価しているのだと思うが確証はない。\nさて MessageSource が登場しているがこれはなにか？ わからん 。\nググってたときにたまたま見つけた。\nいやもちろん名前通りメッセージリソースなのだが、ここまで見てきたリファレンスでは一切登場していない。\n27. InternationalizationとかMessageSourcePropertiesの javadoc とかで触れられているべきでは！？\nこいつはロケール考慮されているようで、デフォルトだと AcceptHeaderLocaleResolverを使って 冒頭に記載した希望通りAccept-Languageを考慮してくれるようだがいい加減調べるのに疲れたので裏はとっていない。\n多分このへん読めば良いのだろう。\nところで この部分の調査の過程で LocalValidatorFactoryBean #setValidationMessageSourceに解答っぽい記述があることに気づいた。\nが、 この文章見て具体的に何やればいいかわからんのだが？ そもそも このメソッドの存在をどうやったら見つけられるんだ？\nやっかいなことに Spring(Boot)のやりかたは上に書いた方法だけではないようだ。次のエントリで同じ目的を達成するための方法が説明されている。\n Spring Boot でバリデーションエラーメッセージを日本語にしてみる - Qiita  WebMvcConfigurerAdapter(注: 現行バージョンでは代わりに WebMvcConfigurer)って何やねんどこから出てきた？\nどっちで設定すべきやねーん！\n追記 ロケールについて 上で端折った i18n について調べ直した。デバッガのステップ実行で。\nLocaleContextHolder#getLocale() でロケールを取得している。\nこいつを使っているのが MessageInterpolator(を実装した実体 LocaleContextMessageInterpolator の interpolate メソッド だ。\nServletFilter であるところの RequestContextFilter で HttpServletRequest#getLocale() をロケールとして設定している。\nしたがって、　HTTP リクエストコンテキストでは (補足: なんか Qiita の他の人の記事とかではコンテキストを無視して説明している文章が多いぞ。別に validation は RequestScope だけで行うわけではなかろう)、ロケールは HttpServletRequest#getLocale() の値となるし、それ以外のコンテキストでもそのコンテキストに応じたロケールを設定してくれていると期待できることが分かった。\nWebMvcConfigurer ここにあった！\n 1.10.4. Validation - Spring Framework Documentation \u0026gt; Web Servlet  何が Spring Boot で何が Spring なのか全然分からん。\nいや、よく考えると auto-configuration はあくまで付加的な仕組みであって、そこから行うべきことを考えるのは筋が違うな。\nということは WebMvcConfigurer で設定するのが本来の姿なのだろうか。\nしかし Validation の、国際化の仕組みの設定が WebMvcConfigurer という名前のものに備わっているというのはどうやって思い至れば良いんだろう？\nもしかしたらこういう手順か？\n Spring Boot リファレンスの該当しそうな章 37.Validation を見る。 @Validated という validation 専用っぽいアノテーションが使われているぞ。 javadoc の記述を読むと Spring MVC という単語が出てるので、validation の仕組みは Spring MVC の機能のひとつなんだ？ Spring Framework ドキュメントのリストを見ると Spring MVC はWeb Servletに含まれているようだ？ Servlet と validation って何か関係があるのか？よく分からんが見てみよう。 該当する節 1.10.4. Validationが見つかった！なるほど 設定は WebMvcConfigurer で行うのか！ 関係しそうな名前 getValidator()ってメソッドがあるぞ！  マジでこんなこと考えるの？無理ゲーじゃない？\nあとこれから更に LocalValidatorFactoryBean インスタンスを生成して返すってのに気付くのにもまた一山超える必要がありそうだし。\nまとめ  Spring 全然わからん。 Qiita のスタイル、バックスラッシュでくくるとハイパーリンク貼ってるのかどうなのかわからんからいまいち。 Qiita 等で Spring( Boot)解説エントリを書いている人に向けて: 根拠となる公式リファレンス/ソースコードへの参照も含めてほしい。あなたの書いたその実装方法が妥当なのか入門者は確認できない。  ","description":"","id":69,"section":"blog","tags":["spring-boot"],"title":"Spring Validator(でラップされたBean Validation)のメッセージをi18nしたときの覚え書き","uri":"https://yukihane.github.io/blog/201903/26/change-spring-validator-message/"},{"content":"他の方が同じ話題で次のエントリを書かれていましたが、gulp 何それ状態なので理解できませんでした。理解できる方はそちらの方が良いのかもしれません。\n RPG ツクール MV プロジェクトをバージョン管理したい話 - Qiita  問題 RPG ツクール MV のリソースをバージョン管理したい。\njson, js の差分が見られると嬉しいが、そのまま git diff, git diff --word-diff してもみづらい。\n対策 json, js ファイルについて、RPG ツクール MV が出力したファイルをそのまま管理対象にするのではなく、commit 前に整形して管理することで差分を見やすくする。\n今回、整形には prettier を用いることにした。\n設定手順 RPG ツクール MV 上でプロジェクトを新規作成し、プロジェクトディレクトリに行く。\nついでに無駄に付与されている実行権限も落とす。\ncd ~/Documents/Games/Project1 find . -type f -print0|xargs -0 chmod 644  git 初期化、初期コミット。\ngit init git commit --allow-empty -m init curl -L -o .gitignore https://gitignore.io/api/node,visualstudiocode git add .gitignore git commit -m gitignore git add . git commit -m \u0026quot;auto-generated files\u0026quot;  (以後、適宜 git commit )\nnpm プロジェクト初期化実行。\nnpm init -y  prettier と、オンデマンド実行用プラグインをインストール。\nnpm i -D prettier husky lint-staged onchange  js/plugins.js は整形すると正常動作しなかったので整形対象外に設定しておく。\necho \u0026quot;js/plugins.js\u0026quot; \u0026gt;\u0026gt; .prettierignore  npm run format コマンドで明示的に整形、また、 npm run prettier-watch コマンドでファイル変更を検知して自動整形するように設定。\n(参考: CLI, Watching For Changes)\npackage.json:\n{ ... \u0026quot;scripts\u0026quot;: { \u0026quot;format\u0026quot;: \u0026quot;prettier --write **/*.js **/*.json\u0026quot;, \u0026quot;prettier-watch\u0026quot;: \u0026quot;onchange '**/*.js' '**/*.json' -- prettier --write {{changed}}\u0026quot; }, ... } husky と lint-staged を使って git-commit 時に自動整形するように設定。\n(参考: Pre-commit Hook - Option 1. lint-staged)\npackage.json:\n{ ... \u0026quot;husky\u0026quot;: { \u0026quot;hooks\u0026quot;: { \u0026quot;pre-commit\u0026quot;: \u0026quot;lint-staged\u0026quot; } }, \u0026quot;lint-staged\u0026quot;: { \u0026quot;*.{js,json}\u0026quot;: [ \u0026quot;prettier --write\u0026quot;, \u0026quot;git add\u0026quot; ] }, ... } 自動生成されたコードを整形してコミットしておく。\nnpm run format git commit -am \u0026quot;format codes\u0026quot;  ","description":"","id":70,"section":"blog","tags":["rpg-maker"],"title":"RPGツクールMVをバージョン管理するための初期設定","uri":"https://yukihane.github.io/blog/201903/24/versioning-rpg-maker/"},{"content":"例えば、生 JDBC でchar型カラムのクエリを書くとString型にマップされます\n final Connection connection = DriverManager.getConnection(...); final Statement statement = connection.createStatement(); final ResultSet resultSet = statement.executeQuery(\u0026quot;select char_column from foo_table\u0026quot;); // java.lang.String resultSet.getMetaData().getColumnClassName(1);  が、Hibernate の Native query を用いて同じように実行するとCharacter型にマップされます:\n final EntityManagerFactory factory = Persistence.createEntityManagerFactory(...); final EntityManager em = factory.createEntityManager(); final Query q = em.createNativeQuery(\u0026quot;select char_column from foo_table\u0026quot;, Tuple.class); final List\u0026lt;Tuple\u0026gt; res = q.getResultList(); // java.lang.Character res.get(0).get(0).getClass();  この挙動を決めているのは org.hibernate.dialect.Dialectのこの辺りです:\n registerHibernateType( Types.CHAR, StandardBasicTypes.CHARACTER.getName() ); registerHibernateType( Types.CHAR, 1, StandardBasicTypes.CHARACTER.getName() ); registerHibernateType( Types.CHAR, 255, StandardBasicTypes.STRING.getName() );  この挙動を変えるには、カスタムの Dialect を実装し、それを persistence.xml なりで指定するようにします。\nカスタム Dialect の例:\npackage com.example.dialect; import java.sql.Types; import org.hibernate.dialect.H2Dialect; import org.hibernate.type.StandardBasicTypes; public class H2CustomDialect extends H2Dialect { public H2CustomDialect() { super(); registerHibernateType(Types.CHAR, StandardBasicTypes.STRING.getName()); registerHibernateType(Types.CHAR, 1, StandardBasicTypes.STRING.getName()); registerHibernateType(Types.CHAR, 255, StandardBasicTypes.STRING.getName()); } }  参考:\n HHH-2304 Wrong type detection for sql type char(x) columns JDBC API 入門 - 9. SQL と Java の型のマッピング  ","description":"","id":71,"section":"blog","tags":["hibernate","java"],"title":"Hibernate で CHAR を String にマップする","uri":"https://yukihane.github.io/blog/201902/04/hibernate-map-char-to-string/"},{"content":"最新の JDK をインストールしたが、古いバージョンの Eclipse も利用したい(が最新のバージョンでは起動できない)ような場合に必要となる設定です。\n設定するファイルと設定方法 Eclipse.app/Contents/Eclipse　にある eclipse.ini に、所望のバージョンの java コマンドが入っているディレクトリを指定します。\n/usr/libexec/java_home -V で JAVA_HOME 候補一覧が参照できますので、このディレクトリ + /bin を指定することになります。\n例えば\n$ /usr/libexec/java_home -V Matching Java Virtual Machines (2): 11.0.1, x86_64: \u0026quot;OpenJDK 11.0.1\u0026quot; /Library/Java/JavaVirtualMachines/openjdk-11.0.1.jdk/Contents/Home 1.8.0_192, x86_64: \u0026quot;Java SE 8\u0026quot; /Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home  のような状況で、 バージョン 1.8 を Eclipse を実行する JVM として指定したい場合には、冒頭で説明した eclipse.ini に\n-vm /Library/Java/JavaVirtualMachines/jdk1.8.0_192.jdk/Contents/Home/bin  と追記します。\nなお追記する行は-vmargsより上にしてください。\n参考: https://wiki.eclipse.org/Eclipse.ini#-vm_value:_Mac_OS_X_Example\nおまけ Eclipse がどの JVM で実行されているのかを調べるには？ メニューの Eclipe \u0026gt; Eclipse について で \u0026ldquo;About Eclipse\u0026rdquo; ダイアログを開き、\u0026ldquo;Installation Details\u0026quot;ボタン \u0026gt; \u0026ldquo;Configuration\u0026quot;タブに表示されている情報から -vm オプションを探します。\n-vmを明示的に指定しなかった場合には何が使われるの？  If not specified, the Eclipse executable uses a search algorithm to locate a suitable VM.\n 参考: The Eclipse runtime options - Eclipse documentation\n/usr/binを指定しておけばJAVA_HOMEを切り替えるだけで良いんじゃ？ 確かに javaコマンドを実行したときのバージョンが切り替わるのですが、Eclipse には効かないようです。\nこのように指定した場合、 /usr/libexec/java_home で出力される場所のバージョンを用いるようです。\nこの出力は通常インストールされているバージョンのうち最新のものとなっているでしょう。\nなお、起動に失敗した場合には、その時使用しようとした JVM の情報はエラーログ(場所は起動失敗時のエラーダイアログに示されます)に出力されています。\n/usr/libexec/java_home の出力を切り替えることはできるの？ 実際には、/usr/libexec/java_home -V の最上行が/usr/libexec/java_homeとして出力されているように見えます。\nこの並びは、 /Library/Java/JavaVirtualMachines/\u0026lt;それぞれのバージョンディレクトリ\u0026gt;/Contents/Info.plist　に書かれている JVMVersion値の逆順になるようなので、この値を書き換えることにより　/usr/libexec/java_home　出力結果をすげ替えることが可能です。\n参考: How can I change Mac OS's default Java VM returned from /usr/libexec/java_home - Stack Overflow\n","description":"","id":72,"section":"blog","tags":["mac","java","eclipse"],"title":"Eclipseの起動に使用するJDKを指定する（Mac）","uri":"https://yukihane.github.io/blog/201901/16/set-jvm-to-eclipse-on-mac/"},{"content":"Ubuntu を 18.04 にアップグレードしたら端末の補完処理で tab キーを押す度にヴヴッという不快なビープ音が鳴るようになってしまった。\n端末のメニューから 設定 を選択し設定ダイアログを開く。\nダイアログで自分の使用しているプロファイル(ここではデフォルト)を選択し、文字タブのSoundオプションで端末ベルを鳴らすのチェックを外せば OK。\n参考: How to remove terminal error sound? - Ask Ubuntu\n","description":"","id":73,"section":"blog","tags":["ubuntu"],"title":"Ubuntu18.04 端末の不快なエラー音 消す方法","uri":"https://yukihane.github.io/blog/201811/10/ubuntu-mute-tab-sound/"},{"content":"Java の有償化ってより身近なところでは GPL 化と言った方が現状に即してるな、と思っています。\nそれはともかく、何となく OpenJDK をデバッグ情報付きでビルドしたくなったのでメモ。\n参考リンク  Building OpenJDK - http://hg.openjdk.java.net/jdk10/jdk10/raw-file/tip/common/doc/building.html  OpenJDK10 のもの。11 のものは(まだ？)無さそう 後述の通り、freetype の指定は不要となっているなど、多少 configure の引数が異なる   JDK 11 General-Availability Release - http://jdk.java.net/11/  OpenJDK11 のリリースページ    環境/準備物  Windows10Pro, 1803 - https://portal.azure.com  ビルド環境 今回は Azure の仮想マシンの標準構成を利用   JDK10 - https://www.oracle.com/technetwork/java/javase/downloads/index.html#JDK10  ビルドするのに 1 つ前のメジャーバージョンの JDK が必要。ただし実際には同じメジャーバージョンでも良いと思われる(つまり今回なら 10 か 11 をインストール) 今回は OracleJDK を用いたが、他の JDK でももちろん良いだろう   Cygwin - https://www.cygwin.com/  導入したパッケージ: mercurial, zip, unzip, make, autoconf 補足すると、上のものに加えて自分は vim も入れた その他 bash, tar も必要とかかれていたが、おそらく初めから入っている   Visual Studio 2017 Community - https://visualstudio.microsoft.com/ja/downloads/  多分 IDE は必要無く、Windows SDK だけ入れれば良いのだと思うが、詳しくないので分からなかった インストール時オプションは「Desktop development with C++」にのみチェックを入れた    ビルド手順 Windows Defender 設定 私自身が下記手順を実施中、タスクマネージャで見ると「Antimalware Service Executable」がかなり CPU を使用していました。\n作業高速化を図る場合、必要に応じて、Windows Defender を OFF にしたりチェック対象ディレクトリから今回の作業ディレクトリを除外する設定を行います。\nビルドに必要なアプリケーションのインストール 上述の通りです。\nただし、次の OpenJDK ソースのチェックアウトに時間がかかるので、cygwin を先にセットアップし、ソースをチェックアウトしながらそれ以外のアプリケーションをインストールするのが良いと思います。\nOpenJDK ソースコードのチェックアウト 今回作業ディレクトリは /cygdrive/c/openjdk としました。\nまた、チェックアウトしたタグjdk-11+28は冒頭に記載した OpenJDK リリースページに書いてあったものです(結果的には、HEAD のソースのようでした)。\nmkdir /cygdrive/c/openjdk cd /cygdrive/c/openjdk hg clone http://hg.openjdk.java.net/jdk/jdk11 -r jdk-11+28  ダウンロードに 30 分強、ローカルファイルシステムへの展開に 30 分強、合計で 1 時間以上かかりました。\nconfigure cd /cygdrive/c/openjdk/jdk11 bash configure --disable-warnings-as-errors --enable-debug  configure オプション等説明 \u0026ndash;enable-debug 今回自分はデバッグ情報が欲しかったので--enable-debugを付与しています。不要であれば取り除きます。\n\u0026ndash;disable-warnings-as-errors --disable-warnings-as-errorsは本来不要だと思うのですが、現状のコードではこのオプションが無い場合次の警告でビルドがストップしてしまいます。\n jvmFlagRangeList.cpp(341): warning C4305: \u0026lsquo;argument\u0026rsquo;: truncation from \u0026lsquo;const intx\u0026rsquo; to \u0026lsquo;double\u0026rsquo;  freetype について OpenJDK10 のビルドドキュメントでは freetype を何らかの形で指定する必要があるよう書かれていますが、OpenJDK11 では freetype ソースもバンドルされているようで、Windows ビルドではデフォルトでそれが用いられるようになっています。\n従って特に何か行う必要はありません。\nmake make  ちょうど 30 分ほどかかりました。\n正常終了すると、build/windows-x86_64-normal-server-fastdebug/jdkに成果物一式が出来上がっています。\njava -versionの出力は次の通り:\nopenjdk version \u0026quot;11-internal\u0026quot; 2018-09-25 OpenJDK Runtime Environment (fastdebug build 11-internal+0-adhoc.yukihane.jdk11) OpenJDK 64-Bit Server VM (fastdebug build 11-internal+0-adhoc.yukihane.jdk11, mixed mode)  ","description":"","id":74,"section":"blog","tags":["windows","java"],"title":"OpenJDK11をWindowsで自前ビルドする","uri":"https://yukihane.github.io/blog/201809/30/selfbuild-openjdk/"},{"content":"v1 で実験的サポートだった PowerShell が、実行環境のバージョンが上がったとかで v2 になり、選べなくなっているみたい？一時的な話？\n実行環境を作る https://portal.azure.com/ から 「リソースの作成」「Serverless Function App」と選択していきます。\n入力項目を適当に埋めていきます。PowerShell で作りたいので当然ながら1OS は「Windows」、ランタイムスタックは「.NET」。\nApplication Insights は何かよく分からないのでオフ\nにしました。\n入力を終え画面下部の「作成」ボタンを押すとデプロイ作業が始まり、少し待たされます。\nデプロイ作業が完了すると通知が表示されます。その通知からも行けますし、そうでない場合は画面左の「Function App」メニューから関数作成ウィザードに行けます。\n「関数」ツリーメニューの右にあるプラスアイコンをクリックし、その次に今回作りたいプロジェクトのひな型を選びます。\n今回は「In-portal」を選択しました。\n選択が完了したら画面下部の「続行」ボタンを押します。\n今回タイマー駆動の処理が行いたいので「タイマー」を選択し、その後画面下部の「作成」ボタンを押します。\nすると…めでたく C#の関数が生成されました！\nってなんでやねん！PowerShell で作りたい言うとるやろ！言語選ばせろや 💢\n作成した実行環境の設定を変更する ランタイムバージョンを変更する 現在デフォルトのランタイムバージョンが 2 なので 1 に下げます。PowerShell は今のところバージョン 1 でしか選択できません。\nまず、先ほど作成した関数を削除します。残したままだと設定変更できません。\nツリーメニュー上で、作成した関数名の 1 つ上の階層「関数」メニューを選択し、表れた関数名一覧の右端にあるごみ箱アイコンを選択し削除実行します。\nつづいて、先ほど選択した関数メニューの更に 1 階層上、\u0026lt;app 名\u0026gt;(ここでは hello-azure-functionz)を選択し、右側の表示「プラットフォーム機能」タブがアクティブであることを確認します。\nそのタブ表示の中から、「Function App の設置」を選択します。\n「ランタイムバージョン」が「~2」になっているので、これを 「~1」に変更します。\nアプリケーション設定 FUNCTIONS_WORKER_RUNTIME を削除する 本来であれば、ここまでの設定を行えば v1 がサポートしている言語が使えて然るべきだと思うのですが、まだ PowerShell がウィザードに表れません。\nそこで次に説明する設定変更を行います。\nさきほどの「プラットフォーム機能」タブに戻り、今度は「アプリケーション設定」を選択します。\n開いたタブを少し下にスクロールし、「アプリケーション設定」セクションを探します。\nこの中で「FUNCTIONS_WORKER_RUNTIME」というアプリ設定名がありますので、これを削除します。\nそして、その画面の上部にある「保存」アイコンを選択し変更を反映してください。\n設定は以上です。\nPowerShell 関数を作成してみる PowerShell 関数を作成できるようになっていることを確認してみましょう。\n関数を新規作成するために、「関数」メニュー右のプラスアイコンを選択します。\nそうすると、設定変更作業前とは異なる画面が表示されます。\nここで「カスタム関数を作成する」を選択します。\n次の画面で、「実験的な言語のサポート」を有効にすれば選択肢に PowerShell が表れます。\nここでは「Timer trigger」を選択します。\n言語で「PowerShell」を選択し、あとは適当に入力して「作成」を押せば関数作成完了です。\n参考  unable to create a python function app in azure function runtime v1 - Stack Overflow   いや AWS Lambda の PowerShell(Core)環境は Amazon Linux なので当然ということでもないか。 \u0026#x21a9;\u0026#xfe0e;\n   ","description":"","id":75,"section":"blog","tags":["azure"],"title":"Azure FunctionsでPowerShell使えなくなっとる","uri":"https://yukihane.github.io/blog/201809/29/pwsh-on-azure-function/"},{"content":"進捗状況(progress)が表示されているそうです。少量のデータを扱っている場合には画面の一部がフラッシュしているように見えており、何のための画面効果かさっぱりわかりませんでした(ので検索キーワードすら思い浮かびませんでした)。\n$progressPreference = 'silentlyContinue'  で抑制できるようです。\n参考: powershell - Hide progress of Invoke-WebRequest - Stack Overflow\n","description":"","id":76,"section":"blog","tags":["windows","pwsh"],"title":"Invoke-WebRequestやCompress-Archiveを使っていると画面上部に一瞬表示される何かの表示を非表示に","uri":"https://yukihane.github.io/blog/201809/08/pwsh-progress-silent/"},{"content":"vagrantでrsyncが使いたくなった。\nそこでscoopでrsyncをインストールしようとしたが、見つからない。\nおや？と思い検索してみると次の issue が。\nrsync free version is no more #2506\nつい最近、 https://www.itefix.net/dl/cwrsync_5.7.2_x86_free.zip が無くなったそうだ。\n代替策としては、\nhttp://repo.msys2.org/msys/x86_64/rsync-3.1.3-1-x86_64.pkg.tar.xz\nを用いるのがよさそうだ。\nおそらく早晩scoopコマンドで入手可能となろうが。\nrefs: https://github.com/lukesampson/scoop/pull/2431\n","description":"","id":77,"section":"blog","tags":["windows","scoop"],"title":"Windows向けrsyncがなくなったみたい？","uri":"https://yukihane.github.io/blog/201808/22/windows-rsync-unavailable/"},{"content":"vim は ~/.vim ディレクトリを読むのに対し gvim は~/vimfilesディレクトリを読むためだそうです。Windows ならジャンクションを作りましょう。\ncd /d %homepath% mklink /j vimfiles .vim  参考:\n neovim Unknown function: plug#begin gvim on windows  ","description":"","id":78,"section":"blog","tags":["windows","vim"],"title":"vim で E117 未知の関数です","uri":"https://yukihane.github.io/blog/201808/08/gvim-unknown-function/"},{"content":"あるいは vim-plug をセットアップしたら git commit したときに E492: Not an editor command って怒られるようになっちゃった。\nVagrant で CentOS の Box を作るたびにひっかかる。\nGit が使う editor を(vi でなく)vim に設定すればよい。\n GIT_EDITOR環境変数 core.editor設定 VISUAL環境変数 EDITOR環境変数 コンパイル時の設定(通常vi(ただし Ubuntu はnanoだった))  の優先順位で利用されるエディタが決定する(git-var(1))ので、何も設定していなければ(大抵の場合)viが使用される。\nvimが使われるように設定しておこう。例えば、次のように:\ngit config --global core.editor $(which vim)  ","description":"","id":79,"section":"blog","tags":["git"],"title":"gitで利用するエディタを設定したかった","uri":"https://yukihane.github.io/blog/201807/27/set-git-commit-editor/"},{"content":"M2_HOME は削除されました。\n MNGSITE-283 Remove M2_HOME from documentation MNG-5607 Don't use M2_HOME in mvn shell/command scripts anymore 3.5.0 リリースノート \u0026ldquo;Based on problems in using M2_HOME related to different Maven versions installed and to simplify things, the usage of M2_HOME has been removed and is not supported any more MNG-5823, MNG-5836, MNG-5607.\u0026rdquo; (変更 commit)  敢えて設定するのであれば、 上の変更 commit リンク先にある通り、M2_HOMEでなくMAVEN_HOMEにしましょう。\nただし、敢えて設定すべき状況は通常発生しないと思います。\n","description":"","id":80,"section":"blog","tags":["java"],"title":"M2_HOMEは不要","uri":"https://yukihane.github.io/blog/201807/25/not-required-m2_home/"},{"content":"git-archive使えば何とかなることに気付きました。\nちなみにunzipコマンドは標準で使えます。\nmkdir workrepo cd workrepo git init cp -r [target_file_or_dir] . git add . git commit -m commit git archive -o ../myarchive.zip @ cd .. rm -rf workrepo  あんまり自信ないんですけどスクリプトファイルに落とすとこんな感じ？\n#!/usr/bin/bash set -eu unset workdir onexit() { if [ -n ${workdir-} ]; then rm -rf \u0026quot;$workdir\u0026quot; fi } trap onexit EXIT workdir=$(mktemp --tmpdir -d gitzip.XXXXXX) cp -r \u0026quot;$2\u0026quot; \u0026quot;$workdir\u0026quot; pushd \u0026quot;$workdir\u0026quot; git init git add . git commit -m \u0026quot;commit for zip\u0026quot; popd git archive --format=zip -o \u0026quot;$1\u0026quot; --remote=\u0026quot;$workdir\u0026quot; HEAD  ","description":"","id":81,"section":"blog","tags":["windows","git"],"title":"Git for Windowsでzipコマンドを再現する","uri":"https://yukihane.github.io/blog/201807/13/zip-on-git-for-windows/"},{"content":"手順  FacesInitializer#onStartupでやっていることを自力で書く 標準パス(WEB-INF/classes)に無いので、ManagedBeanアノテーションを付与したクラスを自前で収集する  ソースは: https://github.com/yukihane/hello-undertow-mojarra\n関連  Tomcat 上で JSF 実現 - Qiita Does Undertow work with JSF? - Stack Overflow  ","description":"","id":82,"section":"blog","tags":["java"],"title":"Undertow上でJSF実現","uri":"https://yukihane.github.io/blog/201807/08/jsf-on-undertow/"},{"content":"Java でメッセージを英語にする 環境変数 JAVA_TOOL_OPTIONS に設定しよう。\nexport JAVA_TOOL_OPTIONS=\u0026quot;-Duser.language=en -Duser.country=US\u0026quot;  ","description":"","id":83,"section":"blog","tags":["java"],"title":"エラーメッセージでググろうと思ったんだけど日本語だからかヒットしない","uri":"https://yukihane.github.io/blog/201807/08/java-compiler-error-in-japanese/"},{"content":"非 JavaEE なサーブレットコンテナ上で JSF を実行するように変更する手順。\nTL;DR  Mojarra を依存関係に含める JSF リソースを javax.faces.webapp.FacesServlet にマップするよう web.xml で設定する  実装例 https://github.com/yukihane/hello-jsf/tree/feature/server/tomcat\nfeature/server/tomcat ブランチと feature/server/javaee ブランチで diff を取れば、 JavaEE アプリケーションサーバ向け設定との差異がわかります。\n(ちなみに masterブランチや README.md の説明は別の内容向けなので気にしないで下さい)\n手順 通常の(JSF 未対応の)warに対し、Mojarra 依存関係を追加します。\npom.xml\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.glassfish\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.faces\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  (余談ですが、初見でこのgroupId, artifactIdからこれが Mojarra 本体だとわかるだろうか、いやわからない。)\n次にweb.xmlで(今回の例では)拡張子xhtmlファイルへのアクセスを MojarraJSF プロセスエントリポイントへマップします。\nsrc/main/webapp/WEB-INF/web.xml:\n\u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;faces\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;javax.faces.webapp.FacesServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;load-on-startup\u0026gt;1\u0026lt;/load-on-startup\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;faces\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;*.xhtml\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt;  以上です。\n","description":"","id":84,"section":"blog","tags":["jsf","java","tomcat"],"title":"Tomcat上でJSF実現","uri":"https://yukihane.github.io/blog/201807/07/jsf-on-tomcat/"},{"content":"はじめに  他者が作成したプログラムにちょっと変更を加えて使いたい その言語は未経験だけれど、コードの変更自体は検索したり周辺コードのコピペで何とかなりそう しかし、変更したコードをどうやってビルドすれば良いんだ…？  なんてことがたまにあります。\nそんな時に参考になるようなドキュメントを目指して記述しました。\nプロジェクトの構造を確認する ビルドするソースコード一式を取得したら、ディレクトリ構成を確認します。\nプロジェクトルートディレクトリに pom.xml というファイルがあれば本ドキュメントが対象としている Java プロジェクトです。\nan-app ├── pom.xml └── src ├── main │ ├── java │ │ └── (ディレクトリ階層とJavaソースコード) │ └── resources │ └── (ディレクトリ階層とリソースファイル) └── test ├── java │ └── ... └── resources └── ... 複数のモジュールで構成されている場合は次のように入れ子になっている場合もあります:\nan-app-parent ├── an-app-core │ ├── pom.xml │ └── src │ └── ... ├── an-app-lib │ ├── pom.xml │ └── src │ └── ... └── pom.xml この場合、それぞれのディレクトリがpom.xmlを持ちます。\npom.xml は プロジェクト構造を記述するファイルで、Apache Maven が使用します。\nJava では Maven 以外にも同じようにプロジェクト構造を管理するアプリケーションがあります。それぞれルートディレクトリに固有のファイルやディレクトリを作成しますので、そのファイル/ディレクトリを見れば何でプロジェクトが管理されているか分かる、ということになります。\n本ドキュメントの対象外ですが、一例を示します。\n   ファイル 説明     build.gradle Gradle管理プロジェクト。Android プログラムの標準はこれ。   build.xml Apache Ant管理プロジェクト。Maven が主流になる前のデファクトスタンダード。歴史のあるプロダクトでまだ利用されていることも。    ビルドに必要なアプリケーションをインストールする 必要な Java バージョンを調べる ビルドに必要な Java のバージョンを調べておきます。\n基本的には実行環境と同じバージョンでビルドすれば良いはずなので、エンドユーザ向けドキュメントが付属しているのであれば、そこに必要とする Java のバージョンが書かれているでしょう。\nあるいは、ルートディレクトリにあるpom.xmlを開き、次の項目の値を調べてみても良いでしょう。通常、どちらか一方にコンパイルに使用する Java のバージョンが記載されています(参考)。\n project \u0026gt; properties \u0026gt; maven.compiler.source maven-compiler-plugin という単語を検索し、その下に書かれている configuration \u0026gt; source  なお、 Java5 から Java8 までは、 Javan と Java1.n というのは同じものを指します( Java8 = Java1.8 )。\nバージョン 9 以降は、単に Java9 , Java10 と言い、 Java1.9 や Java1.10 という呼び方はしません。\nバージョンが分からなかったら？ 取り敢えず、現時点では 1.8 を利用することにしておけば問題が起こりにくいでしょう。\n1.8 までは概ね後方互換性を保っていますが、9 以降はコンパイルオプションが変わったりしており、必ずしも過去に作成したソースがそのまま通るとは限りません。\nアプリケーションのダウンロードしインストールする 次の通り、JDK 及び Maven をダウンロードし、インストールします。\nJDK 上で確認したバージョンの JDK をインストールします。\nLinux であればパッケージマネージャから OpenJDK がインストールできるでしょう。\nWindows であれば Oracle のサイトから OracleJDK インストーラをダウンロードするのが簡単でしょう。\nOpenJDK/OracleJDK どちらの実装でも大抵は問題ないはずですが、保守的に行くのであれば OracleJDK をインストールする方が無難と言えます。\nOracleJDK は次の URL からダウンロードできます。\n http://www.oracle.com/technetwork/java/javase/downloads/index.html  古いバージョンが必要な場合は、このページの下の方にあるリンク、\u0026quot;Java Archive\u0026ldquo;をたどります。\nダウンロードするのは JRE ではなくJDKです。これは OpenJDK を導入する場合も同様です。\nJRE は実行環境のみで、コンパイラなどを含んでいません。\nApache Maven 次の URL から最新版(本ドキュメント記載時点で 3.5.3 )をダウンロードし、適当な場所に展開します。Linux であればパッケージマネージャからインストールできるかもしれませんが、バージョンが古い場合もありますので注意してください。\n https://maven.apache.org/download.cgi  binディレクトリにPATHを通しておきましょう。\n環境変数設定(必須ではない) モノによっては次の環境変数を要求するものもあります。何かそれっぽいエラーが出たら本節を思い出して設定してみてください。\n具体的な設定値については検索してください。\n   環境変数名 説明     JAVA_HOME Java インストール場所を設定する   M2_HOME Maven インストール場所を設定する(最新版を使用していればこれを要求されることはないはずですが)    ビルドする プロジェクトルートディレクトリで次のコマンドを実行します。\nmvn -Dmaven.test.skip clean package ビルドが成功すると、targetディレクトリ直下に所望のファイルが生成されているはずです。\n以上です。おつかれさまでした。\nアンインストールする 行いたい作業を終えたら、環境をクリーンアップします。\n能動的に行ったこと以外で変わっていることとしては、ホームディレクトリに Maven のキャッシュディレクトリ .m2 ができていますので、これを削除するのを忘れずに。\nその他情報 IDE(Eclipse)を使用する ソースコードを改変しようとした場合、あまり慣れていない言語なのでコード補完が欲しくなります。\nそこで Eclipse の導入手順についても触れておきます。\nダウンロードとインストール 次のページの Eclipse IDE for Java Developers をダウンロードし適当な場所に展開します。\n http://www.eclipse.org/downloads/eclipse-packages/  展開したディレクトリのeclipeコマンド(Windows はeclipse.exeかも？)で起動できます。\n補完ショートカットキーの確認/変更 Preferencesメニュー(Ubuntu の場合 Window \u0026gt; Preferences )を選択します。\n開かれたダイアログのツリーメニューで General \u0026gt; Keys を選択し、 Content Assist コマンドを検索しましょう。ここで設定されているBindingが補完ショートカットキーです。\nプロジェクトのインポート メニューで File \u0026gt; Import を選択し、ダイアログのツリーメニューで Maven \u0026gt; Existing Maven Projectsを選択します。その後、編集対象のディレクトリを指定すれば完了です。\nおわりに 実は私はこれから C#を学ぼうと思っています。\nそんな状況で、こういうドキュメントが有れば良いのに、というのが思い浮かんだので自分がよく知っている言語である Java 版を作成してみました。\nだれか C#版をください…\n","description":"","id":85,"section":"blog","tags":["java"],"title":"Building Java Project","uri":"https://yukihane.github.io/blog/201805/19/building-java-project/"},{"content":"なので配列(Array)には使えない。\ndatabase: \u0026amp;default ip: 192.168.1.5 port: 2000 db_name: test foo_database: \u0026lt;\u0026lt;: *default port: 2001 db_name: foo 上は実現できても下のようにはできない。\ndatabase_attr: \u0026amp;default - ip - port www_attr: \u0026lt;\u0026lt;: *default - name 関連: https://github.com/yaml/yaml/issues/35\n","description":"","id":86,"section":"blog","tags":["yaml"],"title":"yamlの継承っぽいのは継承というよりハッシュのマージ","uri":"https://yukihane.github.io/blog/201805/09/yaml/"},{"content":"Dockerfile 内で sudoers を編集しユーザ情報を追加したかった。\nRUN echo 'myuser ALL=(ALL) NOPASSWD: ALL' | EDITOR='tee -a' visudo  参考: linux - How do I edit /etc/sudoers from a script? - Stack Overflow\n","description":"","id":87,"section":"blog","tags":["linux"],"title":"ワンライナー sudoers 編集","uri":"https://yukihane.github.io/blog/201805/09/edit-sudoers-oneliner/"},{"content":"前提 既にビルド方法は確立しており、パッケージシステムに配布方法だけ任せたい、という場合に最小限の手間で RPM パッケージを作ることを考えます\n ビルドは RPM パッケージングのフロー中では行いません。既存のビルド方法でまかないます。 依存関係の設定は今回無視します。  参考リンク  RPM Packaging Guide  インストール RPM パッケージ作成のために必要なパッケージをインストールします。\n$ sudo yum install -y rpm-build rpmdevtools ディレクトリの作成 次のコマンドを実行し、rpm パッケージング作業に必要なディレクトリを作成します。\n$ rpmdev-setuptree ホームディレクトリ直下に次のようなディレクトリが作成されます。\n$ tree ~/rpmbuild /home/yuki/rpmbuild ├── BUILD ├── RPMS ├── SOURCES ├── SPECS └── SRPMS また、 ~/.rpmmacros ファイルが生成されます。\nインストール対象ファイルの配置 インストールするファイルを先ほど作成したディレクトリ ~/rpmbuild/BUILD ディレクトリに置きます。\n今回は hello-world.sh と goodby-world.sh の 2 ファイルを対象とすることにします。\n$ mv hello-world.sh ~/rpmbuild/BUILD/ $ mv goodby-world.sh ~/rpmbuild/BUILD/ spec ファイル作成 次のコマンドを実行すると、カレントディレクトリに spec フファイルの雛形が作成されます。\n今回は my-package という名前のパッケージを作成することにします。\n$ rpmdev-newspec my-package 必要最小限な spec ファイル 上記で作成したファイルを編集します。必須でないものについては削除することにすると、最終的に次のようなものになります。\nName: my-package Version: 0.0.1 Release: 1%{?dist} Summary: my first package License: proprietary BuildArch: noarch %description %install mkdir -p %{buildroot}%{_bindir} install -m 0755 hello-world.sh %{buildroot}%{_bindir}/hello-world.sh install -m 0755 goodby-world.sh %{buildroot}%{_bindir}/goodby-world.sh %files %{_bindir}/hello-world.sh %{_bindir}/goodby-world.sh  今回は bash スクリプトなので BuildArch: noarch を追記しましたが、このセクションを追加しなければビルドした環境(x86_64 など)が自動で付与されますので省略可能です。 %installセクションにインストール時に実行するコマンドを書き下します。　%{buildroot} が実際のインストール時のルートディレクトリ、と覚えておけばひとまず良いかと。 %files セクションにはインストールしたファイルを記述します。 %{buildroot}, %{_bindir} といったものはマクロ(macro)です。実際には事前定義された文字列で置き換えられます。詳しくは後述「Macro について」節を参照してください。 Version 及び Release については Fedora のGuidelines for Versioning Fedora Packagesが参考になるかも。  RPM パッケージ生成 次のコマンドを実行すると ~/rpmbuild/RPMS ディレクトリ以下に RPM パッケージが生成されます。\n$ rpmbuild -bb hello-world.spec 補足: Macro について More on Macros節及びそのリンク先が詳しいです。\n rpm --eval %{buildroot} など、 rpm --evalコマンドでマクロ展開結果を表示できます。 /usr/lib/rpm/macros に、システムが定義している macro があります。  付録: インストール先を変更できるように Relocatable RPM というそうです。\nspec ファイルに Prefix セクションを追加します。\nPrefix: %{_prefix} (※ %{_prefix} は実際には /usr )\nこれを追加してビルドした RPM パッケージの情報を見ると次のように表示されます。\n$ rpm -qip my-package-0.0.1-1.el7.centos.noarch.rpm ... Relocations : /usr ... このようなパッケージをインストールする際に --prefix オプションを付与して\n$ sudo rpm -ivh --prefix /usr/local my-package-0.0.1-1.el7.centos.noarch.rpm のようにインストールすると、 /usr/bin の代わりに /usr/local/bin 以下にスクリプトがインストールされます。\nちなみに Prefix を設定しない場合は \u0026ldquo;(not relocatable)\u0026rdquo; と表示されており、同じように --prefix オプションを付けてインストールしようとすると\n次のようにエラーになりインストールできません。\n$ sudo rpm -ivh --prefix /usr/local my-package-0.0.1-1.el7.centos.noarch.rpm エラー: パッケージ my-package は再配置できません。 ","description":"","id":88,"section":"blog","tags":["linux","centos"],"title":"手っ取り早くRPMパッケージを作成したかった","uri":"https://yukihane.github.io/blog/201803/20/building-rpm/"},{"content":"(注: 文中に記載の localRepository 設定有無、というのは間違った条件かも知れません(検証中))\n問題 mvn archetype:generate -DarchetypeCatalog=local コマンドを実行したところ、次のようなメッセージが出力され、 archetype-catalog.xml を認識できていないような感じでしたので原因を調べてみました。\n[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0) Choose archetype: Your filter doesn't match any archetype (hint: enter to return to initial list) Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 調査内容 使用した Maven のバージョンは、現時点での最新バージョンである 3.5.2 です。\n自作の maven-archetype-java-quickstart を用い、次の 3 パターンを試しました。\n plugin を明示しない - master ブランチ plugin 最新バージョン 3.0.1 を明示する - feature/test-maven-archetype-pluginブランチ plugin 2.4 バージョンを明示する - 上の feature/test-maven-archetype-plugin を書き換え  また、 settings.xml での localRepository 設定の有無でも結果が変わりましたのでそれらをまとめます。\n調査結果 まず、 mvn archetype:update-local-catalog コマンドで archetype-catalog.xml が生成される場所です。\n plugin未設定2.43.0.1 localRepository設定無し~/.m2/~/.m2/~/.m2/repository/ localRepository設定有り{localRepository}/~/.m2/{localRepository}/  plugin を明示しない場合、一貫していません。\n次に、 mvn archetype:generate -DarchetypeCatalog=local コマンド実行時にどの場所にある archetype-catalog.xml を読んでいるのかを調べました。\n localRepository設定無し~/.m2/ localRepository設定有り{localRepository}/  まとめ  localRepository 設定を行ってない場合、 ~/.m2/archetype-catalog.xml を読みに行こうとするので 3.0.1 を使用したプロジェクトを読み取れない。 localRepository 設定を行っている場合、 {localRepository}/archetype-catalog.xml を読みに行こうとするので 2.4 を使用したプロジェクトを読み取れない。  という結果になりました。\nlocalRepository 設定有無で archetype-catalog.xml を読み取る場所に一貫性が無い、というのが根本原因だと思われますが、結果的には、 maven-archetype-plugin を明示していない(私のプロジェクトのような)場合問題が起きない、ということになります。\n関連するバグレポート  [ARCHETYPE-529] Maven archetype:generate does not find local archetypes in interactive mode - ASF JIRA  ","description":"","id":89,"section":"blog","tags":null,"title":"maven-archetype-plugin と archetype-catalog.xml 生成場所/読み取り場所","uri":"https://yukihane.github.io/blog/201802/25/maven-archetype-catalog/"},{"content":"dependency について、2.3.2. Servlet based server-side applicationをみると最小構成はjersey-container-servletだけでいいように見える(Servlet3.0 以降の場合)が、実際にはjersey-hk2も必要。含めない場合次の例外が発生する。\n java.lang.IllegalStateException: InjectionManagerFactory not found.\n 1.1. Creating a New Project from Maven Archetypeに記載されている archetype を使ってプロジェクトを生成してみても依存関係にちゃっかり入っている。\n検索した感じ、バージョン 2.26(これを書いている時点での最新バージョン)以降の症状かも知れない。\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.glassfish.jersey.containers\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jersey-container-servlet\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${jersey.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.glassfish.jersey.inject\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jersey-hk2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${jersey.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  次に、Java9 では Java EE 関連のモジュールがデフォルトではロードされなくなったため、Jersey を使った JAX-RS(REST)プログラムをmvn jetty:runで実行しようとすると次の例外が出る。\n java.lang.NoClassDefFoundError: javax/activation/DataSource\n また、次も発生。\n java.lang.NoClassDefFoundError: javax/xml/bind/PropertyException\n それぞれ解消するために --add-modules java.activation,java.xml.bind オプションを付与する。Maven で実行する場合は、 MAVEN_OPTS 環境変数に設定しておけばランタイム実行パラメータとなる。\nマイグレーションガイドのModules Shared with Java EE Not Resolved by Defaultにある通り、--add-modules java.se.eeの方が簡単で覚えやすいかもしれない。\nMAVEN_OPTS=\u0026quot;--add-modules java.activation,java.xml.bind\u0026quot; mvn jetty:run  ","description":"","id":90,"section":"blog","tags":["java","jetty","jersey"],"title":"Java9でJettyでJerseyのMaven","uri":"https://yukihane.github.io/blog/201801/28/java9-jetty-jersey/"},{"content":"Polymer2 で の値をバインドする で my-input なるカスタムエレメントを作成しました。\u0026lt;input\u0026gt;の入力値をそのまま表示するだけのエレメントです。\n1 2 3 4 5 6 7  \u0026lt;dom-module id=\u0026#34;my-input\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text::input}}\u0026#34; /\u0026gt; [[text]] \u0026lt;/template\u0026gt; ... \u0026lt;/dom-module\u0026gt;   さて、この入力値を受け取れるよう、親エレメントを次のように作成しました。\n1 2 3 4 5 6 7  \u0026lt;dom-module id=\u0026#34;my-parent\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;my-input text=\u0026#34;{{parentText}}\u0026#34;\u0026gt;\u0026lt;/my-input\u0026gt; [[parentText]] \u0026lt;/template\u0026gt; ... \u0026lt;/dom-module\u0026gt;   そして\u0026lt;input\u0026gt;に値を入力してみると…親に反映されない。\nいろいろ試行錯誤してみた所、親エレメント側にも ::input を足して\n1 2 3 4 5 6 7  \u0026lt;dom-module id=\u0026#34;my-parent\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;my-input text=\u0026#34;{{parentText::input}}\u0026#34;\u0026gt;\u0026lt;/my-input\u0026gt; [[parentText]] \u0026lt;/template\u0026gt; ... \u0026lt;/dom-module\u0026gt;   とすれば反映されるようになりました。けど、これはどうなんだろう？\n子(my-inputエレメント)は、まあ自分が\u0026lt;input\u0026gt;を扱っているのを知っているから良いとして、親(my-parentエレメント)が子の事情を考慮して実装しないといけないとは。\nこれの答えはここでした。\n Data system concepts - How data flow is controlled 和訳: データフローの制御の仕組み  てっきりカーリーブラケット{{}}は、子エレメントへも親エレメントへも自動で反映してくれるものだと思っていたのですが、正確には、「親エレメントへも反映できる」だけで、デフォルトでは反映してくれないようです。\n Automatic, which allows upward (target to host) and downwards (host to target) data flow. Automatic bindings use double curly brackets ({{ }}):\n \n notify. A notifying property supports upward data flow. By default, properties are non-notifying, and don't support upward data flow.\n そんなわけで、notifyを明示的にtrueに設定してやる必要がありました。\n子エレメント(今回の場合だとmy-input)のプロパティ定義で次のようにすれば良いことになります。\n冒頭に書いたような、親エレメント(今回の場合はmy-parent)に::inputは必要ありません。\n1 2 3 4 5 6 7 8  static get properties() { return { text:{ type: String, notify: true } } }   ","description":"","id":91,"section":"blog","tags":["polymer","frontend"],"title":"Polymer2 で \u0026lt;input\u0026gt; の値を「親エレメントの値と」バインドする","uri":"https://yukihane.github.io/blog/201801/21/polymer2-input-bind-to-parent/"},{"content":"ドキュメントのstartを読み終えて、さあなにか作ってみるか、そうだよく 2-way binding の例で出てくるinputタグ入力値を画面に反映させるのをやってみよう、と思って\n1 2 3 4  \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text}}\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;[[text]]\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt;   とかやってみたものの上手く行かなかった。\n答えはここにありました。\n Two-way binding to a non-Polymer element 和訳: Polymer 要素でない要素への双方向データバインディング  inputイベントを拾うために次のように ::input を後ろにくっつける必要がある。\n1 2 3 4  \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text::input}}\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;[[text]]\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt;   参考: Cannot data bind to \u0026lt;input\u0026gt; in Polymer 2.0 - Stack Overflow\n全文はこちら:\nhttps://jsfiddle.net/2eqkymLf/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;ja\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34; /\u0026gt; \u0026lt;base href=\u0026#34;https://polygit.org/components/\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;webcomponentsjs/webcomponents-lite.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;import\u0026#34; href=\u0026#34;polymer/polymer.html\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;import\u0026#34; href=\u0026#34;polymer/polymer-element.html\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;my-input\u0026gt;\u0026lt;/my-input\u0026gt; \u0026lt;dom-module id=\u0026#34;my-input\u0026#34;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;{{text::input}}\u0026#34; /\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;[[text]]\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; // For Firefox  // https://github.com/Polymer/polymer-bundler/issues/234#issuecomment-133379949  window.addEventListener(\u0026#34;WebComponentsReady\u0026#34;, function () { class MyInput extends Polymer.Element { static get is() { return \u0026#34;my-input\u0026#34;; } static get properties() { return { text: String, }; } constructor() { super(); } } customElements.define(MyInput.is, MyInput); }); \u0026lt;/script\u0026gt; \u0026lt;/dom-module\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   ","description":"","id":92,"section":"blog","tags":["polymer","frontend"],"title":"Polymer2 で \u0026lt;input\u0026gt; の値をバインドする","uri":"https://yukihane.github.io/blog/201801/21/polymer2-input-bind/"}]