<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on 発火後忘失</title>
    <link>https://yukihane.github.io/tags/java/</link>
    <description>Recent content in java on 発火後忘失</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 13 Jun 2020 10:34:19 +0000</lastBuildDate>
    
	<atom:link href="https://yukihane.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>List#contains(null)は使わないほうが良い</title>
      <link>https://yukihane.github.io/posts/202006/13/list-contains-null/</link>
      <pubDate>Sat, 13 Jun 2020 10:34:19 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/13/list-contains-null/</guid>
      <description>List(などのコレクション)が要素に null を含むかどうかの判定に、 contains(null) を利用すると NullPointerException が発生することがあります。 リファレンスには次のようにあります</description>
    </item>
    
    <item>
      <title>CompletableFuture覚え書き</title>
      <link>https://yukihane.github.io/posts/202006/02/note-of-completablefuture/</link>
      <pubDate>Tue, 02 Jun 2020 07:54:25 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/02/note-of-completablefuture/</guid>
      <description>CompletableFuture の一連の非同期処理 ほげAsync は、デフォルトでは ForkJoinPool.commonPool() という ExecutorService で実行されます。 そしてこの ExecutorService のワーカスレッドはデーモンスレッドであるため、非デ</description>
    </item>
    
    <item>
      <title>Javaのソースファイルはpackageに対応したディレクトリ階層に置かなくても良い？</title>
      <link>https://yukihane.github.io/posts/202005/29/java-source-location/</link>
      <pubDate>Fri, 29 May 2020 08:28:07 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202005/29/java-source-location/</guid>
      <description>https://twitter.com/hishidama/status/1266176675768745984 packageの宣言と実際のディレクトリが一致していなくてもmvn compile（やjavac）が成功するんですが、そういうもんでしたっけ</description>
    </item>
    
    <item>
      <title>Hello, JSF</title>
      <link>https://yukihane.github.io/posts/202004/06/hello-jsf/</link>
      <pubDate>Mon, 06 Apr 2020 01:52:30 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/06/hello-jsf/</guid>
      <description>はじめに JSFを少し触ってみようと思ったのですが、もはやロストテクノロジーでどう始めるのかすらドキュメントを探すのが大変… 今回はかろうじてこ</description>
    </item>
    
    <item>
      <title>いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(2)</title>
      <link>https://yukihane.github.io/posts/202004/03/java-application-frameworks-cheat-sheet2/</link>
      <pubDate>Fri, 03 Apr 2020 02:44:22 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/03/java-application-frameworks-cheat-sheet2/</guid>
      <description>Table of Contents はじめに ポイント: xmlファイルを見逃さないようにする どんな(オレオレ)フレームワークを使っているか: web.xml 起動時処理(等): @PostConstgruct Servlet fileter, Servlet listener JSF</description>
    </item>
    
    <item>
      <title>いきなりJavaアプリケーションサーバの保守を任されることになった人のためのチートシート(1)</title>
      <link>https://yukihane.github.io/posts/202004/02/java-application-frameworks-cheat-sheet/</link>
      <pubDate>Thu, 02 Apr 2020 06:15:28 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202004/02/java-application-frameworks-cheat-sheet/</guid>
      <description>Table of Contents 目的 アプリケーションをデプロイする Tomcat にデプロイする WildFly にデプロイする デバッガを接続しステップ実行できるようにする Tomcat へ Eclipse でデバッガをアタッ</description>
    </item>
    
    <item>
      <title>Maven Enforcer Pluginの実行をスキップする</title>
      <link>https://yukihane.github.io/posts/202003/30/skip-maven-enforcer-plugin/</link>
      <pubDate>Mon, 30 Mar 2020 05:37:45 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202003/30/skip-maven-enforcer-plugin/</guid>
      <description>とあるMavenプロジェクトを mvn clean install しようとしたところ、次のエラーになり正常終了しませんでした。 [WARNING] Rule 0: org.apache.maven.plugins.enforcer.BannedRepositories failed with message: Current maven session contains banned repository urls, please double check your pom or settings.xml: central</description>
    </item>
    
    <item>
      <title>finalと実質finalの違い</title>
      <link>https://yukihane.github.io/posts/202002/21/effectively-final-difference/</link>
      <pubDate>Fri, 21 Feb 2020 06:53:19 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202002/21/effectively-final-difference/</guid>
      <description>https://ja.stackoverflow.com/a/63099/2808 を見ていて気づいたのですが、 実質final というのは脳内(コンパイラ)で final を補完してくれる、というような処理が行われるわけではないのですね</description>
    </item>
    
  </channel>
</rss>