<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring-boot on 発火後忘失</title>
    <link>https://yukihane.github.io/tags/spring-boot/</link>
    <description>Recent content in spring-boot on 発火後忘失</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 10 Jul 2020 21:54:33 +0000</lastBuildDate>
    
	<atom:link href="https://yukihane.github.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring-BootでJSPを使う</title>
      <link>https://yukihane.github.io/posts/202007/11/jsp-on-springboot/</link>
      <pubDate>Fri, 10 Jul 2020 21:54:33 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202007/11/jsp-on-springboot/</guid>
      <description>https://start.spring.io/ で depencencies に Spring Web を追加して生成します。 生成された pom.xml に次の依存関係を追加します: pom.xml &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;!-- 必要に応じて --&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; appliction.properties にﾂｲ着を追加します: application.properties spring.mvc.view.prefix= /WEB-INF/view/ spring.mvc.view.suffix=</description>
    </item>
    
    <item>
      <title>Spring Boot でなるべく依存関係を小さくしてWebMVCを使ってみる</title>
      <link>https://yukihane.github.io/posts/202007/02/minimal-webmvc-with-springboot/</link>
      <pubDate>Thu, 02 Jul 2020 21:11:04 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202007/02/minimal-webmvc-with-springboot/</guid>
      <description>特に実用性とかは考えていない。何となくやってみたというだけ。 動かしたいやつ @RestController @RequestMapping(&amp;#34;/&amp;#34;) public class MyController { @GetMapping(&amp;#34;/&amp;#34;) public String index() { return &amp;#34;hello&amp;#34;; } } 設定 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tomcat-embed-core&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; @Configuration @EnableWebMvc public class</description>
    </item>
    
    <item>
      <title>${...}と#{...}の違い</title>
      <link>https://yukihane.github.io/posts/202007/02/difference-between-doller-and-hash/</link>
      <pubDate>Thu, 02 Jul 2020 00:31:47 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202007/02/difference-between-doller-and-hash/</guid>
      <description>Spring Expression Language (SpEL) with @Value: dollar vs. hash ($ vs. #) より。 ${&amp;#8230;&amp;#8203;} は単なるプロパティのプレースホルダ。 #{&amp;#8230;&amp;#8203;} は Spring Expression Language(SpEL) の構文。 プレースホルダは置き換えるだけだけれども、SpELはも</description>
    </item>
    
    <item>
      <title>Spring 2.3.0 で時刻オフセットの書式コロン付き&#43;09:00みたいに変わっとるやん</title>
      <link>https://yukihane.github.io/posts/202006/30/json-datetime-format-changed-on-springboot-2.3/</link>
      <pubDate>Tue, 30 Jun 2020 21:09:44 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/30/json-datetime-format-changed-on-springboot-2.3/</guid>
      <description>正確には jackson-databind 2.11.0 で。 jackson 2.11 リリースノート Change default textual serialization of java.util.Date/Calendar to include colon in timezone offset #2643 このへん見ると分かるけど、Spring Boot 2.2 系列は jackson-databind 2.10.x が採用されていて、 2.3.0 で 2.11.0 が採</description>
    </item>
    
    <item>
      <title>Spring MVCにはJPA EntityのIDからエンティティオブジェクトに変換する機能がある(が、2.3.1では機能しない)</title>
      <link>https://yukihane.github.io/posts/202006/20/spring-boot-thymeleaf-converts-id-to-entity/</link>
      <pubDate>Sat, 20 Jun 2020 08:16:28 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/20/spring-boot-thymeleaf-converts-id-to-entity/</guid>
      <description>Spring Bootは[Spring Data Commons](https://docs.spring.io/spring-data/commons/docs</description>
    </item>
    
    <item>
      <title>Spring Security OAuth 2.0 Client(OAuth 2.0 Login)でトークンの管理をしているのはOAuth2AuthorizedClientService</title>
      <link>https://yukihane.github.io/posts/202006/17/oauth2authorizedclientservice/</link>
      <pubDate>Wed, 17 Jun 2020 09:24:57 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/17/oauth2authorizedclientservice/</guid>
      <description>私も今回の質問(本文末参照)を見たとき少しの間勘違いしてしまったのですが、OAuth2.0のクライアントがどこで各リソースオーナーのトークン</description>
    </item>
    
    <item>
      <title>Spring BootのGradleでのデバッグ実行方法</title>
      <link>https://yukihane.github.io/posts/202006/15/spring-boot-debugging/</link>
      <pubDate>Mon, 15 Jun 2020 07:42:25 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/15/spring-boot-debugging/</guid>
      <description>gradle bootRun --debug-jvm というように、--debug-jvm オプションを付与すれば良いようです。 これで、デバッガ接続の待受状態で起動します。 BootRun は JavaExec を継承してい</description>
    </item>
    
    <item>
      <title>So many UserDetailsService samples considered harmful for beginners</title>
      <link>https://yukihane.github.io/posts/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</link>
      <pubDate>Sat, 13 Jun 2020 21:07:40 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/13/userdetailsservice-samples-considered-harmful-for-biginners/</guid>
      <description>やっぱり一発目の Spring Security やってみたで UserDetailsService 使うのは止めようず。So many UserDetailsService samples considered harmful for beginners. はじめに ちょっと待って！その UserDetails、本当に必要ですか</description>
    </item>
    
    <item>
      <title>UserDetailsServiceは誤解されている</title>
      <link>https://yukihane.github.io/posts/202006/12/userdetailsservice-conidered-harmful/</link>
      <pubDate>Fri, 12 Jun 2020 09:37:26 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202006/12/userdetailsservice-conidered-harmful/</guid>
      <description>サンプルコード等だけを見ていると UserDetailsService を利用することがSpring Securityの唯一の認証処理実現方法だと誤解しがちですが、 UserDetailsService はむしろユーテ</description>
    </item>
    
    <item>
      <title>Spring BootのRestTemplateで text/plain;Windows-31J なRESTレスポンスを処理する</title>
      <link>https://yukihane.github.io/posts/202001/26/resttemplate-with-illformed-json/</link>
      <pubDate>Sun, 26 Jan 2020 14:48:47 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/202001/26/resttemplate-with-illformed-json/</guid>
      <description>要旨 JSONを返してくるのだけれどMIME typeが text/plain;charset=Windows-31J なレスポンスを、RestTemplateで扱いたい。 @GetMapping(produces = &#34;text/plain;charset=Windows-31J&#34;) public String response() { return &#34;{\&#34;text\&#34;: \&#34;こんにちは世</description>
    </item>
    
    <item>
      <title>RestTemplateBuilderに関する覚書</title>
      <link>https://yukihane.github.io/posts/201912/10/resttemplatebuilder/</link>
      <pubDate>Tue, 10 Dec 2019 20:41:15 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201912/10/resttemplatebuilder/</guid>
      <description>RestTemplateBuilder RestTemplate は Spring Framework(spring-web)だけれども RestTemplateBuilder は Spring Boot。 Java の世界の なんちゃらBuilder (StringBuilderと</description>
    </item>
    
    <item>
      <title>Spring Boot のプロパティではkebab-formatが推奨されている</title>
      <link>https://yukihane.github.io/posts/201911/28/kebab-format-recommended-on-spring-boot-properties/</link>
      <pubDate>Thu, 28 Nov 2019 20:38:12 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201911/28/kebab-format-recommended-on-spring-boot-properties/</guid>
      <description>Relaxed Binding 2.0 という仕組みにより spring.jpa.database-platform=mysql spring.jpa.databasePlatform=mysql spring.JPA.database_platform=mysql いずれの形式でも正しくバインドできる。 が、公式ドキュメントからは一番上の database-platform が推奨されているように読み取れる。 Relaxed</description>
    </item>
    
    <item>
      <title>MockMvc でURLエンコード済みのpathを渡したいときは new URI(...) を引数にする</title>
      <link>https://yukihane.github.io/posts/201910/29/encoded-url-passing-to-mockmvc/</link>
      <pubDate>Tue, 29 Oct 2019 20:36:42 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201910/29/encoded-url-passing-to-mockmvc/</guid>
      <description>OAuth2.0 の redirect_uri をゴニョった実装をテストしたいときにハマった。 mockMvc.perform(get(new URI(&amp;quot;/line/oauth/authorize?redirece_uri=https%3A%2F%2Fexample.com&amp;quot;) ってやらないと二重にエンコードされてしまう。 参考 MockMvc needs to accept prepared URI with encoded URI path variables [SPR-11441] #16067 EncodedUriTests.java</description>
    </item>
    
    <item>
      <title>h2-consoleとspring-boot-starter-securityと私</title>
      <link>https://yukihane.github.io/posts/201907/12/h2-console-on-spring-boot/</link>
      <pubDate>Fri, 12 Jul 2019 20:33:40 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201907/12/h2-console-on-spring-boot/</guid>
      <description>概要 spring-boot-starter-security を導入しても http://localhost:8080/h2-console にアクセスしたかった。 作業結果: https://github.com/yukihane/hello-java/tree/master/spring/h2-console-spring-security-example 手順 h2-console が使える依存関係を追加してプロジェクトセットアップ 8113d7 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;</description>
    </item>
    
    <item>
      <title>spring-boot-starter-security を入れたら認証画面が！</title>
      <link>https://yukihane.github.io/posts/201907/04/spring-boot-and-spring-security/</link>
      <pubDate>Thu, 04 Jul 2019 20:32:21 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201907/04/spring-boot-and-spring-security/</guid>
      <description>WebSecurityConfigurerAdapter#configure(HttpSecurity) で form 認証を有効化しているのでこれをディスる。 WebSecurityConfigurerAdapterを継承した Spring コンポーネントをスキャン対</description>
    </item>
    
    <item>
      <title>Spring Bootで コンポーネント外からコンポーネントを取得したかった</title>
      <link>https://yukihane.github.io/posts/201906/01/spring-boot-component-out-of-container/</link>
      <pubDate>Sat, 01 Jun 2019 20:15:54 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201906/01/spring-boot-component-out-of-container/</guid>
      <description>動機 CDI で言うところの CDI.current().getBeans(...) とか CDI.current().select(...)とかそんな感じのことをやりたかった。 参考リファレンス ドキュメント</description>
    </item>
    
    <item>
      <title>Spring Boot 2.1 でテスト時 @Bean を挿げ替えたかった</title>
      <link>https://yukihane.github.io/posts/201905/31/spring-boot-bean-on-testing/</link>
      <pubDate>Fri, 31 May 2019 20:14:41 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201905/31/spring-boot-bean-on-testing/</guid>
      <description>動機 ユニットテスト実行時に java.time.Clock を挿げ替えてストップ・ザ・ワールド(GC的な意味でなくジョジョ的な意味で)したかった。 考え方/方針 @Configuration で @Bean を定義し</description>
    </item>
    
    <item>
      <title>text/plain で JSON を投げつけてくるヤツに対処する</title>
      <link>https://yukihane.github.io/posts/201905/21/spring-boog-json-convert/</link>
      <pubDate>Tue, 21 May 2019 20:12:30 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201905/21/spring-boog-json-convert/</guid>
      <description>RestTemplate でレスポンスの Content-Type を変更する。 の別解。 @Autowired private RestTemplateBuilder builder; ... final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter(); converter.setSupportedMediaTypes(Arrays.asList(MediaType.TEXT_PLAIN)); final RestTemplate restTemplate = builder.additionalMessageConverters(converter).build(); ちなみに上記のようにコンバータを明示的に設定しない場合だと次のような</description>
    </item>
    
    <item>
      <title>Testing the Web Layer のコードを JUnit Jupiter にマイグレーションしてみる</title>
      <link>https://yukihane.github.io/posts/201904/16/migration-to-junit5/</link>
      <pubDate>Tue, 16 Apr 2019 20:06:33 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201904/16/migration-to-junit5/</guid>
      <description>概要 (追記: ここで試したのは2.1.4.RELEASE時点のもの。2.2.0.M3以降では #14736の通り JUnit5 がデフォルトになっている模様。</description>
    </item>
    
    <item>
      <title>Spring Validator(でラップされたBean Validation)のメッセージをi18nしたときの覚え書き</title>
      <link>https://yukihane.github.io/posts/201903/26/change-spring-validator-message/</link>
      <pubDate>Tue, 26 Mar 2019 20:04:13 +0000</pubDate>
      
      <guid>https://yukihane.github.io/posts/201903/26/change-spring-validator-message/</guid>
      <description>やりたかったこと BeanValidation のプロパティファイル ValidationMessages.properties でなく、 Spring のメッセージプロパティに統合したい。 Spring のメッセージプロパティとは？ Accept-Langu</description>
    </item>
    
  </channel>
</rss>